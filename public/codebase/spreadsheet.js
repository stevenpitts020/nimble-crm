/*
@license

dhtmlxSpreadsheet v.4.2.0 Professional

This software is covered by DHTMLX Individual License.
Usage without proper license is prohibited.

(c) XB Software.

*/
if (window.dhx){ window.dhx_legacy = dhx; delete window.dhx; }(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["dhx"] = factory();
	else
		root["dhx"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/codebase/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 74);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var dom = __webpack_require__(92);
exports.el = dom.defineElement;
exports.sv = dom.defineSvgElement;
exports.view = dom.defineView;
exports.create = dom.createView;
exports.inject = dom.injectView;
exports.KEYED_LIST = dom.KEYED_LIST;
function disableHelp() {
    dom.DEVMODE.mutations = false;
    dom.DEVMODE.warnings = false;
    dom.DEVMODE.verbose = false;
    dom.DEVMODE.UNKEYED_INPUT = false;
}
exports.disableHelp = disableHelp;
function resizer(handler) {
    var resize = window.ResizeObserver;
    var activeHandler = function (node) {
        var height = node.el.offsetHeight;
        var width = node.el.offsetWidth;
        handler(width, height);
    };
    if (resize) {
        return exports.el("div.dhx-resize-observer", {
            _hooks: {
                didInsert: function (node) {
                    new resize(function () { return activeHandler(node); }).observe(node.el);
                },
            },
        });
    }
    return exports.el("iframe.dhx-resize-observer", {
        _hooks: {
            didInsert: function (node) {
                node.el.contentWindow.onresize = function () { return activeHandler(node); };
                activeHandler(node);
            },
        },
    });
}
exports.resizer = resizer;
function resizeHandler(container, handler) {
    return exports.create({
        render: function () {
            return resizer(handler);
        },
    }).mount(container);
}
exports.resizeHandler = resizeHandler;
function awaitRedraw() {
    return new Promise(function (res) {
        requestAnimationFrame(function () {
            res();
        });
    });
}
exports.awaitRedraw = awaitRedraw;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(2);
var counter = new Date().valueOf();
function uid() {
    return "u" + counter++;
}
exports.uid = uid;
function extend(target, source, deep) {
    if (deep === void 0) { deep = true; }
    if (source) {
        for (var key in source) {
            var sobj = source[key];
            var tobj = target[key];
            if (sobj === undefined) {
                delete target[key];
            }
            else if (deep &&
                typeof tobj === "object" &&
                !(tobj instanceof Date) &&
                !(tobj instanceof Array)) {
                extend(tobj, sobj);
            }
            else {
                target[key] = sobj;
            }
        }
    }
    return target;
}
exports.extend = extend;
function copy(source, withoutInner) {
    var result = {};
    for (var key in source) {
        if (!withoutInner || !key.startsWith("$")) {
            result[key] = source[key];
        }
    }
    return result;
}
exports.copy = copy;
function naturalSort(arr) {
    return arr.sort(function (a, b) {
        var nn = typeof a === "string" ? a.localeCompare(b) : a - b;
        return nn;
    });
}
exports.naturalSort = naturalSort;
function findIndex(arr, predicate) {
    var len = arr.length;
    for (var i = 0; i < len; i++) {
        if (predicate(arr[i])) {
            return i;
        }
    }
    return -1;
}
exports.findIndex = findIndex;
function isEqualString(from, to) {
    from = from.toString();
    to = to.toString();
    if (from.length > to.length) {
        return false;
    }
    for (var i = 0; i < from.length; i++) {
        if (from[i].toLowerCase() !== to[i].toLowerCase()) {
            return false;
        }
    }
    return true;
}
exports.isEqualString = isEqualString;
function singleOuterClick(fn) {
    var click = function (e) {
        if (fn(e)) {
            document.removeEventListener("click", click);
        }
    };
    document.addEventListener("click", click);
}
exports.singleOuterClick = singleOuterClick;
function detectWidgetClick(widgetId, cb) {
    var click = function (e) { return cb(html_1.locate(e, "dhx_widget_id") === widgetId); };
    document.addEventListener("click", click);
    return function () { return document.removeEventListener("click", click); };
}
exports.detectWidgetClick = detectWidgetClick;
function unwrapBox(box) {
    if (Array.isArray(box)) {
        return box[0];
    }
    return box;
}
exports.unwrapBox = unwrapBox;
function wrapBox(unboxed) {
    if (Array.isArray(unboxed)) {
        return unboxed;
    }
    return [unboxed];
}
exports.wrapBox = wrapBox;
function isDefined(some) {
    return some !== null && some !== undefined;
}
exports.isDefined = isDefined;
function range(from, to) {
    if (from > to) {
        return [];
    }
    var result = [];
    while (from <= to) {
        result.push(from++);
    }
    return result;
}
exports.range = range;
function isNumeric(val) {
    return !isNaN(val - parseFloat(val));
}
exports.isNumeric = isNumeric;
function downloadFile(data, filename, mimeType) {
    if (mimeType === void 0) { mimeType = "text/plain"; }
    var file = new Blob([data], { type: mimeType });
    if (window.navigator.msSaveOrOpenBlob) {
        // IE10+
        window.navigator.msSaveOrOpenBlob(file, filename);
    }
    else {
        var a_1 = document.createElement("a");
        var url_1 = URL.createObjectURL(file);
        a_1.href = url_1;
        a_1.download = filename;
        document.body.appendChild(a_1);
        a_1.click();
        setTimeout(function () {
            document.body.removeChild(a_1);
            window.URL.revokeObjectURL(url_1);
        }, 0);
    }
}
exports.downloadFile = downloadFile;
function debounce(func, wait, immediate) {
    var timeout;
    return function executedFunction() {
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var later = function () {
            timeout = null;
            if (!immediate) {
                func.apply(_this, args);
            }
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) {
            func.apply(this, args);
        }
    };
}
exports.debounce = debounce;
function compare(obj1, obj2) {
    for (var p in obj1) {
        if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) {
            return false;
        }
        switch (typeof obj1[p]) {
            case "object":
                if (!compare(obj1[p], obj2[p])) {
                    return false;
                }
                break;
            case "function":
                if (typeof obj2[p] === "undefined" ||
                    (p !== "compare" && obj1[p].toString() !== obj2[p].toString())) {
                    return false;
                }
                break;
            default:
                if (obj1[p] !== obj2[p]) {
                    return false;
                }
        }
    }
    for (var p in obj2) {
        if (typeof obj1[p] === "undefined") {
            return false;
        }
    }
    return true;
}
exports.compare = compare;
exports.isType = function (value) {
    var regex = /^\[object (\S+?)\]$/;
    var matches = Object.prototype.toString.call(value).match(regex) || [];
    return (matches[1] || "undefined").toLowerCase();
};
exports.isEmptyObj = function (obj) {
    for (var key in obj) {
        return false;
    }
    return true;
};
exports.getMaxArrayNymber = function (array) {
    if (!array.length)
        return;
    var maxNumber = -Infinity;
    var index = 0;
    var length = array.length;
    for (index; index < length; index++) {
        if (array[index] > maxNumber)
            maxNumber = array[index];
    }
    return maxNumber;
};
exports.getMinArrayNymber = function (array) {
    if (!array.length)
        return;
    var minNumber = +Infinity;
    var index = 0;
    var length = array.length;
    for (index; index < length; index++) {
        if (array[index] < minNumber)
            minNumber = array[index];
    }
    return minNumber;
};
exports.getStringWidth = function (value, config) {
    config = __assign({ font: "normal 14px Roboto", lineHeight: 20 }, config);
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d");
    if (config.font)
        ctx.font = config.font;
    var width = ctx.measureText(value).width;
    canvas.remove();
    return width;
};
exports.rgbToHex = function (color) {
    if (color.substr(0, 1) === "#") {
        return color;
    }
    var digits = /(.*?)rgb[a]?\((\d+), *(\d+), *(\d+),* *([\d+.]*)\)/.exec(color);
    var red = parseInt(digits[2], 10)
        .toString(16)
        .padStart(2, "0");
    var green = parseInt(digits[3], 10)
        .toString(16)
        .padStart(2, "0");
    var blue = parseInt(digits[4], 10)
        .toString(16)
        .padStart(2, "0");
    return "#" + red + green + blue;
};


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
function toNode(node) {
    var _a;
    return typeof node === "string"
        ? document.getElementById(node) || document.querySelector(node) || ((_a = document.querySelector("[dhx_root_id=" + node + "]")) === null || _a === void 0 ? void 0 : _a.parentElement) || document.body
        : node || document.body;
}
exports.toNode = toNode;
function eventHandler(prepare, hash, afterCall) {
    var keys = Object.keys(hash);
    return function (ev) {
        var data = prepare(ev);
        if (data !== undefined) {
            var node = ev.target;
            outer_block: while (node) {
                var cssstring = node.getAttribute ? node.getAttribute("class") || "" : "";
                if (cssstring.length) {
                    var css = cssstring.split(" ");
                    for (var j = 0; j < keys.length; j++) {
                        if (css.includes(keys[j])) {
                            if (hash[keys[j]](ev, data) === false)
                                return false;
                            else
                                break outer_block;
                        }
                    }
                }
                node = node.parentNode;
            }
        }
        if (afterCall)
            afterCall(ev);
        return true;
    };
}
exports.eventHandler = eventHandler;
function locateNode(target, attr, dir) {
    if (attr === void 0) { attr = "dhx_id"; }
    if (dir === void 0) { dir = "target"; }
    if (target instanceof Event) {
        target = target[dir];
    }
    while (target) {
        if (target.getAttribute && target.getAttribute(attr)) {
            return target;
        }
        target = target.parentNode;
    }
}
exports.locateNode = locateNode;
function locate(target, attr) {
    if (attr === void 0) { attr = "dhx_id"; }
    var node = locateNode(target, attr);
    return node ? node.getAttribute(attr) : "";
}
exports.locate = locate;
function locateNodeByClassName(target, className) {
    if (!(target instanceof Element)) {
        target = target.target;
    }
    while (target) {
        if (className) {
            if (target.classList && target.classList.contains(className)) {
                return target;
            }
        }
        else if (target.getAttribute && target.getAttribute("dhx_id")) {
            return target;
        }
        target = target.parentNode;
    }
}
exports.locateNodeByClassName = locateNodeByClassName;
function getBox(elem) {
    var box = elem.getBoundingClientRect();
    var body = document.body;
    var scrollTop = window.pageYOffset || body.scrollTop;
    var scrollLeft = window.pageXOffset || body.scrollLeft;
    var top = box.top + scrollTop;
    var left = box.left + scrollLeft;
    var right = body.offsetWidth - box.right;
    var bottom = body.offsetHeight - box.bottom;
    var width = box.right - box.left;
    var height = box.bottom - box.top;
    return { top: top, left: left, right: right, bottom: bottom, width: width, height: height };
}
exports.getBox = getBox;
var scrollWidth = -1;
function getScrollbarWidth() {
    if (scrollWidth > -1) {
        return scrollWidth;
    }
    var scrollDiv = document.createElement("div");
    document.body.appendChild(scrollDiv);
    scrollDiv.style.cssText = "position: absolute;left: -99999px;overflow:scroll;width: 100px;height: 100px;";
    scrollWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    return scrollWidth;
}
exports.getScrollbarWidth = getScrollbarWidth;
var scrollHeight = -1;
function getScrollbarHeight() {
    if (scrollHeight > -1) {
        return scrollHeight;
    }
    var scrollDiv = document.createElement("div");
    document.body.appendChild(scrollDiv);
    scrollDiv.style.cssText = "position: absolute;left: -99999px;overflow:scroll;width: 100px;height: 100px;";
    scrollHeight = scrollDiv.offsetHeight - scrollDiv.clientHeight;
    document.body.removeChild(scrollDiv);
    return scrollHeight;
}
exports.getScrollbarHeight = getScrollbarHeight;
function isIE() {
    var ua = window.navigator.userAgent;
    return ua.includes("MSIE ") || ua.includes("Trident/");
}
exports.isIE = isIE;
function isSafari() {
    var check = function (str) { return str.test(window.navigator.userAgent); };
    var chrome = check(/Chrome/);
    var firefox = check(/Firefox/);
    return !chrome && !firefox && check(/Safari/);
}
exports.isSafari = isSafari;
function isFirefox() {
    var check = function (str) { return str.test(window.navigator.userAgent); };
    var chrome = check(/Chrome/);
    var safari = check(/Safari/);
    return !chrome && !safari && check(/Firefox/);
}
exports.isFirefox = isFirefox;
function getRealPosition(node) {
    var rects = node.getBoundingClientRect();
    return {
        left: rects.left + window.pageXOffset,
        right: rects.right + window.pageXOffset,
        top: rects.top + window.pageYOffset,
        bottom: rects.bottom + window.pageYOffset,
    };
}
exports.getRealPosition = getRealPosition;
function getWindowBorders() {
    return {
        rightBorder: window.pageXOffset + window.innerWidth,
        bottomBorder: window.pageYOffset + window.innerHeight,
    };
}
function horizontalCentering(pos, width, rightBorder) {
    var nodeWidth = pos.right - pos.left;
    var diff = (width - nodeWidth) / 2;
    var left = pos.left - diff;
    var right = pos.right + diff;
    if (left >= 0 && right <= rightBorder) {
        return left;
    }
    if (left < 0) {
        return 0;
    }
    return rightBorder - width;
}
function verticalCentering(pos, height, bottomBorder) {
    var nodeHeight = pos.bottom - pos.top;
    var diff = (height - nodeHeight) / 2;
    var top = pos.top - diff;
    var bottom = pos.bottom + diff;
    if (top >= 0 && bottom <= bottomBorder) {
        return top;
    }
    if (top < 0) {
        return 0;
    }
    return bottomBorder - height;
}
function placeBottomOrTop(pos, config) {
    var _a = getWindowBorders(), rightBorder = _a.rightBorder, bottomBorder = _a.bottomBorder;
    var left;
    var top;
    var bottomDiff = bottomBorder - pos.bottom - config.height;
    var topDiff = pos.top - config.height;
    if (config.mode === "bottom") {
        if (bottomDiff >= 0) {
            top = pos.bottom;
        }
        else if (topDiff >= 0) {
            top = topDiff;
        }
    }
    else {
        if (topDiff >= 0) {
            top = topDiff;
        }
        else if (bottomDiff >= 0) {
            top = pos.bottom;
        }
    }
    if (bottomDiff < 0 && topDiff < 0) {
        if (config.auto) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            return placeRightOrLeft(pos, __assign(__assign({}, config), { mode: "right", auto: false }));
        }
        top = bottomDiff > topDiff ? pos.bottom : topDiff;
    }
    if (config.centering) {
        left = horizontalCentering(pos, config.width, rightBorder);
    }
    else {
        var leftDiff = rightBorder - pos.left - config.width;
        var rightDiff = pos.right - config.width;
        if (leftDiff >= 0) {
            left = pos.left;
        }
        else if (rightDiff >= 0) {
            left = rightDiff;
        }
        else {
            left = rightDiff > leftDiff ? pos.left : rightDiff;
        }
    }
    return { left: left, top: top };
}
function placeRightOrLeft(pos, config) {
    var _a = getWindowBorders(), rightBorder = _a.rightBorder, bottomBorder = _a.bottomBorder;
    var left;
    var top;
    var rightDiff = rightBorder - pos.right - config.width;
    var leftDiff = pos.left - config.width;
    if (config.mode === "right") {
        if (rightDiff >= 0) {
            left = pos.right;
        }
        else if (leftDiff >= 0) {
            left = leftDiff;
        }
    }
    else {
        if (leftDiff >= 0) {
            left = leftDiff;
        }
        else if (rightDiff >= 0) {
            left = pos.right;
        }
    }
    if (leftDiff < 0 && rightDiff < 0) {
        if (config.auto) {
            return placeBottomOrTop(pos, __assign(__assign({}, config), { mode: "bottom", auto: false }));
        }
        left = leftDiff > rightDiff ? leftDiff : pos.right;
    }
    if (config.centering) {
        top = verticalCentering(pos, config.height, rightBorder);
    }
    else {
        var bottomDiff = pos.bottom - config.height;
        var topDiff = bottomBorder - pos.top - config.height;
        if (topDiff >= 0) {
            top = pos.top;
        }
        else if (bottomDiff > 0) {
            top = bottomDiff;
        }
        else {
            top = bottomDiff > topDiff ? bottomDiff : pos.top;
        }
    }
    return { left: left, top: top };
}
function calculatePosition(pos, config) {
    var _a = config.mode === "bottom" || config.mode === "top"
        ? placeBottomOrTop(pos, config)
        : placeRightOrLeft(pos, config), left = _a.left, top = _a.top;
    return {
        left: Math.round(left) + "px",
        top: Math.round(top) + "px",
        minWidth: Math.round(config.width) + "px",
        position: "absolute",
    };
}
exports.calculatePosition = calculatePosition;
function fitPosition(node, config) {
    return calculatePosition(getRealPosition(node), config);
}
exports.fitPosition = fitPosition;
function getPageCss() {
    var css = [];
    for (var sheeti = 0; sheeti < document.styleSheets.length; sheeti++) {
        var sheet = document.styleSheets[sheeti];
        var rules = "cssRules" in sheet ? sheet.cssRules : sheet.rules;
        for (var rulei = 0; rulei < rules.length; rulei++) {
            var rule = rules[rulei];
            if ("cssText" in rule) {
                css.push(rule.cssText);
            }
            else {
                css.push(rule.selectorText + " {\n" + rule.style.cssText + "\n}\n");
            }
        }
    }
    return css.join("\n");
}
exports.getPageCss = getPageCss;
function getLabelStyle(config) {
    var helpMessage = config.helpMessage, type = config.type, labelWidth = config.labelWidth, label = config.label;
    var isZero = labelWidth && labelWidth.toString().startsWith("0");
    var required = type !== "text" && config.required;
    if (!helpMessage && !required && (!label || (label && isZero)) && (!labelWidth || isZero)) {
        return false;
    }
    return {
        style: (label || labelWidth) && !isZero && { width: labelWidth, "max-width": "100%" },
        label: label && isZero ? null : label,
    };
}
exports.getLabelStyle = getLabelStyle;


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var muon_1 = __webpack_require__(26);
function getLetterFromNumber(num) {
    if (!num) {
        return "";
    }
    num = --num;
    var numeric = num % 26;
    var letter = String.fromCharCode(65 + numeric);
    var group = Math.floor(num / 26);
    if (group > 0) {
        return getLetterFromNumber(group) + letter;
    }
    return letter;
}
exports.getLetterFromNumber = getLetterFromNumber;
function getNumberFromLetter(str) {
    if (!str) {
        return -1;
    }
    str = str.toUpperCase();
    var letters = str.split("");
    return letters.reduce(function (total, item, i, arr) {
        var num = item.charCodeAt(0) - 64;
        var pow = Math.pow(26, arr.length - (i + 1));
        total += num * pow;
        return total;
    }, 0);
}
exports.getNumberFromLetter = getNumberFromLetter;
function getCellIds(cell) {
    if (!cell) {
        return {};
    }
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    var match = cell.match(/([a-zA-Z]*\d*):([a-zA-Z]*\d*)/);
    if (match) {
        return {
            start: getCellIds(match[1]),
            end: getCellIds(match[2]),
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    var index = getCellIndex(cell);
    if (!index) {
        return {};
    }
    var _a = muon_1.str2pos(cell), row = _a[0], col = _a[1];
    return {
        col: col,
        row: row,
    };
}
exports.getCellIds = getCellIds;
function getCellIndex(cell) {
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    var match = cell.match(/([a-zA-Z]*)(\d*)/);
    if (!match || !match[1] || !match[2]) {
        return;
    }
    return {
        col: getNumberFromLetter(match[1]),
        row: parseInt(match[2], 10) - 1,
    };
}
exports.getCellIndex = getCellIndex;
function getCellNameByIndex(rowIndex, colIndex) {
    return "" + getLetterFromNumber(colIndex) + (rowIndex + 1);
}
exports.getCellNameByIndex = getCellNameByIndex;
function getCellNameById(grid, row, col) {
    if (!row) {
        return "";
    }
    var rowId = grid.data.getIndex(row) + 1;
    var colId = core_1.findIndex(grid.config.columns, function (item) { return col.toString() === item.id; });
    if (rowId < 0 || colId < 0) {
        return;
    }
    return "" + getLetterFromNumber(colId) + rowId;
}
exports.getCellNameById = getCellNameById;
function getCellInfo(cell, page) {
    var cellId = getCellIds(cell);
    if (cellId.start) {
        cellId = cellId.start;
    }
    if (!cellId || !cell) {
        return {
            locked: false,
        };
    }
    return page.getCell(cellId.row, cellId.col) || {};
}
exports.getCellInfo = getCellInfo;
function isRangeId(id) {
    return new RegExp(/([A-Z]+\d+:[A-Z]+\d+)|(?:,)([A-Z]+\d+)/).test(id);
}
exports.isRangeId = isRangeId;
function getRangeIndexes(range) {
    var cells;
    if (range.includes(":")) {
        cells = range.split(":").map(function (item) { return getCellIndex(item); });
    }
    else {
        cells = range.split(",").map(function (item) { return getCellIndex(item); });
    }
    var res = {
        start: {
            row: Math.min(cells[0].row, cells[1].row),
            col: Math.min(cells[0].col, cells[1].col),
        },
        end: {
            row: Math.max(cells[0].row, cells[1].row),
            col: Math.max(cells[0].col, cells[1].col),
        },
    };
    return res;
}
exports.getRangeIndexes = getRangeIndexes;
function getRangeArray(range, dir) {
    if (dir === void 0) { dir = "row"; }
    var arr = [];
    var opp = dir === "row" ? "col" : "row";
    if (range) {
        var _a = getRangeIndexes(range), start = _a.start, end = _a.end;
        for (var i = start[dir]; i <= end[dir]; i++) {
            for (var k = start[opp]; k <= end[opp]; k++) {
                var cell = dir === "row" ? getCellNameByIndex(i, k) : getCellNameByIndex(k, i);
                arr.push(cell);
            }
        }
    }
    return arr;
}
exports.getRangeArray = getRangeArray;
function getRangeMatrix(range, dir) {
    if (dir === void 0) { dir = "row"; }
    var arr = [];
    var opp = dir === "row" ? "col" : "row";
    if (range) {
        var _a = getRangeIndexes(range), start = _a.start, end = _a.end;
        for (var i = start[dir]; i <= end[dir]; i++) {
            var f = [];
            for (var k = start[opp]; k <= end[opp]; k++) {
                var cell = dir === "row" ? getCellNameByIndex(i, k) : getCellNameByIndex(k, i);
                f.push(cell);
            }
            arr.push(f);
        }
    }
    return arr;
}
exports.getRangeMatrix = getRangeMatrix;
function getNextRangeCell(range, current, dir) {
    if (dir === void 0) { dir = "row"; }
    var rangeArr = getRangeArray(range, dir);
    return rangeArr[rangeArr.indexOf(current) + 1] || rangeArr[0];
}
exports.getNextRangeCell = getNextRangeCell;
function getPrevRangeCell(range, current, dir) {
    if (dir === void 0) { dir = "row"; }
    var rangeArr = getRangeArray(range, dir);
    return rangeArr[rangeArr.indexOf(current) - 1] || rangeArr[rangeArr.length - 1];
}
exports.getPrevRangeCell = getPrevRangeCell;
function getCellsArray(cells) {
    if (!cells) {
        return;
    }
    var arr = cells.split(",");
    return arr.reduce(function (total, cell) {
        cell = cell.toUpperCase();
        if (isRangeId(cell)) {
            total = total.concat(getRangeArray(cell));
        }
        else {
            total.push(cell);
        }
        return total;
    }, []);
}
exports.getCellsArray = getCellsArray;
function extendConfig(target, source, deep) {
    if (target === void 0) { target = {}; }
    if (source === void 0) { source = {}; }
    if (deep === void 0) { deep = true; }
    for (var key in target) {
        var sobj = source[key];
        var tobj = target[key];
        if (tobj && "validate" in tobj) {
            source[key] = tobj.validate(sobj) ? sobj : tobj.default;
            target[key] = tobj.default;
        }
    }
    return core_1.extend(target, source, deep);
}
exports.extendConfig = extendConfig;
function isWasmSupported() {
    try {
        if (typeof WebAssembly === "object" && typeof WebAssembly.instantiate === "function") {
            var module_1 = new WebAssembly.Module(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00));
            if (module_1 instanceof WebAssembly.Module) {
                return new WebAssembly.Instance(module_1) instanceof WebAssembly.Instance;
            }
        }
    }
    catch (e) {
        return false;
    }
    return false;
}
exports.isWasmSupported = isWasmSupported;
function fetchFile(url, method, responseType) {
    return new Promise(function (res, rej) {
        var req = new XMLHttpRequest();
        req.open(method, url, true);
        req.responseType = responseType;
        req.onload = function () {
            var response = req.response;
            if (response) {
                res(response);
            }
            else {
                rej(req);
            }
        };
        req.onerror = function () { return rej(req); };
        req.send(null);
    });
}
exports.fetchFile = fetchFile;
function parseHtmlTable(html) {
    var styleString = html.substring(html.indexOf("<style"), html.indexOf("</style>"));
    var css = {};
    if (styleString.includes(".x")) {
        var classesString = styleString.substring(styleString.indexOf(".x"), styleString.indexOf("-->"));
        var classes = classesString.split("\r\n.");
        classes[0] = classes[0].substr(1);
        for (var _i = 0, classes_1 = classes; _i < classes_1.length; _i++) {
            var item = classes_1[_i];
            if (!item)
                continue;
            var name_1 = item.substring(0, item.indexOf("\r\n\t"));
            css[name_1] = stylesFromString(item.substring(item.indexOf("{") + 1, item.indexOf("}")).trim());
        }
    }
    var tableString = html.substring(html.indexOf("<table"), html.indexOf("</table>") + 8);
    var container = document.createElement("div");
    container.innerHTML = tableString;
    var table = container.querySelector("table");
    var rowsCount = table.rows.length;
    var colsCount = table.rows[0].cells.length;
    var values = [];
    var styles = [];
    for (var i = 0; i < table.rows.length; i++) {
        var row = table.rows[i];
        for (var d = 0; d < row.cells.length; d++) {
            var col = row.cells[d];
            values.push(col.innerText.trim());
            var style = {};
            for (var s = 0; s < col.classList.length; s++) {
                var classItem = col.classList[s];
                if (css[classItem]) {
                    style = __assign(__assign({}, style), css[classItem]);
                }
            }
            style = __assign(__assign({}, style), stylesFromString(col.getAttribute("style")));
            styles.push(style);
        }
    }
    return { values: values, styles: styles, rowsCount: rowsCount, colsCount: colsCount };
}
exports.parseHtmlTable = parseHtmlTable;
function parseFromText(str) {
    var parsed = str.split(/\n/);
    var values = [];
    for (var _i = 0, parsed_1 = parsed; _i < parsed_1.length; _i++) {
        var item = parsed_1[_i];
        var newItems = item.split(/\t/);
        values = values.concat(newItems);
    }
    var rowsCount = parsed.length;
    var colsCount = parsed[0].split("\t").length;
    return { values: values, rowsCount: rowsCount, colsCount: colsCount };
}
exports.parseFromText = parseFromText;
function stylesFromString(str) {
    if (!str)
        return;
    var styles = str.split(";");
    var objStyles = {};
    for (var _i = 0, styles_1 = styles; _i < styles_1.length; _i++) {
        var style = styles_1[_i];
        if (!style)
            continue;
        var keys = style.trim().split(":");
        if (keys[0] === "height" || keys[0] === "width")
            continue;
        objStyles[keys[0]] = keys[1];
    }
    return objStyles;
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var GridEvents;
(function (GridEvents) {
    GridEvents["scroll"] = "scroll";
    GridEvents["expand"] = "expand";
    GridEvents["filterChange"] = "filterChange";
    GridEvents["beforeResizeStart"] = "beforeResizeStart";
    GridEvents["resize"] = "resize";
    GridEvents["afterResizeEnd"] = "afterResizeEnd";
    GridEvents["cellClick"] = "cellClick";
    GridEvents["cellRightClick"] = "cellRightClick";
    GridEvents["cellMouseOver"] = "cellMouseOver";
    GridEvents["cellMouseDown"] = "cellMouseDown";
    GridEvents["cellDblClick"] = "cellDblClick";
    GridEvents["headerCellClick"] = "headerCellClick";
    GridEvents["footerCellClick"] = "footerCellClick";
    GridEvents["headerCellMouseOver"] = "headerCellMouseOver";
    GridEvents["footerCellMouseOver"] = "footerCellMouseOver";
    GridEvents["headerCellMouseDown"] = "headerCellMouseDown";
    GridEvents["footerCellMouseDown"] = "footerCellMouseDown";
    GridEvents["headerCellDblClick"] = "headerCellDblClick";
    GridEvents["footerCellDblClick"] = "footerCellDblClick";
    GridEvents["headerCellRightClick"] = "headerCellRightClick";
    GridEvents["footerCellRightClick"] = "footerCellRightClick";
    GridEvents["beforeEditStart"] = "beforeEditStart";
    GridEvents["afterEditStart"] = "afterEditStart";
    GridEvents["beforeEditEnd"] = "beforeEditEnd";
    GridEvents["afterEditEnd"] = "afterEditEnd";
    GridEvents["beforeKeyDown"] = "beforeKeyDown";
    GridEvents["afterKeyDown"] = "afterKeyDown";
    GridEvents["beforeColumnHide"] = "beforeColumnHide";
    GridEvents["afterColumnHide"] = "afterColumnHide";
    GridEvents["beforeColumnShow"] = "beforeColumnShow";
    GridEvents["afterColumnShow"] = "afterColumnShow";
    GridEvents["beforeRowHide"] = "beforeRowHide";
    GridEvents["afterRowHide"] = "afterRowHide";
    GridEvents["beforeRowShow"] = "beforeRowShow";
    GridEvents["afterRowShow"] = "afterRowShow";
    GridEvents["beforeRowDrag"] = "beforeRowDrag";
    GridEvents["dragRowStart"] = "dragRowStart";
    GridEvents["dragRowOut"] = "dragRowOut";
    GridEvents["dragRowIn"] = "dragRowIn";
    GridEvents["canRowDrop"] = "canRowDrop";
    GridEvents["cancelRowDrop"] = "cancelRowDrop";
    GridEvents["beforeRowDrop"] = "beforeRowDrop";
    GridEvents["afterRowDrop"] = "afterRowDrop";
    GridEvents["afterRowDrag"] = "afterRowDrag";
    GridEvents["beforeColumnDrag"] = "beforeColumnDrag";
    GridEvents["dragColumnStart"] = "dragColumnStart";
    GridEvents["dragColumnOut"] = "dragColumnOut";
    GridEvents["dragColumnIn"] = "dragColumnIn";
    GridEvents["canColumnDrop"] = "canColumnDrop";
    GridEvents["cancelColumnDrop"] = "cancelColumnDrop";
    GridEvents["beforeColumnDrop"] = "beforeColumnDrop";
    GridEvents["afterColumnDrop"] = "afterColumnDrop";
    GridEvents["afterColumnDrag"] = "afterColumnDrag";
    GridEvents["beforeRowResize"] = "beforeRowResize";
    GridEvents["afterRowResize"] = "afterRowResize";
    GridEvents["beforeSort"] = "beforeSort";
    GridEvents["afterSort"] = "afterSort";
})(GridEvents = exports.GridEvents || (exports.GridEvents = {}));
var GridSystemEvents;
(function (GridSystemEvents) {
    GridSystemEvents["cellTouchMove"] = "cellTouchMove";
    GridSystemEvents["cellTouchEnd"] = "cellTouchEnd";
    GridSystemEvents["headerCellTouchMove"] = "headerCellTouchMove";
    GridSystemEvents["headerCellTouchEnd"] = "headerCellTouchEnd";
})(GridSystemEvents = exports.GridSystemEvents || (exports.GridSystemEvents = {}));
var GridSelectionEvents;
(function (GridSelectionEvents) {
    GridSelectionEvents["beforeUnSelect"] = "beforeUnSelect";
    GridSelectionEvents["afterUnSelect"] = "afterUnSelect";
    GridSelectionEvents["beforeSelect"] = "beforeSelect";
    GridSelectionEvents["afterSelect"] = "afterSelect";
})(GridSelectionEvents = exports.GridSelectionEvents || (exports.GridSelectionEvents = {}));


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var EventSystem = /** @class */ (function () {
    function EventSystem(context) {
        this.events = {};
        this.context = context || this;
    }
    EventSystem.prototype.on = function (name, callback, context) {
        var event = name.toLowerCase();
        this.events[event] = this.events[event] || [];
        this.events[event].push({ callback: callback, context: context || this.context });
    };
    EventSystem.prototype.detach = function (name, context) {
        var event = name.toLowerCase();
        var eStack = this.events[event];
        if (context && eStack && eStack.length) {
            for (var i = eStack.length - 1; i >= 0; i--) {
                if (eStack[i].context === context) {
                    eStack.splice(i, 1);
                }
            }
        }
        else {
            this.events[event] = [];
        }
    };
    EventSystem.prototype.fire = function (name, args) {
        if (typeof args === "undefined") {
            args = [];
        }
        var event = name.toLowerCase();
        if (this.events[event]) {
            var res = this.events[event].map(function (e) { return e.callback.apply(e.context, args); });
            return !res.includes(false);
        }
        return true;
    };
    EventSystem.prototype.clear = function () {
        this.events = {};
    };
    return EventSystem;
}());
exports.EventSystem = EventSystem;
function EventsMixin(obj) {
    obj = obj || {};
    var eventSystem = new EventSystem(obj);
    obj.detachEvent = eventSystem.detach.bind(eventSystem);
    obj.attachEvent = eventSystem.on.bind(eventSystem);
    obj.callEvent = eventSystem.fire.bind(eventSystem);
}
exports.EventsMixin = EventsMixin;


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SpreadsheetEvents;
(function (SpreadsheetEvents) {
    SpreadsheetEvents["beforeValueChange"] = "beforeValueChange";
    SpreadsheetEvents["afterValueChange"] = "afterValueChange";
    SpreadsheetEvents["beforeStyleChange"] = "beforeStyleChange";
    SpreadsheetEvents["afterStyleChange"] = "afterStyleChange";
    SpreadsheetEvents["beforeFormatChange"] = "beforeFormatChange";
    SpreadsheetEvents["afterFormatChange"] = "afterFormatChange";
    SpreadsheetEvents["beforeSelectionSet"] = "beforeSelectionSet";
    SpreadsheetEvents["afterSelectionSet"] = "afterSelectionSet";
    SpreadsheetEvents["beforeSelectionRemove"] = "beforeSelectionRemove";
    SpreadsheetEvents["afterSelectionRemove"] = "afterSelectionRemove";
    SpreadsheetEvents["beforeRowAdd"] = "beforeRowAdd";
    SpreadsheetEvents["afterRowAdd"] = "afterRowAdd";
    SpreadsheetEvents["beforeRowDelete"] = "beforeRowDelete";
    SpreadsheetEvents["afterRowDelete"] = "afterRowDelete";
    SpreadsheetEvents["beforeColumnAdd"] = "beforeColumnAdd";
    SpreadsheetEvents["afterColumnAdd"] = "afterColumnAdd";
    SpreadsheetEvents["beforeColumnDelete"] = "beforeColumnDelete";
    SpreadsheetEvents["afterColumnDelete"] = "afterColumnDelete";
    SpreadsheetEvents["beforeFocusSet"] = "beforeFocusSet";
    SpreadsheetEvents["afterFocusSet"] = "afterFocusSet";
    SpreadsheetEvents["beforeEditStart"] = "beforeEditStart";
    SpreadsheetEvents["afterEditStart"] = "afterEditStart";
    SpreadsheetEvents["beforeEditEnd"] = "beforeEditEnd";
    SpreadsheetEvents["afterEditEnd"] = "afterEditEnd";
    SpreadsheetEvents["groupFill"] = "groupFill";
    SpreadsheetEvents["beforeSheetAdd"] = "beforeSheetAdd";
    SpreadsheetEvents["afterSheetAdd"] = "afterSheetAdd";
    SpreadsheetEvents["beforeSheetRemove"] = "beforeSheetRemove";
    SpreadsheetEvents["afterSheetRemove"] = "afterSheetRemove";
    SpreadsheetEvents["beforeSheetRename"] = "beforeSheetRename";
    SpreadsheetEvents["afterSheetRename"] = "afterSheetRename";
    SpreadsheetEvents["beforeSheetChange"] = "beforeSheetChange";
    SpreadsheetEvents["afterSheetChange"] = "afterSheetChange";
    SpreadsheetEvents["beforeSheetClear"] = "beforeSheetClear";
    SpreadsheetEvents["afterSheetClear"] = "afterSheetClear";
    // private
    SpreadsheetEvents["beforeClear"] = "beforeClear";
    SpreadsheetEvents["afterClear"] = "afterClear";
    SpreadsheetEvents["editLineInput"] = "editLineInput";
    SpreadsheetEvents["editLineFocus"] = "editLineFocus";
    SpreadsheetEvents["editLineBlur"] = "editLineBlur";
    SpreadsheetEvents["cellInput"] = "cellInput";
    SpreadsheetEvents["gridRedraw"] = "gridRedraw";
})(SpreadsheetEvents = exports.SpreadsheetEvents || (exports.SpreadsheetEvents = {}));
var Actions;
(function (Actions) {
    Actions["setCellStyle"] = "setCellStyle";
    Actions["setCellValue"] = "setCellValue";
    Actions["setCellFormat"] = "setCellFormat";
    Actions["removeCellStyles"] = "removeCellStyles";
    Actions["lockCell"] = "lockCell";
    Actions["deleteRow"] = "deleteRow";
    Actions["addRow"] = "addRow";
    Actions["deleteColumn"] = "deleteColumn";
    Actions["addColumn"] = "addColumn";
    Actions["groupAction"] = "groupAction";
    Actions["groupRowAction"] = "groupRowAction";
    Actions["groupColAction"] = "groupColAction";
    Actions["addSheet"] = "addSheet";
    Actions["deleteSheet"] = "deleteSheet";
    Actions["renameSheet"] = "renameSheet";
    Actions["clearSheet"] = "clearSheet";
    Actions["clear"] = "clear";
})(Actions = exports.Actions || (exports.Actions = {}));


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var html_1 = __webpack_require__(2);
var View = /** @class */ (function () {
    function View(_container, config) {
        this.config = config || {};
        this._uid = this.config.rootId || core_1.uid();
    }
    View.prototype.mount = function (container, vnode) {
        if (vnode) {
            this._view = vnode;
        }
        if (container && this._view && this._view.mount) {
            // init view inside of HTML container
            this._container = html_1.toNode(container);
            if (this._container.tagName) {
                this._view.mount(this._container);
            }
            else if (this._container.attach) {
                this._container.attach(this);
            }
        }
    };
    View.prototype.unmount = function () {
        var rootView = this.getRootView();
        if (rootView && rootView.node) {
            rootView.unmount();
            this._view = null;
        }
    };
    View.prototype.getRootView = function () {
        return this._view;
    };
    View.prototype.getRootNode = function () {
        return this._view && this._view.node && this._view.node.el;
    };
    View.prototype.paint = function () {
        if (this._view && // was mounted
            (this._view.node || // already rendered node
                this._container)) {
            // not rendered, but has container
            this._doNotRepaint = false;
            this._view.redraw();
        }
    };
    return View;
}());
exports.View = View;
function toViewLike(view) {
    return {
        getRootView: function () { return view; },
        paint: function () { return view.node && view.redraw(); },
        mount: function (container) { return view.mount(container); },
    };
}
exports.toViewLike = toViewLike;


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(15));
__export(__webpack_require__(51));
__export(__webpack_require__(99));
__export(__webpack_require__(100));
__export(__webpack_require__(23));
__export(__webpack_require__(134));
__export(__webpack_require__(16));
__export(__webpack_require__(54));
__export(__webpack_require__(53));
__export(__webpack_require__(135));
__export(__webpack_require__(52));
__export(__webpack_require__(38));


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, setImmediate) {(function () {
  global = this

  var queueId = 1
  var queue = {}
  var isRunningTask = false

  if (!global.setImmediate)
    global.addEventListener('message', function (e) {
      if (e.source == global){
        if (isRunningTask)
          nextTick(queue[e.data])
        else {
          isRunningTask = true
          try {
            queue[e.data]()
          } catch (e) {}

          delete queue[e.data]
          isRunningTask = false
        }
      }
    })

  function nextTick(fn) {
    if (global.setImmediate) setImmediate(fn)
    // if inside of web worker
    else if (global.importScripts) setTimeout(fn)
    else {
      queueId++
      queue[queueId] = fn
      global.postMessage(queueId, '*')
    }
  }

  Deferred.resolve = function (value) {
    if (!(this._d == 1))
      throw TypeError()

    if (value instanceof Deferred)
      return value

    return new Deferred(function (resolve) {
        resolve(value)
    })
  }

  Deferred.reject = function (value) {
    if (!(this._d == 1))
      throw TypeError()

    return new Deferred(function (resolve, reject) {
        reject(value)
    })
  }

  Deferred.all = function (arr) {
    if (!(this._d == 1))
      throw TypeError()

    if (!(arr instanceof Array))
      return Deferred.reject(TypeError())

    var d = new Deferred()

    function done(e, v) {
      if (v)
        return d.resolve(v)

      if (e)
        return d.reject(e)

      var unresolved = arr.reduce(function (cnt, v) {
        if (v && v.then)
          return cnt + 1
        return cnt
      }, 0)

      if(unresolved == 0)
        d.resolve(arr)

      arr.map(function (v, i) {
        if (v && v.then)
          v.then(function (r) {
            arr[i] = r
            done()
            return r
          }, done)
      })
    }

    done()

    return d
  }

  Deferred.race = function (arr) {
    if (!(this._d == 1))
      throw TypeError()

    if (!(arr instanceof Array))
      return Deferred.reject(TypeError())

    if (arr.length == 0)
      return new Deferred()

    var d = new Deferred()

    function done(e, v) {
      if (v)
        return d.resolve(v)

      if (e)
        return d.reject(e)

      var unresolved = arr.reduce(function (cnt, v) {
        if (v && v.then)
          return cnt + 1
        return cnt
      }, 0)

      if(unresolved == 0)
        d.resolve(arr)

      arr.map(function (v, i) {
        if (v && v.then)
          v.then(function (r) {
            done(null, r)
          }, done)
      })
    }

    done()

    return d
  }

  Deferred._d = 1


  /**
   * @constructor
   */
  function Deferred(resolver) {
    'use strict'
    if (typeof resolver != 'function' && resolver != undefined)
      throw TypeError()

    if (typeof this != 'object' || (this && this.then))
      throw TypeError()

    // states
    // 0: pending
    // 1: resolving
    // 2: rejecting
    // 3: resolved
    // 4: rejected
    var self = this,
      state = 0,
      val = 0,
      next = [],
      fn, er;

    self['promise'] = self

    self['resolve'] = function (v) {
      fn = self.fn
      er = self.er
      if (!state) {
        val = v
        state = 1

        nextTick(fire)
      }
      return self
    }

    self['reject'] = function (v) {
      fn = self.fn
      er = self.er
      if (!state) {
        val = v
        state = 2

        nextTick(fire)

      }
      return self
    }

    self['_d'] = 1

    self['then'] = function (_fn, _er) {
      if (!(this._d == 1))
        throw TypeError()

      var d = new Deferred()

      d.fn = _fn
      d.er = _er
      if (state == 3) {
        d.resolve(val)
      }
      else if (state == 4) {
        d.reject(val)
      }
      else {
        next.push(d)
      }

      return d
    }

    self['catch'] = function (_er) {
      return self['then'](null, _er)
    }

    var finish = function (type) {
      state = type || 4
      next.map(function (p) {
        state == 3 && p.resolve(val) || p.reject(val)
      })
    }

    try {
      if (typeof resolver == 'function')
        resolver(self['resolve'], self['reject'])
    } catch (e) {
      self['reject'](e)
    }

    return self

    // ref : reference to 'then' function
    // cb, ec, cn : successCallback, failureCallback, notThennableCallback
    function thennable (ref, cb, ec, cn) {
      // Promises can be rejected with other promises, which should pass through
      if (state == 2) {
        return cn()
      }
      if ((typeof val == 'object' || typeof val == 'function') && typeof ref == 'function') {
        try {

          // cnt protects against abuse calls from spec checker
          var cnt = 0
          ref.call(val, function (v) {
            if (cnt++) return
            val = v
            cb()
          }, function (v) {
            if (cnt++) return
            val = v
            ec()
          })
        } catch (e) {
          val = e
          ec()
        }
      } else {
        cn()
      }
    };

    function fire() {

      // check if it's a thenable
      var ref;
      try {
        ref = val && val.then
      } catch (e) {
        val = e
        state = 2
        return fire()
      }

      thennable(ref, function () {
        state = 1
        fire()
      }, function () {
        state = 2
        fire()
      }, function () {
        try {
          if (state == 1 && typeof fn == 'function') {
            val = fn(val)
          }

          else if (state == 2 && typeof er == 'function') {
            val = er(val)
            state = 1
          }
        } catch (e) {
          val = e
          return finish()
        }

        if (val == self) {
          val = TypeError()
          finish()
        } else thennable(ref, function () {
            finish(3)
          }, finish, function () {
            finish(state == 1 && 3)
          })

      })
    }


  }

  // Export our library object, either for node.js or as a globally scoped variable
  if (true) {
    module['exports'] = Deferred
  } else {}
})()

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(35), __webpack_require__(85).setImmediate))

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(2);
var FocusManager = /** @class */ (function () {
    function FocusManager() {
        var _this = this;
        this._initHandler = function (e) { return (_this._activeWidgetId = html_1.locate(e, "dhx_widget_id")); };
        document.addEventListener("focusin", this._initHandler);
        document.addEventListener("click", this._initHandler);
    }
    FocusManager.prototype.getFocusId = function () {
        return this._activeWidgetId;
    };
    FocusManager.prototype.setFocusId = function (id) {
        this._activeWidgetId = id;
    };
    return FocusManager;
}());
exports.focusManager = new FocusManager();


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
function transpose(arr, transform) {
    var columns = [];
    for (var i = 0; i < arr.length; i++) {
        var row = arr[i];
        for (var cellInd = 0; cellInd < row.length; cellInd++) {
            columns[cellInd] = columns[cellInd] || [];
            var cell = transform ? transform(row[cellInd]) : row[cellInd];
            columns[cellInd].push(cell);
        }
    }
    return columns;
}
exports.transpose = transpose;
function insert(node, newone) {
    if (typeof newone === "string") {
        node.insertAdjacentHTML("beforeend", newone);
        return node.lastChild;
    }
    else {
        node.appendChild(newone);
        return newone;
    }
}
function getStyleByClass(cssClass, container, targetClass, def) {
    var cont = container.querySelector("." + targetClass);
    var testDiv = insert(cont, "<div class=\"" + cssClass + "\"></div>");
    var styles = window.getComputedStyle(testDiv);
    var result = {
        color: styles.color === "rgb(0, 0, 0)" ? def.color : core_1.rgbToHex(styles.color),
        background: styles.backgroundColor === "rgba(0, 0, 0, 0)" ? def.background : core_1.rgbToHex(styles.backgroundColor),
        fontSize: parseFloat(styles.fontSize),
    };
    cont.removeChild(testDiv);
    // [dirty]
    if (result.color === def.color &&
        result.background === def.background &&
        result.fontSize === def.fontSize) {
        return null;
    }
    return result;
}
exports.getStyleByClass = getStyleByClass;
function removeHTMLTags(str) {
    if (typeof str !== "string" && typeof str !== "number" && typeof str !== "boolean") {
        return "";
    }
    return ("" + (str === undefined || str === null ? "" : str))
        .replace(/<[^>]*>/g, "")
        .replace(/["]/g, "&quot;")
        .trim();
}
exports.removeHTMLTags = removeHTMLTags;
function isCssSupport(property, value) {
    try {
        return CSS.supports(property, value);
    }
    catch (err) {
        var el = document.createElement("div");
        el.style[property] = value;
        return el.style[property] === value;
    }
}
exports.isCssSupport = isCssSupport;
function isRowEmpty(row) {
    if (!row) {
        return;
    }
    return Object.keys(row).reduce(function (acc, col) {
        if (col === "id" || col.startsWith("$")) {
            return acc;
        }
        if (acc && row[col] !== undefined && row[col] !== "") {
            return;
        }
        return acc;
    }, true);
}
exports.isRowEmpty = isRowEmpty;
function isSortable(config, col) {
    return (col.sortable !== false && config.sortable) || col.sortable;
}
exports.isSortable = isSortable;
function isAutoWidth(config, col) {
    if (col) {
        return (col.autoWidth !== false && config.autoWidth) || col.autoWidth;
    }
    var check = false;
    config.columns.map(function (col) {
        if ((col.autoWidth !== false && config.autoWidth) || col.autoWidth) {
            check = true;
            return;
        }
    });
    return check;
}
exports.isAutoWidth = isAutoWidth;
function isTooltip(config, element) {
    return (element.tooltip !== false && config.tooltip) || element.tooltip;
}
exports.isTooltip = isTooltip;
function isHtmlEnable(config, col) {
    return (col.htmlEnable !== false && config.htmlEnable) || col.htmlEnable;
}
exports.isHtmlEnable = isHtmlEnable;
function getTotalWidth(columns) {
    return columns.reduce(function (total, col) { return total + (col.$width || 0); }, 0);
}
exports.getTotalWidth = getTotalWidth;
function getTotalHeight(rows) {
    return rows.reduce(function (total, row) { return total + (row.$height || 0); }, 0);
}
exports.getTotalHeight = getTotalHeight;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var core_2 = __webpack_require__(1);
exports.locale = {
    monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    months: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
    ],
    daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Monday"],
    cancel: "Cancel",
};
/*
    %d	day as a number with leading zero, 01..31
    %j	day as a number, 1..31
    %D	short name of the day, Su Mo Tu...
    %l	full name of the day, Sunday Monday Tuesday...
    %m	month as a number with leading zero, 01..12
    %n	month as a number, 1..12
    %M	short name of the month, Jan Feb Mar...
    %F	full name of the month, January February March...
    %y	year as a number, 2 digits
    %Y	year as a number, 4 digits
    %h	hours 12-format with leading zero, 01..12)
    %g	hours 12-format, 1..12)
    %H	hours 24-format with leading zero, 01..24
    %G	hours 24-format, 1..24
    %i	minutes with leading zero, 01..59
    %s	seconds with leading zero, 01..59
    %a	am or pm
    %A	AM or PM
    %u	milliseconds
*/
var formatters = {
    "%d": function (date) {
        var day = date.getDate();
        return day < 10 ? "0" + day : day;
    },
    "%j": function (date) { return date.getDate(); },
    "%l": function (date) {
        return exports.locale.days[date.getDay()];
    },
    "%D": function (date) {
        return exports.locale.daysShort[date.getDay()];
    },
    "%m": function (date) {
        var month = date.getMonth() + 1;
        return month < 10 ? "0" + month : month;
    },
    "%n": function (date) { return date.getMonth() + 1; },
    "%M": function (date) { return exports.locale.monthsShort[date.getMonth()]; },
    "%F": function (date) { return exports.locale.months[date.getMonth()]; },
    "%y": function (date) {
        return date
            .getFullYear()
            .toString()
            .slice(2);
    },
    "%Y": function (date) { return date.getFullYear(); },
    "%h": function (date) {
        var hours = date.getHours() % 12;
        if (hours === 0) {
            hours = 12;
        }
        return hours < 10 ? "0" + hours : hours;
    },
    "%g": function (date) {
        var hours = date.getHours() % 12;
        if (hours === 0) {
            hours = 12;
        }
        return hours;
    },
    "%H": function (date) {
        var hours = date.getHours();
        return hours < 10 ? "0" + hours : hours;
    },
    "%G": function (date) { return date.getHours(); },
    "%i": function (date) {
        var minutes = date.getMinutes();
        return minutes < 10 ? "0" + minutes : minutes;
    },
    "%s": function (date) {
        var seconds = date.getSeconds();
        return seconds < 10 ? "0" + seconds : seconds;
    },
    "%a": function (date) {
        return date.getHours() >= 12 ? "pm" : "am";
    },
    "%A": function (date) {
        return date.getHours() >= 12 ? "PM" : "AM";
    },
    "%u": function (date) { return date.getMilliseconds(); },
};
var setFormatters = {
    "%d": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setDate(Number(value)) : date.setDate(Number(1));
    },
    "%j": function (date, value) {
        var check = /(^([0-9]?[0-9])$)/i.test(value);
        check ? date.setDate(Number(value)) : date.setDate(Number(1));
    },
    "%m": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setMonth(Number(value) - 1) : date.setMonth(Number(0));
        if (check && date.getMonth() !== Number(value) - 1)
            date.setMonth(Number(value) - 1);
    },
    "%n": function (date, value) {
        var check = /(^([0-9]?[0-9])$)/i.test(value);
        check ? date.setMonth(Number(value) - 1) : date.setMonth(Number(0));
        if (check && date.getMonth() !== Number(value) - 1)
            date.setMonth(Number(value) - 1);
    },
    "%M": function (date, value) {
        var index = core_2.findIndex(exports.locale.monthsShort, function (v) { return v === value; });
        index === -1 ? date.setMonth(0) : date.setMonth(index);
        if (index !== -1 && date.getMonth() !== index)
            date.setMonth(index);
    },
    "%F": function (date, value) {
        var index = core_2.findIndex(exports.locale.months, function (v) { return v === value; });
        index === -1 ? date.setMonth(0) : date.setMonth(index);
        if (index !== -1 && date.getMonth() !== index)
            date.setMonth(index);
    },
    "%y": function (date, value) {
        var check = /(^([0-9][0-9])$)/i.test(value);
        check ? date.setFullYear(Number("20" + value)) : date.setFullYear(Number("2000"));
    },
    "%Y": function (date, value) {
        var check = /(^([0-9][0-9][0-9][0-9])$)/i.test(value);
        check ? date.setFullYear(Number(value)) : date.setFullYear(Number("2000"));
    },
    "%h": function (date, value, dateFormat) {
        var check = /(^0[1-9]|1[0-2]$)/i.test(value);
        (check && dateFormat === "pm") || dateFormat === "PM"
            ? date.setHours(Number(value))
            : date.setHours(Number(0));
    },
    "%g": function (date, value, dateFormat) {
        var check = /(^[1-9]$)|(^0[1-9]|1[0-2]$)/i.test(value);
        (check && dateFormat === "pm") || dateFormat === "PM"
            ? date.setHours(Number(value))
            : date.setHours(Number(0));
    },
    "%H": function (date, value) {
        var check = /(^[0-2][0-9]$)/i.test(value);
        check ? date.setHours(Number(value)) : date.setHours(Number(0));
    },
    "%G": function (date, value) {
        var check = /(^[1-9][0-9]?$)/i.test(value);
        check ? date.setHours(Number(value)) : date.setHours(Number(0));
    },
    "%i": function (date, value) {
        var check = /(^([0-5][0-9])$)/i.test(value);
        check ? date.setMinutes(Number(value)) : date.setMinutes(Number(0));
    },
    "%s": function (date, value) {
        var check = /(^([0-5][0-9])$)/i.test(value);
        check ? date.setSeconds(Number(value)) : date.setSeconds(Number(0));
    },
    "%a": function (date, value) {
        if (value === "pm") {
            date.setHours(date.getHours() + 12);
        }
    },
    "%A": function (date, value) {
        if (value === "PM") {
            date.setHours(date.getHours() + 12);
        }
    },
};
var TokenType;
(function (TokenType) {
    TokenType[TokenType["separator"] = 0] = "separator";
    TokenType[TokenType["datePart"] = 1] = "datePart";
})(TokenType || (TokenType = {}));
function tokenizeFormat(format) {
    var tokens = [];
    var currentSeparator = "";
    for (var i = 0; i < format.length; i++) {
        if (format[i] === "%") {
            if (currentSeparator.length > 0) {
                tokens.push({
                    type: TokenType.separator,
                    value: currentSeparator,
                });
                currentSeparator = "";
            }
            tokens.push({
                type: TokenType.datePart,
                value: format[i] + format[i + 1],
            });
            i++;
        }
        else {
            currentSeparator += format[i];
        }
    }
    if (currentSeparator.length > 0) {
        tokens.push({
            type: TokenType.separator,
            value: currentSeparator,
        });
    }
    return tokens;
}
function getFormattedDate(format, date) {
    return tokenizeFormat(format).reduce(function (res, token) {
        if (token.type === TokenType.separator) {
            return res + token.value;
        }
        else {
            if (!formatters[token.value]) {
                return res;
            }
            return res + formatters[token.value](date);
        }
    }, "");
}
exports.getFormattedDate = getFormattedDate;
function stringToDate(str, format, validate) {
    if (typeof str !== "string") {
        return;
    }
    var tokens = tokenizeFormat(format);
    var dateParts = [];
    var index = 0;
    var formatter = null;
    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
        var token = tokens_1[_i];
        if (token.type === TokenType.separator) {
            var sepratorIndex = str.indexOf(token.value, index);
            if (sepratorIndex === -1) {
                if (validate) {
                    return false;
                }
                throw new Error("Incorrect date, see docs: https://docs.dhtmlx.com/suite/calendar__api__calendar_dateformat_config.html");
            }
            if (formatter) {
                dateParts.push({
                    formatter: formatter,
                    value: str.slice(index, sepratorIndex),
                });
                formatter = null;
            }
            index = sepratorIndex + token.value.length;
        }
        else if (token.type === TokenType.datePart) {
            formatter = token.value;
        }
    }
    if (formatter === "%A" || formatter === "%a") {
        dateParts.unshift({
            formatter: formatter,
            value: str.slice(index),
        });
    }
    else if (formatter) {
        dateParts.push({
            formatter: formatter,
            value: str.slice(index),
        });
    }
    dateParts.reverse();
    var dateFormat;
    for (var _a = 0, dateParts_1 = dateParts; _a < dateParts_1.length; _a++) {
        var datePart = dateParts_1[_a];
        if (datePart.formatter === "%A" || datePart.formatter === "%a") {
            dateFormat = datePart.value;
        }
    }
    var date = new Date(0);
    for (var _b = 0, dateParts_2 = dateParts; _b < dateParts_2.length; _b++) {
        var datePart = dateParts_2[_b];
        if (setFormatters[datePart.formatter]) {
            setFormatters[datePart.formatter](date, datePart.value, dateFormat);
        }
    }
    return validate ? true : date;
}
exports.stringToDate = stringToDate;
var DateHelper = /** @class */ (function () {
    function DateHelper() {
    }
    DateHelper.copy = function (d) {
        return new Date(d);
    };
    DateHelper.fromYear = function (year) {
        return new Date(year, 0, 1);
    };
    DateHelper.fromYearAndMonth = function (year, month) {
        return new Date(year, month, 1);
    };
    DateHelper.weekStart = function (d, firstWeekday) {
        var diff = (d.getDay() + 7 - firstWeekday) % 7;
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() - diff);
    };
    DateHelper.monthStart = function (d) {
        return new Date(d.getFullYear(), d.getMonth(), 1);
    };
    DateHelper.yearStart = function (d) {
        return new Date(d.getFullYear(), 0, 1);
    };
    DateHelper.dayStart = function (d) {
        return new Date(d.getFullYear(), d.getMonth(), d.getDate());
    };
    DateHelper.addDay = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear(), d.getMonth(), d.getDate() + count);
    };
    DateHelper.addMonth = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear(), d.getMonth() + count);
    };
    DateHelper.addYear = function (d, count) {
        if (count === void 0) { count = 1; }
        return new Date(d.getFullYear() + count, d.getMonth());
    };
    DateHelper.withHoursAndMinutes = function (d, hours, minutes, dateFormat) {
        if (dateFormat === undefined || (!dateFormat && hours === 12) || (dateFormat && hours !== 12)) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hours, minutes);
        }
        else if (dateFormat && hours === 12) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), 0, minutes);
        }
        else {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate(), hours + 12, minutes);
        }
    };
    DateHelper.setMonth = function (d, month) {
        d.setMonth(month);
    };
    DateHelper.setYear = function (d, year) {
        d.setFullYear(year);
    };
    DateHelper.mergeHoursAndMinutes = function (source, target) {
        return new Date(source.getFullYear(), source.getMonth(), source.getDate(), target.getHours(), target.getMinutes());
    };
    DateHelper.isWeekEnd = function (d) {
        return d.getDay() === 0 || d.getDay() === 6;
    };
    DateHelper.getTwelweYears = function (d) {
        var y = d.getFullYear();
        var firstYear = y - (y % 12);
        return core_1.range(firstYear, firstYear + 11);
    };
    DateHelper.getWeekNumber = function (d) {
        if (d.getDay() !== 6) {
            d = DateHelper.addDay(d, 6 - d.getDay());
        }
        var dayMS = 24 * 60 * 60 * 1000;
        var ordinal = (d.valueOf() - DateHelper.yearStart(d).valueOf()) / dayMS;
        return Math.floor((ordinal - d.getDay() + 10) / 7);
    };
    DateHelper.isSameDay = function (d1, d2) {
        return (d1.getFullYear() === d2.getFullYear() &&
            d1.getMonth() === d2.getMonth() &&
            d1.getDate() === d2.getDate());
    };
    DateHelper.toDateObject = function (date, dateFormat) {
        if (typeof date === "string") {
            return stringToDate(date, dateFormat);
        }
        else {
            return new Date(date);
        }
    };
    DateHelper.nullTimestampDate = new Date(0);
    return DateHelper;
}());
exports.DateHelper = DateHelper;


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var date_1 = __webpack_require__(12);
var en_1 = __webpack_require__(14);
var date_2 = __webpack_require__(27);
var config = {};
var defaultFormats = [];
var separators = { decimal: ".", thousands: "," };
var currency = "$";
var currencyRegex = "(\\[\\$[\\w\\W]*?\\]|[\\$]{0,1})";
var pureCurrency = "\\[\\$([\\w\\W]*?)\\]|(\\$)"; // custom currency - [$EUR]#,##0.00
var sep = "([,. ]{0,1})";
var percent = "([%]{0,1})";
var allDigits = "([#0]*)";
var pureCurrencyRegex = new RegExp(pureCurrency);
var formatRegex = new RegExp("" + currencyRegex + allDigits + sep + allDigits + sep + allDigits + percent + currencyRegex);
var formats = {};
function getCurrencySymbol() {
    return "$";
}
function getSeparators() {
    return separators;
}
function _partsToObj(parts) {
    return {
        currencyBefore: parts[1],
        digits: parts[2],
        thousandsSeparator: parts[3],
        optionalDigits: parts[4],
        decimalSeparator: parts[5],
        decimalDigits: parts[6],
        percent: parts[7],
        currencyAfter: parts[8],
        decimalLength: 0,
    };
}
function getDefaultFormats() {
    return defaultFormats;
}
exports.getDefaultFormats = getDefaultFormats;
function getFormat(id) {
    return defaultFormats[core_1.findIndex(defaultFormats, function (f) { return f.id === id; })];
}
exports.getFormat = getFormat;
function isNumeric(val) {
    return !isNaN(val - parseFloat(val));
}
exports.isNumeric = isNumeric;
function getFormatRule(format) {
    if (!format || typeof format !== "string") {
        return;
    }
    if (formats[format]) {
        return formats[format];
    }
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    var parts = format.match(formatRegex);
    var rule = _partsToObj(parts);
    if (!rule.decimalSeparator && rule.thousandsSeparator) {
        rule.decimalSeparator = rule.thousandsSeparator;
        rule.decimalDigits = rule.optionalDigits;
        rule.thousandsSeparator = "";
        rule.optionalDigits = "";
    }
    if (rule.currencyBefore) {
        var m = rule.currencyBefore.match(pureCurrencyRegex);
        rule.currencyBefore = m[1] || m[2];
    }
    if (rule.currencyAfter) {
        var m = rule.currencyAfter.match(pureCurrencyRegex);
        rule.currencyAfter = m[1] || m[2];
    }
    if (rule.percent) {
        rule.currencyBefore = "";
        rule.currencyAfter = "";
    }
    rule.decimalLength = rule.decimalDigits ? rule.decimalDigits.split("0").length - 1 : rule.decimalLength;
    if (format === "common") {
        rule.decimalSeparator = ".";
        rule.decimalLength = "";
        rule.thousandsSeparator = ",";
    }
    formats[format] = rule;
    return rule;
}
function setDefaultFormats() {
    defaultFormats.forEach(function (format) {
        getFormatRule(format.mask);
    });
}
function numberWithSeparators(val, thousand, decimal, optionalDigits) {
    if (thousand === void 0) { thousand = ""; }
    if (optionalDigits === void 0) { optionalDigits = 3; }
    var parts = val.toString().split(".");
    var digits = [];
    var index = 1;
    for (var i = parts[0].length - 1; i > -1; i--) {
        digits.push(parts[0][i]);
        if (index === optionalDigits && i) {
            digits.push(thousand);
            index = 1;
            continue;
        }
        index++;
    }
    parts[0] = digits.reverse().join("");
    return parts.join(decimal);
}
function formatByRule(val, rule) {
    if (!rule) {
        return val;
    }
    if (!isNumeric(val)) {
        return val;
    }
    var formattedVal = "";
    if (rule.currencyBefore) {
        formattedVal += rule.currencyBefore;
    }
    var num = parseFloat(val);
    var isNegative = num < 0;
    if (isNegative) {
        num = Math.abs(num);
    }
    var numAsString = num.toString();
    if (rule.percent) {
        num *= 100;
    }
    if (rule.digits) {
        numAsString = num.toFixed(rule.decimalLength || 2);
    }
    var digits = (rule === null || rule === void 0 ? void 0 : rule.digits) + (rule === null || rule === void 0 ? void 0 : rule.optionalDigits);
    var parts = numAsString.split(".");
    if (digits && digits.length > parts[0].length) {
        var val_1 = parts[0].split("");
        var newStr = parts[0];
        var index = 0;
        for (var i = digits.length - 1; i > -1; i--) {
            var ruleChar = digits[i];
            var char = val_1[index];
            if (ruleChar === "0" && !char) {
                newStr = "0" + newStr;
            }
            index++;
        }
        numAsString = newStr + (parts.length > 1 ? "." + parts[1] : "");
    }
    formattedVal += rule.digits
        ? numberWithSeparators(numAsString, rule.thousandsSeparator, rule.decimalSeparator, rule.optionalDigits.length)
        : numAsString;
    formattedVal += rule.percent;
    if (rule.currencyAfter) {
        formattedVal += rule.currencyAfter;
    }
    if (isNegative) {
        formattedVal = "-" + formattedVal;
    }
    return formattedVal;
}
function initFormat(spreadsheet, dateFormat) {
    config = spreadsheet.config;
    defaultFormats = [
        { name: en_1.default.common, id: "common", mask: "", example: "1500.31" },
        { name: en_1.default.number, id: "number", mask: "#,##0.00", example: "1500.31" },
        {
            name: en_1.default.percent,
            id: "percent",
            mask: "#,##0.00%",
            example: "15.0031",
        },
        {
            name: en_1.default.currency,
            id: "currency",
            mask: "$#,##0.00",
            example: "1500.31",
        },
        {
            name: en_1.default.date,
            id: "date",
            mask: "mm-dd-yy",
            example: "44490",
            dateFormat: dateFormat,
        },
        {
            name: en_1.default.text,
            id: "text",
            mask: "@",
            example: "some text",
        },
    ];
    config.formats.forEach(function (f) {
        var ind = core_1.findIndex(defaultFormats, function (df) { return df.id === f.id; });
        if (ind >= 0) {
            defaultFormats[ind] = f;
        }
        else {
            defaultFormats.push(f);
        }
    });
    var numberFormatRule = getFormatRule(getFormat("number").mask);
    separators = {
        decimal: numberFormatRule.decimalSeparator,
        thousands: numberFormatRule.thousandsSeparator,
    };
    var currencyFormatRule = getFormatRule(getFormat("currency").mask);
    currency = currencyFormatRule.currency || currency;
    config.formats = defaultFormats;
    setDefaultFormats();
}
exports.initFormat = initFormat;
function getDefaultFormatsMap() {
    return defaultFormats.reduce(function (acc, f) {
        acc[f.mask] = f.id;
        return acc;
    }, {});
}
exports.getDefaultFormatsMap = getDefaultFormatsMap;
function getPureNumber(val) {
    var isPercent = typeof val === "string" && val.includes("%");
    var num = parseFloat(("" + val).replace(/[^.\d]/g, ""));
    return isPercent ? num / 100 : num;
}
exports.getPureNumber = getPureNumber;
function getCleanValue(val) {
    var separatorsObj = getSeparators();
    var cur = getCurrencySymbol();
    var customFormats = getDefaultFormats().filter(function (i) { return i.mask.startsWith("[$"); }) || [];
    var symbols = customFormats.map(function (i) { return i.mask.substring(2, i.mask.indexOf("]")); });
    if (symbols.length) {
        for (var i = 0; i < symbols.length; i++) {
            var symbol = symbols[i];
            if (val.toString().startsWith(symbol)) {
                return getCleanValue(("" + val).substr(symbol.length));
            }
        }
    }
    return ("" + val)
        .replace(new RegExp("[" + separatorsObj.thousands + cur + "%s]", "g"), "")
        .replace(new RegExp("[" + separatorsObj.decimal + "]", "g"), ".");
}
exports.getCleanValue = getCleanValue;
function getUnformattedValue(val, format) {
    if (format === "common") {
        return val;
    }
    var clean = getCleanValue(val);
    if (format === "percent") {
        return (parseFloat(clean) / 100).toFixed(4);
    }
    return clean;
}
exports.getUnformattedValue = getUnformattedValue;
function detectCellFormat(val) {
    var currencySymbol = getCurrencySymbol();
    var isNumber = isNumeric(getCleanValue(val));
    if (!isNumber) {
        return "";
    }
    var stringVal = "" + val;
    var percentInd = stringVal.indexOf("%");
    var currInd = stringVal.indexOf(currencySymbol);
    var isPercent = percentInd === 0 || percentInd === stringVal.length - 1;
    var isCurrency = currInd === 0;
    if (isPercent) {
        return getFormat("percent").mask;
    }
    if (isCurrency) {
        return getFormat("currency").mask;
    }
    var customFormats = getDefaultFormats().filter(function (i) { return i.mask.startsWith("[$"); }) || [];
    var symbols = customFormats.map(function (i) { return i.mask.substring(2, i.mask.indexOf("]")); });
    if (symbols.length) {
        for (var i = 0; i < symbols.length; i++) {
            var symbol = symbols[i];
            if (val.toString().startsWith(symbol)) {
                return customFormats[i].mask;
            }
        }
    }
    return getFormat("number").mask;
}
exports.detectCellFormat = detectCellFormat;
function getFormattedValue(val, format) {
    if (typeof val === "boolean") {
        return ("" + val).toUpperCase();
    }
    if (!format || format.mask === "@") {
        return val;
    }
    if (format.id === "date") {
        if (!isNumeric(val)) {
            return val;
        }
        return date_1.getFormattedDate(format.dateFormat, date_2.excelDateToJSDate(+val));
    }
    var rule = getFormatRule(format.mask);
    return formatByRule(val, rule);
}
exports.getFormattedValue = getFormattedValue;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en = {
    undo: "Undo",
    redo: "Redo",
    textColor: "Text color",
    backgroundColor: "Background color",
    bold: "Bold",
    italic: "Italic",
    lockCell: "Lock cell",
    unlockCell: "Unlock cell",
    deleteSheet: "Delete",
    renameSheet: "Rename",
    format: "Format",
    edit: "Edit",
    clear: "Clear",
    clearValue: "Clear value",
    clearStyles: "Clear styles",
    clearAll: "Clear all",
    insert: "Insert",
    columns: "Columns",
    rows: "Rows",
    addColumn: "Add column",
    removeColumn: "Remove column",
    addRow: "Add row",
    removeRow: "Remove row",
    underline: "Underline",
    halign: "Horizontal align",
    valign: "Vertical align",
    left: "Left",
    right: "Right",
    center: "Center",
    top: "Top",
    bottom: "Bottom",
    help: "Help",
    common: "Common",
    number: "Number",
    currency: "Currency",
    percent: "Percent",
    text: "Text",
    date: "Date",
    downloadAs: "Download as...",
    importAs: "Import as...",
    import: "Import",
    export: "Export",
    file: "File",
    numberFormat: "Number format",
};
exports.default = en;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TreeFilterType;
(function (TreeFilterType) {
    TreeFilterType["all"] = "all";
    TreeFilterType["level"] = "level";
    TreeFilterType["leafs"] = "leafs";
})(TreeFilterType = exports.TreeFilterType || (exports.TreeFilterType = {}));
var DataEvents;
(function (DataEvents) {
    DataEvents["afterAdd"] = "afteradd";
    DataEvents["beforeAdd"] = "beforeadd";
    DataEvents["removeAll"] = "removeall";
    DataEvents["beforeRemove"] = "beforeremove";
    DataEvents["afterRemove"] = "afterremove";
    DataEvents["change"] = "change";
    DataEvents["load"] = "load";
    DataEvents["loadError"] = "loaderror";
    DataEvents["beforeLazyLoad"] = "beforelazyload";
    DataEvents["afterLazyLoad"] = "afterlazyload";
})(DataEvents = exports.DataEvents || (exports.DataEvents = {}));
var DragEvents;
(function (DragEvents) {
    DragEvents["beforeDrag"] = "beforeDrag";
    DragEvents["dragStart"] = "dragStart";
    DragEvents["dragOut"] = "dragOut";
    DragEvents["dragIn"] = "dragIn";
    DragEvents["canDrop"] = "canDrop";
    DragEvents["cancelDrop"] = "cancelDrop";
    DragEvents["beforeDrop"] = "beforeDrop";
    DragEvents["afterDrop"] = "afterDrop";
    DragEvents["afterDrag"] = "afterDrag";
})(DragEvents = exports.DragEvents || (exports.DragEvents = {}));
var DataDriver;
(function (DataDriver) {
    DataDriver["json"] = "json";
    DataDriver["csv"] = "csv";
    DataDriver["xml"] = "xml";
})(DataDriver = exports.DataDriver || (exports.DataDriver = {}));


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dataproxy_1 = __webpack_require__(23);
var drivers_1 = __webpack_require__(52);
function isEqualObj(a, b) {
    for (var key in a) {
        if (a[key] !== b[key] || Array.isArray(a[key])) {
            return false;
        }
    }
    return true;
}
exports.isEqualObj = isEqualObj;
function naturalCompare(a, b) {
    if (isNaN(a) || isNaN(b)) {
        var ax_1 = [];
        var bx_1 = [];
        a.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
            ax_1.push([$1 || Infinity, $2 || ""]);
        });
        b.replace(/(\d+)|(\D+)/g, function (_, $1, $2) {
            bx_1.push([$1 || Infinity, $2 || ""]);
        });
        while (ax_1.length && bx_1.length) {
            var an = ax_1.shift();
            var bn = bx_1.shift();
            var nn = an[0] - bn[0] || an[1].localeCompare(bn[1]);
            if (nn) {
                return nn;
            }
        }
        return ax_1.length - bx_1.length;
    }
    return a - b;
}
exports.naturalCompare = naturalCompare;
function findByConf(item, conf) {
    if (typeof conf === "function") {
        if (conf.call(this, item)) {
            return item;
        }
    }
    else if (conf.by && conf.match) {
        if (item[conf.by] === conf.match) {
            return item;
        }
    }
}
exports.findByConf = findByConf;
function isDebug() {
    var dhx = window.dhx;
    if (typeof dhx !== "undefined") {
        return typeof dhx.debug !== "undefined" && dhx.debug;
    }
    // return typeof DHX_DEBUG_MODE !== "undefined" && DHX_DEBUG_MODE;
}
exports.isDebug = isDebug;
function dhxWarning(msg) {
    // tslint:disable-next-line:no-console
    console.warn(msg);
}
exports.dhxWarning = dhxWarning;
function dhxError(msg) {
    throw new Error(msg);
}
exports.dhxError = dhxError;
function toProxy(proxy) {
    var type = typeof proxy;
    if (type === "string") {
        return new dataproxy_1.DataProxy(proxy);
    }
    else if (type === "object") {
        return proxy;
    }
}
exports.toProxy = toProxy;
function toDataDriver(driver) {
    if (typeof driver === "string") {
        var dhx = window.dhx;
        var drivers = (dhx && dhx.dataDrivers) || drivers_1.dataDrivers;
        if (drivers[driver]) {
            return new drivers[driver]();
        }
        else {
            // tslint:disable-next-line:no-console
            console.warn("Incorrect data driver type:", driver);
            // tslint:disable-next-line:no-console
            console.warn("Available types:", JSON.stringify(Object.keys(drivers)));
        }
    }
    else if (typeof driver === "object") {
        return driver;
    }
}
exports.toDataDriver = toDataDriver;
function copyWithoutInner(obj, forbidden) {
    var result = {};
    for (var key in obj) {
        if (!key.startsWith("$") && (!forbidden || !forbidden[key])) {
            result[key] = obj[key];
        }
    }
    return result;
}
exports.copyWithoutInner = copyWithoutInner;
function isTreeCollection(obj) {
    // eslint-disable-next-line @typescript-eslint/unbound-method
    return Boolean(obj.getRoot);
}
exports.isTreeCollection = isTreeCollection;
function hasJsonOrArrayStructure(str) {
    if (typeof str === "object") {
        return true;
    }
    if (typeof str !== "string") {
        return false;
    }
    try {
        var result = JSON.parse(str);
        return Object.prototype.toString.call(result) === "[object Object]" || Array.isArray(result);
    }
    catch (err) {
        return false;
    }
}
exports.hasJsonOrArrayStructure = hasJsonOrArrayStructure;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var main_1 = __webpack_require__(11);
var date_1 = __webpack_require__(12);
function normalizeArray(obj, name) {
    if (!obj[name]) {
        return;
    }
    if (typeof obj[name] === "string") {
        obj[name] = [
            {
                text: "" + obj[name],
            },
        ];
    }
    else {
        obj[name] = obj[name].map(function (el) {
            if (typeof el === "string") {
                el = { text: el };
            }
            return el;
        });
    }
}
function normalizeColumns(_a, configChanged) {
    var columns = _a.columns, htmlEnable = _a.htmlEnable;
    if (configChanged === void 0) { configChanged = false; }
    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        col.$htmlEnable = !!(col.htmlEnable || htmlEnable);
        col.$cellCss = col.$cellCss || {};
        normalizeArray(col, "header");
        normalizeArray(col, "footer");
        var isContent = col.header.reduce(function (acc, item) { return (acc = acc || !!item.content); }, false);
        if (isContent) {
            col.$uniqueData = [];
        }
        var width = col.minWidth || 100;
        if (col.width) {
            if (col.maxWidth && col.minWidth) {
                width =
                    col.width >= col.minWidth && col.width <= col.maxWidth
                        ? col.width
                        : col.width >= col.maxWidth
                            ? col.maxWidth
                            : col.minWidth;
            }
            else if (col.maxWidth) {
                width = col.width <= col.maxWidth ? col.width : col.maxWidth > 100 ? col.maxWidth : 100;
            }
            else if (col.minWidth) {
                width = col.width >= col.minWidth ? col.width : col.minWidth;
            }
            else {
                width = col.width;
            }
        }
        col.$width = col.$width && !configChanged ? col.$width : width;
        if (col.$width > col.maxWidth) {
            col.$width = col.maxWidth;
        }
        if (col.$width < col.minWidth) {
            col.$width = col.minWidth;
        }
    }
}
exports.normalizeColumns = normalizeColumns;
function countColumns(config, columns) {
    var headerRowsCount = 0;
    var footerRowsCount = 0;
    var totalWidth = 0;
    var colspans = false;
    var rowsHeadersCount = 0;
    var footer = false;
    columns.forEach(function (col) {
        headerRowsCount = Math.max(headerRowsCount, col.header.length);
        totalWidth += col.$width;
        if (col.footer) {
            footerRowsCount = Math.max(footerRowsCount, col.footer.length);
            if (!footer) {
                footer = true;
            }
        }
        if (!colspans) {
            for (var _i = 0, _a = col.header; _i < _a.length; _i++) {
                var head = _a[_i];
                if (head.colspan) {
                    colspans = true;
                    return;
                }
            }
        }
    });
    // fill missing cells
    columns.forEach(function (col) {
        if (col.header.length < headerRowsCount) {
            for (var i = 0; i < headerRowsCount; i++) {
                col.header[i] = col.header[i] || { text: "" };
            }
        }
        if (footer) {
            col.footer = col.footer || [];
        }
        if (col.footer && col.footer.length < footerRowsCount) {
            for (var i = 0; i < footerRowsCount; i++) {
                col.footer[i] = col.footer[i] || { text: "" };
            }
        }
        col.header = col.header.map(function (head) {
            if (typeof head !== "object") {
                head = { text: head };
            }
            head.css = head.css || "";
            if (!head.text && !head.css.includes("dhx_cell-empty")) {
                head.css += " dhx_cell-empty dxi dxi-select-all";
            }
            return head;
        });
        // find header columns indexes
        if (col.header[0].text === "") {
            rowsHeadersCount++;
        }
    });
    config.$totalWidth = totalWidth;
    config.$headerLevel = headerRowsCount;
    config.$footerLevel = footerRowsCount;
    config.$colspans = colspans;
    config.$footer = footer;
    return rowsHeadersCount;
}
exports.countColumns = countColumns;
function calculatePositions(width, height, scroll, conf, data) {
    var columns = conf.columns || [];
    var columnsLength = columns.length;
    var rows = data || [];
    var rowsLength = rows.length;
    var maxWidth = -Infinity;
    for (var index = 0; index < columnsLength; index++) {
        if (columns[index].$width > maxWidth)
            maxWidth = columns[index].$width;
    }
    var minWidth = +Infinity;
    for (var index = 0; index < columnsLength; index++) {
        if (columns[index].$width < minWidth)
            minWidth = columns[index].$width;
    }
    var maxHeight = -Infinity;
    for (var index = 0; index < rowsLength; index++) {
        if (rows[index].$height > maxHeight)
            maxHeight = rows[index].$height;
    }
    var minHeight = conf.rowHeight;
    var xReserve = Math.round(maxWidth / minWidth);
    var yReserve = Math.round(maxHeight / minHeight);
    var avrColWidth = conf.$totalWidth / columnsLength;
    var colPerPage = Math.round(width / avrColWidth);
    var avrRowHeight = conf.$totalHeight / rowsLength;
    var rowPerPage = Math.round(height / avrRowHeight);
    var x = 0;
    var scrollLeft = scroll.left;
    for (var i = 0; i < columns.length; i++) {
        var col = columns[i];
        scrollLeft = scrollLeft - col.$width;
        if (scrollLeft + avrColWidth / 2 > 0) {
            x++;
        }
        else {
            break;
        }
    }
    var y = 0;
    var scrollTop = scroll.top;
    for (var i = 0; i < rows.length; i++) {
        var row = rows[i];
        scrollTop = scrollTop - row.$height;
        if (scrollTop + avrRowHeight / 2 > 0) {
            y++;
        }
        else {
            break;
        }
    }
    var xStart = x - xReserve >= 0 ? x - xReserve : 0;
    var xEnd = x + colPerPage + xReserve;
    var yStart = y - yReserve >= 0 ? y - yReserve : 0;
    var yEnd = y + rowPerPage + yReserve;
    return {
        xStart: xStart,
        xEnd: xEnd,
        yStart: yStart,
        yEnd: yEnd,
    };
}
exports.calculatePositions = calculatePositions;
function getUnique(arr, name, multiselection) {
    var allItems = arr.map(function (item) { return item[name]; });
    if (multiselection) {
        allItems.forEach(function (item, index) {
            if (item.includes(", ")) {
                item.split(", ").forEach(function (i) { return allItems.push(i); });
                delete allItems[index];
            }
        });
    }
    return allItems.filter(function (item, i, array) { return array.indexOf(item) === i && core_1.isDefined(item); }).sort();
}
exports.getUnique = getUnique;
exports.getMaxRowHeight = function (row, cols, config) {
    if (config === void 0) { config = { font: "20px Roboto", lineHeight: 20 }; }
    var _a, _b;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d", {
        alpha: false,
    });
    ctx.font = config.font;
    var definedColumns = {};
    var colLength = cols.length;
    for (var index = 0; index < colLength; index++) {
        if (cols[index].template) {
            definedColumns[cols[index].id] = {
                width: cols[index].$width || 0,
                htmlEnable: cols[index].$htmlEnable,
                template: cols[index].template,
                cols: cols[index],
            };
        }
        else {
            definedColumns[cols[index].id] = {
                width: cols[index].$width || 0,
                htmlEnable: cols[index].$htmlEnable,
            };
        }
    }
    var defaultLineBreak = [];
    var mathLineBreak = [];
    for (var _i = 0, _c = Object.entries(row); _i < _c.length; _i++) {
        var _d = _c[_i], key = _d[0], value = _d[1];
        if (definedColumns[key] &&
            key !== "id" &&
            key !== "height" &&
            !key.startsWith("$") &&
            (typeof value === "string" || typeof value === "number")) {
            var currentValue = "";
            if ((_a = definedColumns[key]) === null || _a === void 0 ? void 0 : _a.template) {
                var templateValue = definedColumns[key].template(value, row, definedColumns[key].cols);
                currentValue = definedColumns[key].htmlEnable ? main_1.removeHTMLTags(templateValue) : templateValue;
            }
            else if (typeof value === "string") {
                if (definedColumns[key].htmlEnable) {
                    currentValue = main_1.removeHTMLTags(value);
                }
                else {
                    currentValue = value;
                }
            }
            else {
                currentValue = value.toString();
            }
            defaultLineBreak.push(currentValue.split("\n").length);
            mathLineBreak.push(Math.round(ctx.measureText(currentValue).width / ((_b = definedColumns[key]) === null || _b === void 0 ? void 0 : _b.width)));
        }
    }
    var maxRows = Math.max(core_1.getMaxArrayNymber(defaultLineBreak), core_1.getMaxArrayNymber(mathLineBreak));
    canvas.remove();
    return maxRows * config.lineHeight;
};
exports.getCalculatedRowHeight = function (height, config) {
    if (config === void 0) { config = {
        rowHeight: 40,
        padding: 8,
    }; }
    var calculateHeight = config.rowHeight < 40 ? height : height + config.padding * 2;
    return height < config.rowHeight ? config.rowHeight : calculateHeight;
};
exports.getTreeCellWidthOffset = function (row) {
    return 20 + row.$level * 20 - (row.$items ? 20 : 0);
};
exports.getMaxColsWidth = function (rows, cols, config, target) {
    if (config === void 0) { config = {
        font: "normal 14.4px Arial",
    }; }
    var _a;
    if (!rows.length || !cols.length)
        return;
    var canvas = document.createElement("canvas");
    var ctx = canvas.getContext("2d", {
        alpha: false,
    });
    ctx.font = config.font;
    var definedColumns = {};
    var colLength = cols.length;
    for (var index = 0; index < colLength; index++) {
        if (cols[index].template && target === "data") {
            definedColumns[cols[index].id] = {
                width: 20,
                htmlEnable: cols[index].$htmlEnable,
                template: cols[index].template,
                cols: cols[index],
            };
        }
        else {
            definedColumns[cols[index].id] = {
                width: 20,
                htmlEnable: cols[index].$htmlEnable,
                format: cols[index].format,
            };
        }
    }
    var rowsLength = rows.length;
    for (var index = 0; index < rowsLength; index++) {
        for (var _i = 0, _b = Object.entries(rows[index]); _i < _b.length; _i++) {
            var _c = _b[_i], key = _c[0], value = _c[1];
            if (definedColumns[key] &&
                key !== "id" &&
                key !== "height" &&
                !key.startsWith("$") &&
                (typeof value === "string" || typeof value === "number" || value instanceof Date)) {
                var currentValue = void 0;
                if (typeof ((_a = definedColumns[key]) === null || _a === void 0 ? void 0 : _a.template) === "function" && !(value instanceof Date)) {
                    var templateValue = definedColumns[key].template(value, rows[index], definedColumns[key].cols);
                    currentValue = definedColumns[key].htmlEnable
                        ? main_1.removeHTMLTags(templateValue)
                        : templateValue;
                }
                else if (value instanceof Date) {
                    currentValue = date_1.getFormattedDate(definedColumns[key].format || "%M %d %Y", value);
                }
                else {
                    currentValue = definedColumns[key].htmlEnable
                        ? main_1.removeHTMLTags(value)
                        : value.toString();
                }
                var width = ctx.measureText(currentValue).width;
                if (width > definedColumns[key].width)
                    definedColumns[key].width = width;
            }
        }
    }
    canvas.remove();
    var totalColumns = {};
    for (var _d = 0, _e = Object.entries(definedColumns); _d < _e.length; _d++) {
        var _f = _e[_d], key = _f[0], value = _f[1];
        totalColumns[key] = Math.ceil(value.width);
    }
    return totalColumns;
};
function toFormat(value, type, format) {
    if (!value && typeof value !== "number") {
        return value;
    }
    var formatTemplate = function (type) {
        value = value.toString();
        var result;
        var template = format
            .replace(/#+/g, "#")
            .split("#")
            .filter(function (i) { return i; });
        value = type === "percent" ? (Number(value) * 100).toString() : value;
        var trunc = Math.trunc(Number(value)).toString();
        var formatFractionLength = format.match(/0/g) && format.match(/0/g).length;
        var truncTemplate = template.find(function (i) { return !i.includes("0"); });
        result = truncTemplate ? trunc.replace(/(\d)(?=(\d{3})+(\D|$))/g, "$1" + truncTemplate) : trunc;
        if (formatFractionLength) {
            var delimiter = template.find(function (i) { return i.includes("0"); }).replace(/0+/g, "");
            var truncFractional = value.split(".")[1] || "0";
            var fractional = Number("0." + truncFractional).toFixed(formatFractionLength);
            if (Number(fractional) >= 1)
                (result++).toString();
            fractional = fractional
                .toString()
                .split(".")[1]
                .padEnd(formatFractionLength, "0");
            result += delimiter + fractional;
        }
        return type === "percent" ? result + "%" : result;
    };
    switch (type) {
        case "number":
        case "percent":
            if (!format)
                format = "#";
            return core_1.isDefined(value) && !isNaN(Number(value)) ? formatTemplate(type) : value;
        case "date":
            if (!format)
                format = "%M %d %Y";
            if (typeof value === "string") {
                value = date_1.getFormattedDate(format, date_1.stringToDate(value, format));
            }
            else if (typeof value === "object") {
                value = date_1.getFormattedDate(format, value);
            }
            return value;
        default:
            return value;
    }
}
exports.toFormat = toFormat;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(115));
__export(__webpack_require__(59));


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(83));
__export(__webpack_require__(84));
__export(__webpack_require__(88));
__export(__webpack_require__(48));
__export(__webpack_require__(34));


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FocusManager_1 = __webpack_require__(10);
var html_1 = __webpack_require__(2);
function getHotKeyCode(code) {
    var matches = code.toLowerCase().match(/\w+/g);
    var comp = 0;
    var key = "";
    for (var i = 0; i < matches.length; i++) {
        var check = matches[i];
        if (check === "ctrl") {
            comp += 4;
        }
        else if (check === "shift") {
            comp += 2;
        }
        else if (check === "alt") {
            comp += 1;
        }
        else {
            key = check;
        }
    }
    return comp + key;
}
var ie_key_map = {
    Up: "arrowUp",
    Down: "arrowDown",
    Right: "arrowRight",
    Left: "arrowLeft",
    Esc: "escape",
    Spacebar: "space",
};
var KeyManager = /** @class */ (function () {
    function KeyManager(beforeCall) {
        var _this = this;
        this._keysStorage = {};
        this._initHandler = function (e) {
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                key = String.fromCharCode(e.which);
            }
            else {
                var keyName = e.which === 32 ? e.code : e.key;
                key = html_1.isIE() ? ie_key_map[keyName] || keyName : keyName;
            }
            var actions = _this._keysStorage[(e.ctrlKey || e.metaKey ? 4 : 0) +
                (e.shiftKey ? 2 : 0) +
                (e.altKey ? 1 : 0) +
                (key && key.toLowerCase())];
            if (actions) {
                for (var i = 0; i < actions.length; i++) {
                    if (_this._beforeCall && _this._beforeCall(e, FocusManager_1.focusManager.getFocusId()) === false) {
                        return;
                    }
                    actions[i].handler(e);
                }
            }
        };
        if (beforeCall) {
            this._beforeCall = beforeCall;
        }
        document.addEventListener("keydown", this._initHandler);
    }
    KeyManager.prototype.destructor = function () {
        document.removeEventListener("keydown", this._initHandler);
        this.removeHotKey();
    };
    KeyManager.prototype.addHotKey = function (key, handler) {
        var code = getHotKeyCode(key);
        if (!this._keysStorage[code]) {
            this._keysStorage[code] = [];
        }
        this._keysStorage[code].push({ handler: handler });
    };
    KeyManager.prototype.removeHotKey = function (key, handler) {
        var _this = this;
        if (key) {
            if (key && handler) {
                var code_1 = getHotKeyCode(key);
                var functionToString_1 = function (fun) {
                    return fun
                        .toString()
                        .replace(/\n/g, "")
                        .replace(/\s/g, "");
                };
                this._keysStorage[code_1].forEach(function (existHotKey, i) {
                    if (functionToString_1(existHotKey.handler) === functionToString_1(handler)) {
                        delete _this._keysStorage[code_1][i];
                        _this._keysStorage[code_1] = _this._keysStorage[code_1].filter(function (el) { return el; });
                    }
                });
            }
            else {
                var code = getHotKeyCode(key);
                delete this._keysStorage[code];
            }
        }
        else {
            this._keysStorage = {};
        }
    };
    KeyManager.prototype.exist = function (key) {
        var code = getHotKeyCode(key);
        return !!this._keysStorage[code];
    };
    return KeyManager;
}());
exports.KeyManager = KeyManager;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(57));
__export(__webpack_require__(111));
__export(__webpack_require__(41));


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(136));
__export(__webpack_require__(137));
__export(__webpack_require__(31));


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ajax_1 = __webpack_require__(38);
var DataProxy = /** @class */ (function () {
    function DataProxy(url, config) {
        this.url = this._url = url;
        this.config = config;
    }
    DataProxy.prototype.updateUrl = function (url, params) {
        if (params === void 0) { params = {}; }
        this._url = this.url = url || this._url;
        this.url += this.url.includes("?") ? "&" : "?";
        for (var param in params) {
            this.config[param] = params[param];
            this.url += param + "=" + encodeURIComponent(params[param]) + "&";
        }
        this.url = this.url.slice(0, -1);
    };
    DataProxy.prototype.load = function () {
        return ajax_1.ajax.get(this.url, null, { responseType: "text" });
    };
    DataProxy.prototype.save = function (data, mode) {
        switch (mode) {
            case "delete":
                return ajax_1.ajax.delete(this.url, data);
            case "update":
                return ajax_1.ajax.put(this.url, data);
            case "insert":
            default:
                return ajax_1.ajax.post(this.url, data);
        }
    };
    return DataProxy;
}());
exports.DataProxy = DataProxy;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(55));
__export(__webpack_require__(132));
__export(__webpack_require__(4));
__export(__webpack_require__(28));
var Cells_1 = __webpack_require__(39);
exports.getTreeCell = Cells_1.getTreeCell;
__export(__webpack_require__(17));
__export(__webpack_require__(11));


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var core_1 = __webpack_require__(1);
function getCount(item, widgetClass, isLimited) {
    var countColor = {
        danger: " dhx_navbar-count--color_danger",
        secondary: " dhx_navbar-count--color_secondary",
        primary: " dhx_navbar-count--color_primary",
        success: " dhx_navbar-count--color_success",
    }[item.countColor] || " dhx_navbar-count--color_danger";
    return dom_1.el(".dhx_navbar-count", {
        class: widgetClass +
            countColor +
            (!isLimited && parseInt(item.count, 10) > 99 ? " dhx_navbar-count--overlimit" : ""),
    }, isLimited && parseInt(item.count, 10) > 99 ? "99+" : item.count);
}
exports.getCount = getCount;
function getIcon(iconName, type) {
    if (iconName === void 0) { iconName = ""; }
    if (iconName.startsWith("dxi")) {
        iconName = "dxi " + iconName;
    }
    return dom_1.el("span", {
        class: "dhx_" + type + "__icon " + iconName,
        "aria-hidden": "true",
    });
}
exports.getIcon = getIcon;
var getNavbarItemClass = function (widgetName, item, asMenuItem) {
    var baseClassName = "";
    var resultClassName = "";
    if (asMenuItem) {
        baseClassName = "dhx_menu-item";
    }
    else {
        baseClassName = "dhx_" + widgetName + "__item";
    }
    resultClassName = baseClassName + (item.css ? " " + item.css : "");
    if (item.type === "spacer" || item.type === "separator") {
        resultClassName += " " + baseClassName + "--" + item.type;
    }
    if (item.type === "button" && widgetName === "sidebar" && !item.icon) {
        resultClassName += " dhx_navbar-item--colapse_hidden";
    }
    return resultClassName;
};
function navbarComponentMixin(widgetName, item, asMenuItem, body) {
    var getAriaAttrs = function (type) {
        var attrs = {
            role: "none",
        };
        if (type === "separator") {
            attrs.role = "separator";
            attrs["aria-orientation"] = "vertical";
        }
        return attrs;
    };
    var itemClass = getNavbarItemClass(widgetName, item, asMenuItem);
    var hasRibbonSize = widgetName === "ribbon" && (item.type === "navItem" || item.type === "imageButton");
    return dom_1.el("li", __assign({ _key: item.id, class: itemClass +
            (item.icon && !item.value && hasRibbonSize ? " dhx_ribbon__item--icon" : "") +
            (item.src && !item.value && hasRibbonSize ? " dhx_ribbon__item--icon" : "") +
            (item.size && hasRibbonSize ? " dhx_ribbon__item--" + item.size : ""), ".innerHTML": item.type === "customHTML" ? item.html : undefined, dhx_id: item.type === "customHTML" ? item.id : undefined }, getAriaAttrs(item.type)), item.type !== "customHTML" ? [body] : undefined);
}
exports.navbarComponentMixin = navbarComponentMixin;
function getNavbarButtonCSS(_a, widgetName) {
    var color = _a.color, size = _a.size, view = _a.view, full = _a.full, icon = _a.icon, circle = _a.circle, loading = _a.loading, value = _a.value, active = _a.active, count = _a.count;
    var colorsCss = {
        danger: " dhx_button--color_danger",
        secondary: " dhx_button--color_secondary",
        primary: " dhx_button--color_primary",
        success: " dhx_button--color_success",
    }[color] || " dhx_button--color_primary";
    var sizeCss = {
        small: " dhx_button--size_small",
        medium: " dhx_button--size_medium",
    }[size] || " dhx_button--size_medium";
    var viewCss = {
        flat: " dhx_button--view_flat",
        link: " dhx_button--view_link",
    }[view] || " dhx_button--view_flat";
    var fullCss = full ? " dhx_button--width_full" : "";
    var circleCss = circle ? " dhx_button--circle" : "";
    var loadingCss = loading ? " dhx_button--loading" : "";
    var iconViewCss = icon && !value ? " dhx_button--icon" : "";
    var activeCss = active ? " dhx_button--active" : "";
    var countCss = core_1.isDefined(count) ? " dhx_button--count" : "";
    return (colorsCss + sizeCss + viewCss + fullCss + circleCss + loadingCss + activeCss + iconViewCss + countCss);
}
exports.getNavbarButtonCSS = getNavbarButtonCSS;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports,"__esModule",{value:!0});var t,r={1:"#ERROR",2:"#ERROR",3:"#REF!"},e=function(){return e=Object.assign||function(t){for(var r,e=1,n=arguments.length;e<n;e++)for(var o in r=arguments[e])Object.prototype.hasOwnProperty.call(r,o)&&(t[o]=r[o]);return t},e.apply(this,arguments)};function n(t,r,e){return e+64*r+64*t*4096}function o(t){return[t<2147483648?t>>18:t/262144&16777215,t>>6&4095,63&t]}function a(t){return t<2147483648?t>>18:t/262144&16777215}function i(t){return 63&t}function u(t,r,e){for(var n=o(t),a=n[0],i=n[1],u=o(r),f=u[0]-a,s=u[1]-i,h=0;h<=f;h++)for(var c=0;c<=s;c++)e(t+64*c+4096*h*64)}function f(t,r){for(var e,n,a,u,f,h,c,p,v=t.code,g=t.source,l="",b=v.length,d=0;d<b;d+=3){switch(v[d]){case 5:var M=void 0;9===v[d+6]&&(M=r.pageName(i(v[d+7]))),l+=(-1!==(p=M||t.source.substr(v[d+1],v[d+2])).indexOf(" ")?"'"+p+"'":p)+"!";break;case 7:l+=s(u=(e=o(v[d+4]))[0],h=e[1],v[d+5]);break;case 4:l+=g.substr(v[d+1],v[d+2]).toUpperCase();break;case 8:u=(n=o(v[d+4]))[0],h=n[1],f=(a=o(v[d+7]))[0],c=a[1],l+=s(u,h,v[d+5]),l+=":",l+=s(f,c,v[d+8]);break;case 9:break;case 2:l+="{{"+g.substr(v[d+1],v[d+2])+"}}";break;case 3:l+="#REF!";break;case 1:l+='"'+g.substr(v[d+1],v[d+2])+'"';break;default:l+=g.substr(v[d+1],v[d+2])}}return l}function s(t,r,e){var n="";2&e&&(n+="$");var o="";for(r+=1;r>0;){var a=r%26;0===a&&(a=26),o=String.fromCharCode(64+a)+o,r=(r-a)/26}return n+=o,1&e&&(n+="$"),n+=t+1}function h(t){return t<=122}function c(t){return t<=122?t>=65||35===t||36===t:t>191}function p(t){return t>=97}function v(t){var r=t.charCodeAt(0);return r>=48&&r<=57}function g(t,r){var e;do{r++,e=t.charCodeAt(r)}while(e>=48&&e<=57);return r}function l(t){return" "===t||"\t"===t||"\n"===t||"\r"===t}function b(t,r){var e;do{e=t[++r]}while(l(e));return r}function d(t,r){if("<"===t[r]){var e=t[r+1];">"!==e&&"="!==e||r++}else">"===t[r]&&"="===t[r+1]&&r++;return r+1}function M(r,e,n){for(var o=r.length,a=!0,i=e,u=!1,f=!1,s=!1,g=0;i<o;i++){var l=r[i];if("'"!==l){if(!u){s=!0;var b=l.charCodeAt(0);if(c(b)){h(b)?p(b)&&(f=!0):a=!1,1==g&&g++;continue}if(v(l)){0==g&&g++;continue}break}}else{if(s)break;if(u){i++;break}u=!0}}var d=r[i],M=e,y=i-e;return u&&((y-=1+("'"===r[i-1]?1:0))<0&&(y=0),M++,n=5),0===n&&(":"===d&&a?(n=8,f&&(t=!0)):"!"===d?n="#"===r[M]?3:5:"("===d?(function(t,r,e){var n=t.substr(r,e);return n.toUpperCase()!==n}(r,M,y)&&(t=!0),n=4):"}"===d&&"}"===r[i-1]?n=2:1===g&&a?(n=7,f&&(t=!0)):n=6),[M,y,i,n]}function y(t,r,e){for(var o=0,a=0,i=1,u=1,f=0,s=!1,h=r.length-1;h>=0;h--){var c=r[h].charCodeAt(0);36!==c?c<58?(a+=(c-48)*i,i*=10):(s||(i=1,o=a,a=0,s=!0,u+=1),a+=(c-(c>96?96:64))*i,i*=26):f+=u}t.push(9,n(o-1,a-1,e),f)}function m(r,e){var n,o,i=[];t=!1;for(var u,s=-1,h=0;h<r.length;h++){var p=r[h];if('"'!=p){if(!(s>-1))if("{"!=p||"{"!=r[h+1])if("'"==p||c(p.charCodeAt(0))){var m=M(r,h,0),_=(L=m[0],P=m[1],m[2]),w=m[3],E=i.length;if(7!==w&&8!==w||5!==i[i.length-3])u=e.z,i.push(w,L,P);else{var I="'"===r[L-2]?1:0,D=i[E-2],T=i[E-1];void 0===(u=e.page(r.substr(D,T)))&&(i.push(3,0,0),u=0),i.push(w,L-T-2*I-1,P+T+2*I+1)}if(h=_-1,6===w)e.name(i,r,e);else if(8===w){var C=i.length;if(y(i,r.substr(L,P),u),L=(n=M(r,h+2,0))[0],P=n[1],_=n[2],5===(w=n[3])&&(L=(o=M(r,_+1,0))[0],P=o[1],_=o[2],w=o[3]),7!==w){i[C-3]=7;continue}y(i,r.substr(L,P),u);var N=i[C+1],x=i[C+4];(N>x||a(N)>a(x))&&(i[C+1]=x,i[C+4]=N),i[C-1]+=P+1,h=_-1}else 7===w?y(i,r.substr(L,P),u):3!==w&&5!==w||h++}else if(l(p)){var S=b(r,h);i.push(12,h,S-h),h=S-1}else if(v(p)){var A=g(r,h);i.push(11,h,A-h),h=A-1}else{var O=d(r,h);i.push(10,h,O-h),h=O-1}else{var R=M(r,h+2,2),L=R[0],P=R[1],F=R[2];i.push(2,L,P),h=F+2-1}}else s>-1?(i.push(1,s+1,h-s-1),s=-1):s=h}var U={code:i,source:r,exec:null,broken:0,triggers:null};return t&&(U.source=f(U,e)),U}function _(t){return"              ".substr(0,10-t.length)}var w=[">","<","=","+"];function E(t){var r=function(t){for(var r=t.code,e=t.source,n="",o=r.length,a=0;a<o;a+=3){switch(r[a]){case 4:n+="ctx.m."+e.substr(r[a+1],r[a+2]).toUpperCase();break;case 1:n+='"'+e.substr(r[a+1],r[a+2])+'"';break;case 2:n+='ctx.p("'+e.substr(r[a+1],r[a+2])+'")';break;case 6:case 7:var i=void 0,u=void 0;if(10===r[a-3]?i=a-3:12===r[a-3]&&10===r[a-6]&&(i=a-6),10===r[a+6]?u=a+6:12===r[a+6]&&10===r[a+9]&&(u=a+9),i||u){var f=i?e[r[i+1]]:null,s=u?e[r[u+1]]:null;if("&"==f||"&"==s){n+="(ctx.v("+r[a+4]+') === null ? "" : ctx.v('+r[a+4]+"))";break}if(-1!=w.indexOf(f)||-1!=w.indexOf(s)){n+="(ctx.v("+r[a+4]+") === null ? 0 : ctx.v("+r[a+4]+"))";break}}n+="ctx.v("+r[a+4]+")";break;case 8:n+="ctx.r("+r[a+4]+", "+r[a+7]+")";break;case 10:if(1===r[a+2])n+="&"===(h=e[r[a+1]])?'+""+':"="===h?"==":";"===h?",":"{"===h?"[":"}"===h?"]":h;else if(2===r[a+2]){var h;n+="<>"===(h=e.substr(r[a+1],r[a+2]))?"!=":h}else n+=e.substr(r[a+1],r[a+2]);break;case 11:n+=e.substr(r[a+1],r[a+2]);break;case 3:return""}}return n}(t);if(!r)return t.broken=3,void(t.exec=null);try{t.exec=new Function("ctx","return "+r)}catch(r){t.broken=1,t.exec=null}}var I="#DIV/0!",D="#VALUE!",T="#NUM!",C="#N/A";function N(t){var r=new Date(t.getFullYear(),0,0),e=t.valueOf()-r.valueOf()+60*(r.getTimezoneOffset()-t.getTimezoneOffset())*1e3;return Math.floor(e/864e5)}function x(t){var r=new Date(Math.round(86400*(t-25569)*1e3));return new Date(r.getTime()+6e4*r.getTimezoneOffset())}function S(t){return 25569+(t.getTime()-6e4*t.getTimezoneOffset())/864e5}function A(t){return!(!t&&0!==t||(t*=1,isNaN(t)))&&t}function O(t){for(var r=[],e=0;e<t.length;e++)r=r.concat(t[e]);return r}function R(t){return!t&&0!==t}function L(t){return"string"==typeof t?"TRUE"===t:!!t}function P(t){var r="string"==typeof t?new Date(t):x(t);if(r.getTime())return r;throw t+" is invalid date"}function F(t){var r=A(t);if("number"!=typeof r)throw t+" is not a number";return r}function U(t,r,e,n,o){var a=A(t),i=r?A(r):null;if("number"!=typeof a||"boolean"==typeof i)throw D;if(a<e||a>n||i<-1)throw T;i&&(i=Math.floor(+i));var u=Number(a>>>0).toString(o);if(i&&u.length>i)throw T;return u.padStart(i,"0").toUpperCase()}function k(t,r){var e=+vt(t),n=+gt(t),o=+vt(r),a=+gt(r);return ut(e*o-n*a,e*a+n*o)}function V(t,r){var e=+vt(t),n=+gt(t);return ut(e+ +vt(r),n+ +gt(r))}function X(t){return t>0?Math.floor(t):Math.ceil(t)}function Y(t){return t<0?Math.floor(t):Math.ceil(t)}function H(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0,n=O(t),o=0;o<n.length;o++){var a=A(n[o]);"number"==typeof a&&(e+=a)}return e}function j(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0,n=0,o=O(t),a=0;a<o.length;a++){var i=A(o[a]);"number"==typeof i&&(e+=i,n++)}return n?e/n:0}function B(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=O(t),n=0,o=0,a=0;a<e.length;a++){var i=e[a],u=A(e[a]);"number"==typeof u?(n+=u,o++):(!0===i&&n++,(i||!1===i)&&o++)}return o?n/o:0}function z(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0,n=O(t),o=0;o<n.length;o++){var a=A(n[o]);"number"==typeof a&&e++}return e}function G(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0,n=O(t),o=0;o<n.length;o++)n[o]&&1*n[o]!=0&&e++;return e}function q(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=-1/0,n=O(t),o=0;o<n.length;o++){var a=A(n[o]);"number"==typeof a&&a>e&&(e=a)}return e===-1/0?0:e}function W(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=1/0,n=O(t),o=0;o<n.length;o++){var a=A(n[o]);"number"==typeof a&&a<e&&(e=a)}return e===1/0?0:e}function $(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=!1,n=1,o=O(t),a=0;a<o.length;a++){var i=A(o[a]);"number"==typeof i&&(e=!0,n*=i)}return e?n:null}function K(t,r,e){for(var n=O(t),o=r?0:-1,a=e?B.apply(void 0,t):j.apply(void 0,t),i=0,u=0;u<n.length;u++){var f=n[u],s=A(n[u]);if("number"!=typeof s){if(!e||"boolean"!=typeof f&&!f)continue;s=!0===f?1:0}o++,i+=Math.pow(s-a,2)}return o?i/o:0}function Q(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return K(t,!1,!0)}function J(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return K(t,!0,!1)}function Z(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return K(t,!0,!0)}function tt(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Math.sqrt(J.apply(void 0,t))}function rt(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return Math.pow(e,n)}var et={M:1e3,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1};var nt=[];function ot(t){var r=A(t);if("number"==typeof r&&r>-1){var e=Math.floor(r);return 0===e||1===e?1:(nt[e]>0||(nt[e]=ot(e-1)*e),nt[e])}}function at(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return ot(e)/(ot(n)*ot(e-n))}var it=["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"];function ut(t,r,e){void 0===e&&(e="i");var n=A(t),o=A(r);if("number"!=typeof n&&"number"!=typeof o)throw T;var a="",i="";return t&&(a=t.toString()),r&&1!==r?i=r+e:1===r&&(i=e),r>0?(a?a+"+":"")+i:a+i}function ft(t,r){return void 0===r&&(r=null),U(t,r,-512,511,2)}function st(t,r){return void 0===r&&(r=null),U(t,r,-549755813888,549755813887,16)}function ht(t,r){return void 0===r&&(r=null),U(t,r,-536870912,536870911,8)}function ct(t){var r=A(t);if("number"==typeof r){var e=r<0?-1:1,n=1/(1+.3275911*(r=Math.abs(r)));return e*(1-((((1.061405429*n-1.453152027)*n+1.421413741)*n-.284496736)*n+.254829592)*n*Math.exp(-r*r))}throw D}var pt=[.9999999999998099,676.5203681218851,-1259.1392167224028,771.3234287776531,-176.6150291621406,12.507343278686905,-.13857109526572012,9984369578019572e-21,1.5056327351493116e-7];function vt(t){if("string"!=typeof t)throw D;if(["i","+i","1i","+1i","-i","-1i","j","+j","1j","+1j","-j","-1j"].indexOf(t)>=0)return 0;var r=t.indexOf("+"),e=t.indexOf("-");0===r&&(r=t.indexOf("+",1)),0===e&&(e=t.indexOf("-",1));var n=t.substring(t.length-1,t.length),o="i"===n||"j"===n;if(r>=0||e>=0){if(!o)throw T;if(r>=0){if(isNaN(+t.substring(0,r))||isNaN(+t.substring(r+1,t.length-1)))throw T;return Number(t.substring(0,r))}if(isNaN(+t.substring(0,e))||isNaN(+t.substring(e+1,t.length-1)))throw T;return Number(t.substring(0,e))}if(o){if(isNaN(+t.substring(0,t.length-1)))throw T;return 0}if(isNaN(+t))throw T;return+t}function gt(t){if("string"!=typeof t)throw D;if(["i","j"].indexOf(t)>=0)return 1;var r=(t=t.replace("+i","+1i").replace("-i","-1i").replace("+j","+1j").replace("-j","-1j")).indexOf("+"),e=t.indexOf("-");0===r&&(r=t.indexOf("+",1)),0===e&&(e=t.indexOf("-",1));var n=t.substring(t.length-1,t.length),o="i"===n||"j"===n;if(r>=0||e>=0){if(!o)throw T;if(r>=0){if(isNaN(+t.substring(0,r))||isNaN(+t.substring(r+1,t.length-1)))throw T;return Number(t.substring(r+1,t.length-1))}if(isNaN(+t.substring(0,e))||isNaN(+t.substring(e+1,t.length-1)))throw T;return-Number(t.substring(e+1,t.length-1))}if(o){var a=+t.substring(0,t.length-1);if(isNaN(a))throw T;return a}if(isNaN(+t))throw T;return 0}function lt(t){var r=+vt(t),e=+gt(t);return ut(Math.cos(r)*Math.cosh(e),-Math.sin(r)*Math.sinh(e))}function bt(t){var r=+vt(t),e=+gt(t);return ut(Math.cos(e)*(Math.exp(r)+Math.exp(-r))/2,Math.sin(e)*(Math.exp(r)-Math.exp(-r))/2)}function dt(t,r){var e=+vt(t),n=+gt(t),o=+vt(r),a=+gt(r),i=Math.pow(o,2)+Math.pow(a,2);return ut((e*o+n*a)/i,(n*o-e*a)/i)}function Mt(t){var r=+vt(t),e=+gt(t);return ut(Math.sin(r)*Math.cosh(e),Math.cos(r)*Math.sinh(e))}function yt(t){var r=+vt(t),e=+gt(t);return ut(Math.cos(e)*(Math.exp(r)-Math.exp(-r))/2,Math.sin(e)*(Math.exp(r)+Math.exp(-r))/2)}function mt(t,r){var e=O(t).sort((function(t,r){return t-r})),n=A(r);if("number"!=typeof n)throw D;var o=(e.length-1)*n,a=Math.floor(o),i=o-a;return void 0!==e[a+1]?e[a]+i*(e[a+1]-e[a]):e[a]}function _t(t,r,e,n){void 0===n&&(n=!1);var o=F(t),a=F(r),i=F(e),u=function(t,r,e){return at(r,t)*Math.pow(e,t)*Math.pow(1-e,r-t)};if(!n)return u(o,a,i);for(var f=0,s=0;s<o+1;s++)f+=u(s,a,i);return f}var wt=Object.freeze({__proto__:null,SUM:H,AVERAGE:j,AVERAGEA:B,COUNT:z,COUNTA:G,COUNTBLANK:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0,n=O(t),o=0;o<n.length;o++)0===n[o]||n[o]||e++;return e},MAX:q,MIN:W,PRODUCT:$,SUMPRODUCT:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=t[0].length;for(var n in t)if(t[n].length!==e)return;var o=0;for(n=0;n<t[0].length;n++){var a=!1,i=1;for(var u in t){var f=A(t[u][n]);"number"==typeof f&&(i*=f,a=!0)}a&&(o+=i)}return o},SUMSQ:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0,n=O(t),o=0;o<n.length;o++){var a=A(n[o]);"number"==typeof a&&(e+=Math.pow(a,2))}return e},VAR:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return K(t,!1,!1)},VARA:Q,VARP:J,VARPA:Z,STDEV:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Math.sqrt(J.apply(void 0,t))},STDEVP:tt,STDEVA:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Math.sqrt(Q.apply(void 0,t))},STDEVPA:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return Math.sqrt(Z.apply(void 0,t))},POWER:rt,QUOTIENT:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return X(e/n)},SQRT:function(t){var r=A(t);if("number"==typeof r&&r>=0)return Math.sqrt(r)},ABS:function(t){var r=A(t);if("number"==typeof r)return Math.abs(r)},RAND:function(){return Math.random()},PI:function(){return Math.PI},INT:function(t){var r=A(t);if("number"==typeof r)return Math.floor(r)},ROUND:function(t,r){var e=A(t),n=A(r)||0;if("number"==typeof e&&"number"==typeof n)return parseFloat(e.toFixed(n))},ROUNDDOWN:function(t,r){var e=A(t),n=A(r)||0;if("number"==typeof e&&"number"==typeof n)return Math.floor(e*Math.pow(10,n))/Math.pow(10,n)},ROUNDUP:function(t,r){var e=A(t),n=A(r)||0;if("number"==typeof e&&"number"==typeof n)return Math.ceil(e*Math.pow(10,n))/Math.pow(10,n)},TRUNC:function(t){var r=A(t);if("number"==typeof r)return X(r)},EVEN:function(t){var r=A(t);if("number"==typeof r){var e=Y(r);return e%2?e+Math.sign(r):e}},ODD:function(t){var r=A(t);if("number"==typeof r){var e=Y(r);return e%2?e:e+Math.sign(r)}},ACOS:function(t){var r=A(t);if("number"==typeof r)return Math.acos(r)},ACOSH:function(t){var r=A(t);if("number"==typeof r)return Math.acosh(r)},ACOT:function(t){var r=A(t);if("number"==typeof r)return Math.atan(1/r)},ACOTH:function(t){var r=A(t);if("number"==typeof r)return.5*Math.log((r+1)/(r-1))},ARABIC:function(t){if(!A(t)&&/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(""+t)){var r=0;return(""+t).replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g,(function(t){return r+=et[t],t})),+r}},ASIN:function(t){var r=A(t);if("number"==typeof r)return Math.asin(r)},ASINH:function(t){var r=A(t);if("number"==typeof r)return Math.asinh(r)},ATAN:function(t){var r=A(t);if("number"==typeof r)return Math.atan(r)},ATAN2:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return Math.atan2(n,e)},ATANH:function(t){var r=A(t);if("number"==typeof r)return Math.log((1+r)/(1-r))/2},BASE:function(t,r,e){void 0===e&&(e=0);var n=A(t),o=A(r),a=A(e);if("number"==typeof n&&"number"==typeof o&&"number"==typeof a){var i=n.toString(o);return new Array(Math.max(a+1-i.length,0)).join("0")+i.toUpperCase()}},CEILING:function(t,r,e){void 0===r&&(r=1),void 0===e&&(e=0);var n=A(t),o=A(r),a=A(e);if("number"==typeof n&&"number"==typeof o&&"number"==typeof a)return 0===o?0:(o=Math.abs(o),n>=0?Math.ceil(n/o)*o:0===e?-1*Math.floor(Math.abs(n)/o)*o:-1*Math.ceil(Math.abs(n)/o)*o)},COS:function(t){var r=A(t);if("number"==typeof r)return Math.cos(r)},COSH:function(t){var r=A(t);if("number"==typeof r)return Math.cosh(r)},COT:function(t){var r=A(t);if("number"==typeof r)return 1/Math.tan(r)},COTH:function(t){var r=A(t);if("number"==typeof r){var e=Math.exp(2*r);return(e+1)/(e-1)}},CSC:function(t){var r=A(t);if("number"==typeof r)return 1/Math.sin(r)},CSCH:function(t){var r=A(t);if("number"==typeof r)return 2/(Math.exp(r)-Math.exp(-r))},DEGREES:function(t){var r=A(t);if("number"==typeof r)return 180*r/Math.PI},DECIMAL:function(t,r){var e=A(t),n=A(r);if(!(""+e).match("/[2-9]/")&&"number"==typeof e&&"number"==typeof n&&n>1&&n<37)return parseInt(""+e,n)},FACT:ot,FACTDOUBLE:function t(r){var e=A(r);if("number"==typeof e){var n=Math.floor(e);return n<=0?1:n*t(n-2)}},COMBIN:at,COMBINA:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return 0===e&&0===n?1:at(e+n-1,e-1)},FLOOR:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n){var o=Math.abs(n);return e>=0?Math.floor(e/o)*o:-1*Math.ceil(Math.abs(e)/o)*o}},GCD:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=O(t),n=e.length;if(!n)return 1;for(var o=e[0],a=1;"number"!=typeof o;){if(o=e[a],a>e.length)throw"The arguments should contain at least one numeric value";a++}for(var i=o<0?-o:o;a<n;a++){var u=A(e[a]);if("number"==typeof u){for(var f=u<0?-u:u;i&&f;)i>f?i%=f:f%=i;i+=f}}return i},LN:function(t){var r=A(t);if("number"==typeof r)return Math.log(r)},LOG:function(t,r){void 0===r&&(r=10);var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return Math.log(e)/Math.log(n)},LOG10:function(t){var r=A(t);if("number"==typeof r)return Math.log(r)/Math.log(10)},MOD:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n&&0!==n){var o=Math.abs(e%n);return r>0?o:-o}},MROUND:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n&&e*n>-1)return Math.round(e/n)*n},MULTINOMIAL:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=O(t),n=0,o=1,a=0;a<e.length;a++){var i=A(e[a]);"number"==typeof i&&(n+=i,o*=ot(e[a]))}return ot(n)/o},RADIANS:function(t){var r=A(t);if("number"==typeof r)return r*Math.PI/180},RANDBETWEEN:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e+Math.ceil((n-e+1)*Math.random())-1},ROMAN:function(t){var r=A(t);if("number"==typeof r){for(var e=String(r).split(""),n="",o=3;o--;)n=(it[+e.pop()+10*o]||"")+n;return new Array(+e.join("")+1).join("M")+n}},SEC:function(t){var r=A(t);if("number"==typeof r)return 1/Math.cos(r)},SECH:function(t){var r=A(t);if("number"==typeof r)return 2/(Math.exp(r)+Math.exp(-r))},SIN:function(t){var r=A(t);if("number"==typeof r)return Math.sin(r)},SINH:function(t){var r=A(t);if("number"==typeof r)return Math.sinh(r)},SQRTPI:function(t){var r=A(t);if("number"==typeof r&&r>-1)return Math.sqrt(r*Math.PI)},SUBTOTAL:function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];var n=A(t),o=O(r);if("number"==typeof n)switch(n){case 1:case 101:return j.apply(void 0,o);case 102:case 2:return z.apply(void 0,o);case 103:case 3:return G.apply(void 0,o);case 104:case 4:return q.apply(void 0,o);case 105:case 5:return W.apply(void 0,o);case 106:case 6:return $.apply(void 0,o);case 107:case 7:case 110:case 10:return;case 108:case 8:return tt.apply(void 0,o);case 109:case 9:return H.apply(void 0,o);case 111:case 11:return J.apply(void 0,o)}},ADD:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e+n},MINUS:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e-n},DIVIDE:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n&&0!==n)return e/n},MULTIPLY:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e*n},GT:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e>n},GTE:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e>=n},LT:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e<n},LTE:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e<=n},EQ:function(t,r){return typeof t==typeof r&&t==r},NE:function(t,r){return typeof t!=typeof r||t!=r},POW:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return rt(t,r)},SUMX2MY2:function(t,r){if(!t.find((function(t){return"number"!=typeof A(t)}))&&!r.find((function(t){return"number"!=typeof A(t)}))){for(var e=0,n=0;n<t.length;n++)e+=t[n]*t[n]-r[n]*r[n];return e}},SUMX2PY2:function(t,r){if(!t.find((function(t){return"number"!=typeof A(t)}))&&!r.find((function(t){return"number"!=typeof A(t)}))){for(var e=0,n=0;n<t.length;n++)e+=t[n]*t[n]+r[n]*r[n];return e}},SUMXMY2:function(t,r){if(!t.find((function(t){return"number"!=typeof A(t)}))&&!r.find((function(t){return"number"!=typeof A(t)}))){for(var e=0,n=0;n<t.length;n++)e+=Math.pow(t[n]-r[n],2);return e}},TAN:function(t){var r=A(t);if("number"==typeof r)return Math.tan(r)},TANH:function(t){var r=A(t);if("number"==typeof r)return Math.tanh(r)},COMPLEX:ut,CORREL:function(t,r){if(t.length!==r.length)throw C;for(var e=t.filter((function(t){return"number"==typeof t})),n=r.filter((function(t){return"number"==typeof t})),o=e.length,a=e.reduce((function(t,r){return t+r}),0)/o,i=n.reduce((function(t,r){return t+r}),0)/o,u=0,f=0,s=0,h=0;h<o;h++)u+=(e[h]-a)*(n[h]-i),f+=Math.pow(e[h]-a,2),s+=Math.pow(n[h]-i,2);var c=Math.sqrt(f*s);if(!c)throw I;return u/c},DEC2BIN:ft,DEC2HEX:st,DEC2OCT:ht,DELTA:function(t,r){var e=A(t),n=A(r);if("number"==typeof e||"number"==typeof e)return+(e===n);throw D},DEVSQ:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=O(t),n=[];e.forEach((function(t){"number"==typeof t&&n.push(t)}));var o=n.reduce((function(t,r){return t+r}),0)/n.length;return n.reduce((function(t,r){return t+Math.pow(r-o,2)}),0)},ERF:ct,ERFC:function(t){var r=A(t);if("number"==typeof r)return 1-ct(r);throw D},EXP:function(t){var r=A(t);if("number"==typeof r)return Math.exp(r);throw D},FISHER:function(t){var r=A(t);if("number"==typeof r&&r>-1&&r<1)return.5*Math.log((1+r)/(1-r));throw D},FISHERINV:function(t){var r=A(t);if("number"==typeof r){var e=Math.exp(2*r);return(e-1)/(e+1)}throw D},GAMMA:function t(r){var e=A(r);if("number"!=typeof e)throw D;if(!(Number.isInteger(e)&&e<=0)){if(e<.5)return Math.PI/(Math.sin(Math.PI*e)*t(1-e));e-=1;for(var n=pt[0],o=1;o<9;o++)n+=pt[o]/(e+o);var a=e+7+.5;return Math.sqrt(2*Math.PI)*Math.pow(a,e+.5)*Math.exp(-a)*n}throw T},GEOMEAN:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=O(t);if(e.some((function(t){return!Number.isFinite(t)||t<=0})))throw T;return Math.pow(e.reduce((function(t,r){return r*t}),1),1/e.length)},GESTEP:function(t,r){void 0===r&&(r=0);var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return+(t>=r);throw D},HARMEAN:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=O(t);if(e.some((function(t){return!Number.isFinite(t)||t<=0})))throw T;var n=e.reduce((function(t,r){return t+1/r}),0);return 1/(1/e.length*n)},HEX2BIN:function(t,r){return void 0===r&&(r=null),ft(parseInt(t.toString(),16),r)},HEX2DEC:function(t,r){void 0===r&&(r=null);var e=parseInt(t.toString(),16);if(!Number.isFinite(e)||"boolean"==typeof r||r&&"boolean"==typeof A(r))throw D;var n=+r;return n&&(n=+n.toFixed(0)),parseInt(t.toString(),16).toString().padStart(n,"0")},HEX2OCT:function(t,r){return void 0===r&&(r=null),ht(parseInt(t.toString(),16),r)},IMREAL:vt,IMAGINARY:gt,IMABS:function(t){var r=vt(t),e=gt(t);if(!Number.isFinite(+r)||!Number.isFinite(+e))throw D;return Math.sqrt(Math.pow(+r,2)+Math.pow(+e,2))},IMCONJUGATE:function(t){return ut(+vt(t),-+gt(t))},IMCOS:lt,IMCOSH:bt,IMCOT:function(t){return dt(lt(t),Mt(t))},IMCSC:function(t){return dt("1",Mt(t))},IMCSCH:function(t){return dt("1",yt(t))},IMDIV:dt,IMSIN:Mt,IMSINH:yt,IMEXP:function(t){var r=+vt(t),e=+gt(t),n=Math.exp(r);return ut(n*Math.cos(e),n*Math.sin(r))},IMLN:function(t){var r=+vt(t),e=+gt(t);return ut(Math.log(Math.sqrt(r*r+e*e)),Math.atan(e/r))},IMPOWER:function(t,r){var e=A(r);if("number"!=typeof e)throw D;var n=+vt(t),o=+gt(t),a=Math.sqrt(n*n+o*o),i=Math.pow(a,e),u=Math.atan(o/n);return ut(i*Math.cos(e*u),i*Math.sin(e*u))},IMPRODUCT:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(0===t.length)throw D;for(var e=t[0],n=0,o=t.slice(1);n<o.length;n++){var a=o[n];e=k(e.toString(),a.toString())}return e.toString()},IMSEC:function(t){return dt("1",lt(t))},IMSECH:function(t){return dt("1",bt(t))},IMSQRT:function(t){var r=+vt(t),e=+gt(t),n=Math.sqrt(Math.sqrt(r*r+e*e)),o=Math.atan(e/r)/2;return ut(n*Math.cos(o),n*Math.sin(o))},IMSUB:function(t,r){var e=+vt(t),n=+gt(t);return ut(e-+vt(r),n-+gt(r))},IMSUM:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];if(0===t.length)throw D;for(var e=t[0],n=0,o=t.slice(1);n<o.length;n++){var a=o[n];e=V(e.toString(),a.toString())}return e.toString()},IMTAN:function(t){return dt(Mt(t),lt(t))},LARGE:function(t,r){var e=A(r),n=t.sort((function(t,r){return t-r}));if("number"==typeof e&&!t.some((function(t){return"number"!=typeof A(t)})))return n[n.length-e];throw D},MEDIAN:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=O(t);e.sort((function(t,r){return t-r}));var n=Math.floor(e.length/2);return e.length%2?e[n]:(e[n-1]+e[n])/2},OCT2BIN:function(t,r){return void 0===r&&(r=null),ft(parseInt(t.toString(),8),r)},OCT2DEC:function(t,r){void 0===r&&(r=null);var e=r?A(r):null,n=parseInt(t.toString(),8);if(!Number.isFinite(n)||"boolean"==typeof e)throw D;return e&&(e=+e.toFixed(0)),parseInt(t.toString(),8).toString().padStart(e,"0")},OCT2HEX:function(t,r){return void 0===r&&(r=null),st(parseInt(t.toString(),8),r)},PERMUT:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return ot(e)/ot(e-n);throw D},PERCENTILE:mt,QUARTILE:function(t,r){var e=A(r);if("number"!=typeof e)throw D;switch(e){case 0:return W.apply(void 0,t);case 1:return mt(t,.25);case 2:return mt(t,.5);case 3:return mt(t,.75);case 4:return q.apply(void 0,t);default:throw T}},SIGN:function(t){var r=A(t);if("number"==typeof r)return 0===r?0:r/Math.abs(r);throw D},SMALL:function(t,r){var e=A(r),n=t.sort((function(t,r){return t-r}));if("number"==typeof e&&!t.some((function(t){return"number"!=typeof A(t)})))return n[e-1];throw D},STEYX:function(t,r){if(t.length!==r.length)throw C;var e=t.filter((function(t){return"number"==typeof t})),n=r.filter((function(t){return"number"==typeof t})),o=e.length;if(2===o)throw I;for(var a=e.reduce((function(t,r){return t+r}),0)/o,i=n.reduce((function(t,r){return t+r}),0)/o,u=0,f=0,s=0,h=0;h<o;h++)u+=(e[h]-a)*(n[h]-i),f+=Math.pow(e[h]-a,2),s+=Math.pow(n[h]-i,2);if(2===s)throw I;return Math.sqrt((f-Math.pow(u,2)/s)/(o-2))},WEIBULL:function(t,r,e,n){var o=F(t),a=F(r),i=F(e);if(1==r)return 1/i;var u=Math.exp(-Math.pow(o/i,a));return n?1-u:a/Math.pow(i,a)*Math.pow(o,a-1)*u},AVEDEV:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var e=O(t).filter((function(t){return"number"==typeof t})),n=e.length;if(0===n)throw I;var o=e.reduce((function(t,r){return t+r}),0)/n,a=e.reduce((function(t,r){return t+Math.abs(r-o)}),0);return a/n},BINOMDIST:_t,BINOMDISTRANGE:function(t,r,e,n){var o=F(t),a=F(r),i=F(e),u=A(n);"number"!=typeof u&&(u=i);for(var f=0,s=i;s<=u;s++){f+=at(o,s)*Math.pow(a,s)*Math.pow(1-a,o-s)}return f},BINOMDISTINV:function(t,r,e){for(var n=F(t),o=F(r),a=F(e),i=0;i<=n;i++){if(_t(i,n,o,!0)>=a)return i}},BITAND:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e&n;throw D},BITOR:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e|n;throw D},BITXOR:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e^n;throw D},BITLSHIFT:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e<<n;throw D},BITRSHIFT:function(t,r){var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n)return e>>n;throw D},COVAR:function(t,r){var e=t.filter((function(t){return"number"==typeof t})),n=r.filter((function(t){return"number"==typeof t}));if(e.length!==n.length)throw C;var o=e.length;if(0===o)throw I;for(var a=e.reduce((function(t,r){return t+r}),0)/o,i=n.reduce((function(t,r){return t+r}),0)/o,u=0,f=0;f<o;f++)u+=(e[f]-a)*(n[f]-i);return u/o}});var Et=/[\0-\x1F]/g;var It=Object.freeze({__proto__:null,CONCATENATE:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return O(t).join("")},LEFT:function(t,r){return R(t)?"":t.toString().substring(0,r)},MID:function(t,r,e){return R(t)?"":t.toString().substring(r,r+e)},RIGHT:function(t,r){return R(t)?"":t.toString().substring(t.length-r)},LOWER:function(t){return R(t)?"":t.toString().toLowerCase()},UPPER:function(t){return R(t)?"":t.toString().toUpperCase()},PROPER:function(t){if(R(t))return"";var r=t.toString().toLowerCase().split(" ");for(var e in t="",r)t+=(t?" ":"")+r[e].substring(0,1).toUpperCase()+r[e].substring(1);return t},TRIM:function(t){return R(t)?"":t.toString().trim()},LEN:function(t){return R(t)?0:t.toString().length},CHAR:function(t){var r=A(t);if("number"==typeof r)return String.fromCharCode(r)},CLEAN:function(t){return void 0===t&&(t=""),(""+t).replace(Et,"")},CODE:function(t){return void 0===t&&(t=""),(""+t).charCodeAt(0)},EXACT:function(t,r){return t===r},FIND:function(t,r,e){void 0===e&&(e=0);var n=A(e);if("number"==typeof n&&r)return(""+r).indexOf(""+t,n-1)+1;throw"index cannot be string"},FIXED:function(t,r,e){void 0===r&&(r=2),void 0===e&&(e=!1);var n=A(t),o=A(r);if("number"==typeof n&&"number"==typeof o){var a=n.toFixed(o);if(L(e))return""+a;var i=(""+a).split("."),u=i[0],f=i[1];return u.replace(/\B(?=(\d{3})+(?!\d))/g,",")+"."+f}},NUMBERVALUE:function(t,r,e){if(void 0===r&&(r="."),void 0===e&&(e=","),"string"==typeof t&&"string"==typeof r&&"string"==typeof e)return Number(t.replace(r,".").replace(e,""))},REGEXEXTRACT:function(t,r){if("string"==typeof t&&"string"==typeof r){var e=t.match(new RegExp(r));return e?e[e.length>1?e.length-1:0]:null}},REGEXMATCH:function(t,r){if("string"==typeof t&&"string"==typeof r)return!!t.match(new RegExp(r))},REGEXREPLACE:function(t,r,e){if("string"==typeof t&&"string"==typeof r)return t.replace(new RegExp(r),""+e)},REPT:function(t,r){var e=A(r);if("number"==typeof e)return new Array(e+1).join(""+t)},SEARCH:function(t,r,e){void 0===e&&(e=0);var n=A(e);if("number"==typeof n){var o=(""+r).toLowerCase().indexOf((""+t).toLowerCase(),n-1)+1;if(0!==o)return o;throw"not found"}},SUBSTITUTE:function(t,r,e,n){if(!t||!r||!e&&""!==e)return""+t;if(void 0===n)return(""+t).replace(new RegExp(""+r,"g"),""+e);for(var o=0,a=0;(""+t).indexOf(""+r,o)>0;)if(o=(""+t).indexOf(""+r,o+1),++a===n)return(""+t).substring(0,o)+e+(""+t).substring(o+(""+r).length)},T:function(t){return"string"==typeof t&&"TRUE"!==t&&"FALSE"!==t?""+t:""},JOIN:function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];var n=[];return r.forEach((function(r){"object"==typeof r?n.push(r.join(""+t)):n.push(r)})),n.join(""+t)},REPLACE:function(t,r,e,n){var o=A(r),a=A(e);if("number"==typeof o&&"number"==typeof a){var i=t.toString(),u=n.toString();return i.replace(i.substr(o-1,a),u)}},ARRAYTOTEXT:function(t,r){return r?"{"+t.map((function(t){return"string"==typeof t?'"'+t+'"':t})).join("; ")+"}":t.join("; ")}}),Dt=[[],[1,2,3,4,5,6,7],[7,1,2,3,4,5,6],[6,0,1,2,3,4,5],[],[],[],[],[],[],[],[7,1,2,3,4,5,6],[6,7,1,2,3,4,5],[5,6,7,1,2,3,4],[4,5,6,7,1,2,3],[3,4,5,6,7,1,2],[2,3,4,5,6,7,1],[1,2,3,4,5,6,7]],Tt=[void 0,0,1,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,1,2,3,4,5,6,0],Ct=[[],[6,0],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],void 0,void 0,void 0,[0,0],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6]];function Nt(t,r){var e=P(t),n=P(r);if(e&&n)return Math.round((e.getTime()-n.getTime())/864e5)}function xt(t){var r=P(t);if(r){r.setHours(0,0,0),r.setDate(r.getDate()+4-(r.getDay()||7));var e=new Date(r.getFullYear(),0,1);return Math.ceil(((r.getTime()-e.getTime())/864e5+1)/7)}}function St(t,r,e,n){var o=P(t),a=P(r);if(o&&a){for(var i=void 0===e?Ct[1]:Ct[e],u=n||[],f=0;f<u.length;f++){if((l=x(u[f]))instanceof Error)throw"The "+u[f]+" is not a  number";u[f]=l}var s=(a.getTime()-o.getTime())/864e5+1,h=Math.round(s),c=o;for(f=0;f<s;f++){var p=(new Date).getTimezoneOffset()>0?c.getUTCDay():c.getDay(),v=!1;p!==i[0]&&p!==i[1]||(v=!0);for(var g=0;g<u.length;g++){var l;if((l=u[g]).getDate()===c.getDate()&&l.getMonth()===c.getMonth()&&l.getFullYear()===c.getFullYear()){v=!0;break}}v&&h--,c.setDate(c.getDate()+1)}return h}}function At(t,r,e,n){var o=P(t),a=A(r);if(o&&"number"==typeof a){for(var i=void 0===e?Ct[1]:Ct[e],u=n||[],f=0;f<u.length;f++){if((p=x(u[f]))instanceof Error)throw"The "+u[f]+" is not a  number";u[f]=p}for(var s=0;s<a;){o.setDate(o.getDate()+1);var h=o.getDay();if(h!==i[0]&&h!==i[1]){for(var c=0;c<u.length;c++){var p;if((p=u[c]).getDate()===o.getDate()&&p.getMonth()===o.getMonth()&&p.getFullYear()===o.getFullYear()){s--;break}}s++}}return S(o)}}function Ot(t){return 1===new Date(t,1,29).getMonth()}function Rt(t,r,e){void 0===e&&(e=0);var n=P(t),o=P(r);if(n&&o){var a=n.getDate(),i=n.getMonth()+1,u=n.getFullYear(),f=o.getDate(),s=o.getMonth()+1,h=o.getFullYear(),c=365,p=h-u+1,v=(new Date(h+1,0,1).getTime()-new Date(u,0,1).getTime())/1e3/60/60/24/p;switch(e){case 0:return 31===a&&31===f?(a=30,f=30):31===a?a=30:30===a&&31===f&&(f=30),(f+30*s+360*h-(a+30*i+360*u))/360;case 1:return u===h||u+1===h&&(i>s||i===s&&a>=f)?((u===h&&Ot(u)||function(t,r){var e=t.getFullYear(),n=new Date(e,2,1);if(Ot(e)&&t<n&&r>=n)return!0;var o=r.getFullYear(),a=new Date(o,2,1);return Ot(o)&&r>=a&&t<a}(n,o)||1===s&&29===f)&&(c=366),Nt(o.toDateString(),n.toDateString())/c):Nt(o.toDateString(),n.toDateString())/v;case 2:return Nt(o.toDateString(),n.toDateString())/360;case 3:return Nt(o.toDateString(),n.toDateString())/365;case 4:return(f+30*s+360*h-(a+30*i+360*u))/360}}}var Lt=Object.freeze({__proto__:null,DATE:function(t,r,e){return S(new Date(t,r-1,e))},TIME:function(t,r,e){var n=S(new Date(1900,0,1,t,r,e,0));return n-Math.trunc(n)},DAY:function(t){return x(t).getDate()},MONTH:function(t){return x(t).getMonth()+1},YEAR:function(t){return x(t).getFullYear()},HOUR:function(t){return x(t).getHours()},MINUTE:function(t){return x(t).getMinutes()},SECOND:function(t){return x(t).getSeconds()},NOW:function(){return S(new Date)},DATEDIF:function(t,r,e){var n=e.toLowerCase();if("d"===n)return r-t;var o=x(t),a=x(r);switch(n){case"y":return a.getFullYear()-o.getFullYear();case"m":return(u=12*(a.getFullYear()-o.getFullYear()))+a.getMonth()-o.getMonth();case"d":return Math.floor(r-t);case"md":if((f=a.getDate()-o.getDate())<0){var i=new Date(o.getFullYear(),o.getMonth()+1,0).getDate();return a.getDate()+i-o.getDate()}return f;case"ym":var u;return(u=a.getMonth()-o.getMonth())<0?12+u:u;case"yd":var f;return(f=N(a)-N(o))<0?365+f:f}},DATEVALUE:function(t){if("string"==typeof t)return S(new Date(new Date(t).toDateString()))},DAYS:Nt,DAYS360:function(t,r,e){void 0===e&&(e=0);var n=P(t),o=P(r);if(n&&o){var a=n.getMonth(),i=o.getMonth(),u=void 0,f=void 0;if(L(e))u=31===n.getDate()?30:n.getDate(),f=31===o.getDate()?30:o.getDate();else{var s=new Date(n.getFullYear(),a+1,0).getDate(),h=new Date(o.getFullYear(),i+1,0).getDate();u=n.getDate()===s?30:n.getDate(),o.getDate()===h?u<30?(i++,f=1):f=30:f=o.getDate()}return 360*(o.getFullYear()-n.getFullYear())+30*(i-a)+(f-u)}},EDATE:function(t,r){var e=P(t),n=A(r);if(e&&"number"==typeof n)return e.setMonth(e.getMonth()+n),S(e)},EOMONTH:function(t,r){var e=P(t),n=A(r);if(e&&"number"==typeof n)return S(new Date(e.getFullYear(),e.getMonth()+n+1,0))},ISOWEEKNUM:xt,NETWORKDAYS:function(t,r,e){return St(t,r,1,e)},NETWORKDAYSINTL:St,TIMEVALUE:function(t){if("string"==typeof t){var r=t.split(" "),e=r[1],n=r[0].split(":"),o=new Date;return o.setHours(+n[0]),e&&"PM"===e.toUpperCase()&&o.setHours(o.getHours()+12),o.setMinutes(+n[1]),n[2]&&o.setSeconds(+n[2]),(3600*o.getHours()+60*o.getMinutes()+o.getSeconds())/86400}},WEEKNUM:function(t,r){void 0===r&&(r=1);var e=P(t);if(21===r)return xt(r);var n=Tt[r],o=new Date(e.getFullYear(),0,1),a=o.getDay()<n?1:0,i=o.getTime()-24*Math.abs(o.getDay()-n)*60*60*1e3;return Math.floor((e.getTime()-i)/864e5/7+1)+a},WEEKDAY:function(t,r){void 0===r&&(r=1);var e=P(t).getDay();return Dt[r][e]},WORKDAY:function(t,r,e){return At(t,r,1,e)},WORKDAYINTL:At,YEARFRAC:Rt});var Pt=Object.freeze({__proto__:null,IF:function(t,r,e){return t?r:e},AND:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0;e<t.length;e++)if(!L(t[e]))return!1;return!0},NOT:function(t){return!L(t)},OR:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=0;e<t.length;e++)if(t[e])return!0;return!1},CHOOSE:function(t){for(var r=[],e=1;e<arguments.length;e++)r[e-1]=arguments[e];var n=A(t);if(r.length>1&&"number"==typeof n){if(r.length<n)throw"the index number is greater than the length of the array of values";if(n<=0)throw"index cannot be less than or equal to 0";return r[--n]}},FALSE:function(){return!1},TRUE:function(){return!0}});var Ft=Object.freeze({__proto__:null,ISBLANK:function(t){return R(t)},ISBINARY:function(t){return/^[01]{1,10}$/.test(""+t)},ISEVEN:function(t){var r=A(t);return"number"==typeof r&&r%2==0},ISODD:function(t){var r=A(t);return"number"==typeof r&&r%2!=0},ISNONTEXT:function(t){return"string"!=typeof t},ISNUMBER:function(t){return"number"==typeof A(t)},ISTEXT:function(t){return"string"==typeof t},N:function(t){var r=A(t);if("number"==typeof r)return r;var e=new Date(t);return e.getTime()?S(e):"TRUE"===t||!0===t?1:0}});function Ut(t,r,e,n,o){void 0===n&&(n=0),void 0===o&&(o=0);var a,i=F(t),u=F(r),f=F(e),s=F(n);if(0===i)a=(f+s)/u;else{var h=Math.pow(1+i,u);a=i*(f*h+s)/(h-1),1===o&&(a/=1+i)}return-a}function kt(t,r,e,n,o){void 0===n&&(n=0),void 0===o&&(o=0);var a,i=F(t),u=F(r),f=F(e),s=F(n);if(0!==i){var h=Math.pow(1+i,u);return a=s*h+f*(h-1)/i,1===o&&(a=s*h+f*(1+i)*(h-1)/i),-a}a=s+f*u}function Vt(t,r,e,n,o,a){void 0===o&&(o=0),void 0===a&&(a=0);var i=F(t),u=F(e),f=F(r),s=F(n),h=Ut(i,u,s,F(o),a);return(1===f?1===a?0:-s:1===a?kt(i,f-2,h,s,1)-h:kt(i,f-1,h,s,0))*i}var Xt=Object.freeze({__proto__:null,ACCRINT:function(t,r,e,n,o,a,i){void 0===o&&(o=0),void 0===i&&(i=0);var u=P(t),f=P(e),s=F(n),h=F(o),c=F(a),p=F(i);if(1!==c)throw"This function is only supported with frequency 1";if(-1===[0,1,2,3,4].indexOf(p))throw"Basis is "+i+". It's should be 0, 1, 2, 3 or 4";if(f<=u)throw"Settlement canot be before or equal to issue";return h*s*Rt(t,e,p)},PMT:Ut,FV:kt,DB:function(t,r,e,n,o){void 0===o&&(o=12);var a=F(t),i=F(r),u=F(e),f=F(n),s=F(o);if(a<0||i<0||u<0||f<0)throw"Parameters cannot be negative";if(-1===[1,2,3,4,5,6,7,8,9,10,11,12].indexOf(s))throw"Month is "+o+". It's should be beetwen 1 and 12";if(f>u)throw"Period cannot be greater than life";if(i>=a)return 0;for(var h=+(1-Math.pow(i/a,1/u)).toFixed(3),c=a*h*s/12,p=c,v=0,g=n===u?u-1:n,l=2;l<=g;l++)p+=v=(a-p)*h;return 1===n?c:n===u?(a-p)*h:v},DDB:function(t,r,e,n,o){void 0===o&&(o=2);var a=F(t),i=F(r),u=F(e),f=F(n),s=F(o);if(a<0||i<0||u<0||f<0||s<0)throw"Parameters cannot be negative";if(f>u)throw"Period cannot be greater than life";if(i>=a)return 0;for(var h=0,c=0,p=1;p<=n;p++)h+=c=Math.min(s/u*(a-h),a-i-h);return c},DOLLAR:function(t,r){void 0===r&&(r=2);var e=A(t),n=A(r);if("number"==typeof e&&"number"==typeof n){if(n>=0)return"$"+e.toFixed(n);var o=Math.pow(10,-n);return"$"+Math.trunc(e/o)*o}},DOLLARDE:function(t,r){var e=F(t),n=F(r);if(n<0)throw"Fraction cannot be negative";if(n>=0&&n<1)throw"Fraction cannot be zero";n=parseInt(""+n,10);var o=parseInt(""+t,10);o+=e%1*Math.pow(10,Math.ceil(Math.log(n)/Math.LN10))/n;var a=Math.pow(10,Math.ceil(Math.log(n)/Math.LN2)+1);return o=Math.round(o*a)/a},DOLLARFR:function(t,r){var e=F(t),n=F(r);if(n<0)throw"Fraction cannot be negative";if(n>=0&&n<1)throw"Fraction cannot be zero";n=parseInt(""+n,10);var o=parseInt(""+t,10);return o+=e%1*Math.pow(10,-Math.ceil(Math.log(n)/Math.LN10))*n},EFFECT:function(t,r){var e=F(t),n=F(r);if(e<=0)throw"Rate cannot be less than or equal to zero";if(n<1)throw"Periods cannot be less than 1";return n=parseInt(""+n,10),Math.pow(1+e/n,n)-1},FVSCHEDULE:function(t,r){for(var e=F(t),n=r.map((function(t){return F(t)})),o=n.length,a=e,i=0;i<o;i++)a*=1+n[i];return a},IRR:function(t,r){void 0===r&&(r=0);for(var e=O(t).map((function(t){return F(t)})),n=F(r),o=function(t,r,e){for(var n=e+1,o=t[0],a=1;a<t.length;a++)o+=t[a]/Math.pow(n,(r[a]-r[0])/365);return o},a=function(t,r,e){for(var n=e+1,o=0,a=1;a<t.length;a++){var i=(r[a]-r[0])/365;o-=i*t[a]/Math.pow(n,i+1)}return o},i=[],u=!1,f=!1,s=0;s<e.length;s++)i[s]=0===s?0:i[s-1]+365,e[s]>0&&(u=!0),e[s]<0&&(f=!0);if(!u||!f)throw"Values should contain at least one positive value and one negative value";var h,c,p,v=n=void 0===r?.1:n,g=!0;do{h=v-(p=o(e,i,v))/a(e,i,v),c=Math.abs(h-v),v=h,g=c>1e-10&&Math.abs(p)>1e-10}while(g);return v},IPMT:Vt,ISPMT:function(t,r,e,n){var o=F(t),a=F(r),i=F(e);return F(n)*o*(a/i-1)},NPV:function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];for(var e=O(t).map((function(t){return F(t)})),n=F(e[0]),o=0,a=1;a<e.length;a++)o+=e[a]/Math.pow(1+n,a);return o},NOMINAL:function(t,r){var e=F(t),n=F(r);if(e<=0)throw"Rate cannot be less then or equal to zero";if(n<1)throw"Periods cannot be less then 1";return n=parseInt(""+n,10),(Math.pow(e+1,1/n)-1)*n},NPER:function(t,r,e,n,o){void 0===n&&(n=0),void 0===o&&(o=0);var a=F(t),i=F(r),u=F(e),f=F(n),s=F(o),h=i*(1+a*s)-f*a,c=u*a+i*(1+a*s);return Math.log(h/c)/Math.log(1+a)},PDURATION:function(t,r,e){var n=F(t),o=F(r),a=F(e);if(n<=0)throw"Rate cannot be less then or equal to zero";return(Math.log(a)-Math.log(o))/Math.log(1+n)},PPMT:function(t,r,e,n,o,a){void 0===o&&(o=0),void 0===a&&(a=0);var i=F(t),u=F(r),f=F(e),s=F(n),h=F(o),c=F(a);return Ut(i,f,s,h,c)-Vt(i,u,f,s,h,c)},PV:function(t,r,e,n,o){void 0===n&&(n=0),void 0===o&&(o=0);var a=F(t),i=F(r),u=F(e),f=F(n),s=F(o);return 0===a?-u*i-f:((1-Math.pow(1+a,i))/a*u*(1+a*s)-f)/Math.pow(1+a,i)},SYD:function(t,r,e,n){var o=F(t),a=F(r),i=F(e);return(o-a)*(i-F(n)+1)*2/(i*(i+1))},TBILLPRICE:function(t,r,e){var n=P(t),o=P(r),a=F(e);if("number"==typeof a&&o>n)return 100*(1-a*Math.round((o.getTime()-n.getTime())/864e5)/360)},TBILLYIELD:function(t,r,e){var n=P(t),o=P(r),a=F(e);if("number"==typeof a&&o>n)return(100-a)/a*360/Math.round((o.getTime()-n.getTime())/864e5)}}),Yt={number:wt,string:It,date:Lt,other:Pt,information:Ft,financial:Xt},Ht=e(e(e(e(e(e({},wt),It),Lt),Pt),Ft),Xt);var jt=Math.pow(10,8);function Bt(t,r,e){e.add?t.has(r)||e.add(r):t.add(r)}function zt(t){if(t.keys)return Array.from(t.keys());var r=[];return t.forEach((function(t,e){return r.push(e)})),r}function Gt(t){if(t.values)return t.values();var r=[];t.forEach((function(t,e){return r.push(e)}));var e=0;return{add:function(t){r.push(t)},next:function(){var t=r[e];return{done:++e>r.length,value:t}}}}var qt=function(){function t(t){var r=this;(t=t||{get:null,set:null})&&(this._getter=t.get,this._setter=t.set),this._parser=m,this._printer=E,this._parseContext={name:function(){},pageName:function(){return""},pageObj:function(){return null},page:function(){return 0},z:0},this.$count=0,this._data=new Map,this._triggers=new Map,this._holders={},this._context={v:function(t){if(-1===t)throw new Error;var e=r._getter(t);return void 0===e?null:e},r:function(t,e){var n=[];return u(t,e,(function(t){return n.push(r._getter(t))})),n},m:Ht,e:function(t){throw t},p:function(t){return r.getPlaceholder(t)}}}return t.prototype.setValue=function(t,r,e,n){""===r&&(r=null),this._removeTriggers(t,null),this._setter(t,r,e)&&(n||this.trigger(t))},t.prototype.clean=function(t){this._removeTriggers(t,null)},t.prototype.getValue=function(t){return this._getter(t)},t.prototype.setPlaceholder=function(t,r){var e=this;"*"===t?Object.entries(r).forEach((function(t){return e.setPlaceholder(t[0],t[1])})):(null===r?delete this._holders[t]:this._holders[t]=r,this.each((function(r,n){(function(t,r,e){for(var n=0;n<t.length;n+=3)if(2===t[n]&&r.substr(t[n+1],t[n+2])==e)return!0;return!1})(n.code,n.source,t)&&e.setMath(r,n.source,e._parseContext)})))},t.prototype.getPlaceholder=function(t){if("*"===t)return this._holders;var r=this._holders[t];return void 0===r?null:r},t.prototype.setMath=function(t,r,e,n){var o=this._generate(r,e),a=this._setMathAt(t,o);n||this._execAndTrigger(a)},t.prototype.refresh=function(t){this._execAndTrigger(t)},t.prototype.getMath=function(t){return this._data.get(t)},t.prototype.trigger=function(t,r){var e=this._triggers.get(t);if(e){var n=!r;r||(r=new Set);for(var o=0;o<e.length;o++)r.add(e[o]);n&&this.triggerSet(r)}return null},t.prototype.triggerSet=function(t){for(var r=this,e=new Map;t.size;){var n=Gt(t),o=!1;t:for(var a=n.next();!a.done;a=n.next()){var i=this._data.get(a.value),u=e.get(a.value);if(!u||(1==u&&(u=this._check_for_loops(a.value,i.triggers,e)),2!=u)){var f=i.triggers;if(f)for(var s=0;s<f.length;s++)if(t.has(f[s]))continue t;this._execAndTrigger(a.value,t),u||e.set(a.value,1),t.delete(a.value),o=!0}}if(!o)return void t.forEach((function(e){return r._errorAndTrigger(e,t)}))}},t.prototype._check_for_loops=function(t,r,e){var n=new Set;r.forEach((function(t){return n.add(t)}));for(var o=Gt(n),a=o.next();!a.done;a=o.next()){if(a.value==t)return e.set(t,2),2;var i=e.get(a.value);if(i&&i>1)return e.set(t,i),i;var u=this._data.get(a.value);u&&u.triggers&&u.triggers.forEach((function(t){return Bt(n,t,o)}))}return e.set(t,3),3},t.prototype._setMathAt=function(t,r){if(this._removeTriggers(t,r)){if(r.triggers)if(-1===r.triggers.indexOf(t))for(var n=0;n<r.triggers.length;n++){var o=r.triggers[n],a=this._triggers.get(o);void 0===a&&(a=[],this._triggers.set(o,a)),a.push(t)}else r=e(e({},r),{broken:3});return this._data.set(t,r),t}},t.prototype._removeTriggers=function(t,r){var e=this._data.get(t);if(!e)return!0;if(e===r)return!1;var n=e.triggers;if(n&&3!==e.broken)for(var o=0;o<n.length;o++){var a=n[o],i=this._triggers.get(a);if(i){var u=i.findIndex((function(r){return r===t}));i.splice(u,1)}}return this._data.delete(t),!0},t.prototype.parse=function(t,r){return this._parser(t,r||this._parseContext)},t.prototype.exec=function(t,r){var e=this._generate(t,r);return this._exec(e)},t.prototype.each=function(t){var r=this;zt(this._data).forEach((function(e){return t(e,r._data.get(e))}))},t.prototype.setLogger=function(t){this._err_handler=t},t.prototype._setErr=function(t,e){return t.broken=2,e&&this._err_handler&&this._err_handler(e),r[t.broken]},t.prototype._exec=function(t){if(t.broken>0&&2!==t.broken)return r[t.broken];try{var e=t.exec(this._context);return t.broken=0,"number"==typeof e?isFinite(e)?Math.round(e*jt)/jt:this._setErr(t):e}catch(r){return this._setErr(t,r)}},t.prototype.toString=function(t,r){return f(t,r||this._parseContext)},t.prototype.regenerate=function(t,r,n){var o=this;n=e({},n||this._parseContext),zt(this._data).forEach((function(e){var a=!1,u=o._data.get(e),s=i(e);if(r&&s===t)o._removeTriggers(e,null);else{for(var h=0;h<u.code.length;h+=3)if(9===u.code[h]&&i(u.code[h+1])===t){a=!0;break}a&&(n.z=s,r?o.setMath(e,u.source,n):(u.source=f(u,n),u.code=o._parser(u.source,n).code))}}))},t.prototype.recalculate=function(t,r){var n=this;r=e({},r||this._parseContext);var o=new Set;this.each((function(e){if(t){var a=n._data.get(e);if(a.broken&&2!==a.broken)return r.z=i(e),void n.setMath(e,a.source,r)}o.add(e)})),this.triggerSet(o)},t.prototype._generate=function(t,r,e){var n=e||this._parser(t,r||this._parseContext);return this._printer(n),n.triggers=function(t){for(var r=[],e=t.code,n=e.length,o=0;o<n;o+=3){switch(e[o]){case 7:case 6:var a=e[o+4];r.push(a);break;case 8:u(e[o+4],e[o+7],(function(t){return r.push(t)}))}}if(r.length>10){var i=new Set;r=r.filter((function(t){return!i.has(t)&&(i.add(t),!0)}))}return r.length?r:null}(n),n},t.prototype._execAndTrigger=function(t,r){this.$count+=1;var e=this._data.get(t);if(e){var n=this._exec(e);this._setter(t,n)&&this.trigger(t,r)}},t.prototype._errorAndTrigger=function(t,r){var e=this._data.get(t),n=this._setErr(e);this._setter(t,n)&&this.trigger(t,r)},t.prototype.debug=function(t){console.log(function(t){for(var r=t.code,e=t.source,n="",o=r.length,a=0;a<o;a+=3){var i=r[a],u=void 0;switch(i){case 4:u="method";break;case 1:u="text";break;case 5:u="page";break;case 2:u="holder";break;case 6:u="name";break;case 7:u="arg";break;case 8:u="range";break;case 9:u="data";break;case 10:u="op";break;case 11:u="number";break;case 3:u="error";break;case 12:u="extra"}n+=9===i?"              "+r[a+1]+" x "+r[a+2]+")\n":"["+u+"]"+_(u)+e.substr(r[a+1],r[a+2])+"\n"}return n}(this.parse(t)))},t.prototype.transpose=function(t,r,e,a){var i=this;a=a||this._parseContext;var u=o(t),f=u[0],s=u[1],h=u[2],c=[],p=new Map,v=new Map;zt(this._data).forEach((function(t){var u=o(t),g=u[0],l=u[1],b=u[2],d=i._data.get(t),M=i._transpose(d,f,s,r,e,a),y=t;if(b===h&&(l>=s||g>=f)&&(y=n(g>=f?g+r:g,l>=s?l+e:l,b)),d!==M||t!==y){if(v.set(t,M),b===h&&(e<0&&l>=s&&l<s-e||r<0&&g>=f&&g<f-r))return;p.set(y,M),c.push(y)}})),zt(p).forEach((function(t){return i._setMathAt(t,p.get(t))})),Array.from(v.keys()).forEach((function(t){p.has(t)||i._removeTriggers(t,null)}));for(var g=new Set,l=0;l<c.length;l++)g.add(c[l]);this.triggerSet(g)},t.prototype.transposeMath=function(t,r,e,n){return"string"==typeof t&&(t=this.parse(t,n)),this._transpose(t,-1,-1,r,e,n||this._parseContext).source},t.prototype._transpose=function(t,r,e,a,i,u){for(var s=!0,h=t.code,c=!(r<0||e<0),p=0;p<h.length;p+=3)if(7===h[p]){var v=o(h[p+4]),g=v[0],l=v[1],b=v[2];if(u.z!==b)continue;var d=h[p+5];if(!c&&3==d)continue;(c||0==(1&d))&&g>=r&&(s&&(h=[].concat(h),s=!1),((g+=a)<r||g<0)&&(h[p]=3)),(c||0==(2&d))&&l>=e&&(s&&(h=[].concat(h),s=!1),((l+=i)<e||l<0)&&(h[p]=3)),s||(h[p+4]=n(g,l,b)),p+=3}else if(8===h[p]){var M=h[p+5],y=h[p+8];if(!c&&3===M&&3===y)continue;var m=o(h[p+4]),_=m[0],w=m[1],E=(b=m[2],o(h[p+7])),I=E[0],D=E[1];if(u.z!==b)continue;a&&((c||0==(1&M))&&(a>0?_>=r:_>r)&&(s&&(h=[].concat(h),s=!1),(_+=a)<0&&(h[p]=3)),(c||0==(1&y))&&I>=r&&(s&&(h=[].concat(h),s=!1),(I+=a)<_&&(h[p]=3))),i&&((c||0==(2&M))&&(i>0?w>=e:w>e)&&(s&&(h=[].concat(h),s=!1),(w+=i)<0&&(h[p]=3)),(c||0==(2&y))&&D>=e&&(s&&(h=[].concat(h),s=!1),(D+=i)<w&&(h[p]=3))),s||(h[p+4]=n(_,w,b),h[p+7]=n(I,D,b)),p+=6}if(s)return t;var T={code:h,broken:t.broken,source:t.source,triggers:null,exec:null};return T=this._parser(f(T,u),u),this._generate(T.source,u,T)},t}();var Wt=function(){function t(t,r,n){this._data=[],this._id=t,this._store=r,this._meta={},this._parseContext=e(e({},n),{z:t})}return t.prototype.getMeta=function(){return this._meta},t.prototype.setMeta=function(t){this._meta=e(e({},this._meta),t)},t.prototype.getID=function(){return this._id},t.prototype.cellID=function(t,r){return n(t,r,this._id)},t.prototype.getSize=function(){var t=this._data.length,r=0;return this._data.forEach((function(t){t&&t.length>r&&(r=t.length)})),[t,r]},t.prototype.getContext=function(){return this._parseContext},t.prototype.addRow=function(t,r){this._data.splice.apply(this._data,$t(t,r)),this._store.transpose(n(t,0,this._id),r,0,this._parseContext)},t.prototype.removeRow=function(t,r){this._data.splice(t,r),this._store.transpose(n(t,0,this._id),-r,0,this._parseContext)},t.prototype.addColumn=function(t,r){var e=$t(t,r);this._data.forEach((function(t){t&&t.splice.apply(t,e)})),this._store.transpose(n(0,t,this._id),0,r,this._parseContext)},t.prototype.removeColumn=function(t,r){this._data.forEach((function(e){e&&e.splice(t,r)})),this._store.transpose(n(0,t,this._id),0,-r,this._parseContext)},t.prototype.setCell=function(t,r,n){var o=this._data[t];o||(o=this._data[t]=[]);var a=o[r];o[r]=a?e(e(e({},a),n),{value:a.value}):n,void 0!==n.value&&this.setValue(t,r,n.value)},t.prototype.setValue=function(t,r,e,o){"string"==typeof e&&e.length>1&&"="===e[0]?this._store.setMath(n(t,r,this._id),e.substr(1),this._parseContext):this._store.setValue(n(t,r,this._id),e,o)},t.prototype.getCell=function(t,r,e){var n=this._data[t],o=n?n[r]:null;return o||!e||(n||(n=this._data[t]=[]),(o=n[r])||(o=n[r]={value:""})),o},t.prototype.getValue=function(t,r,e){if(e){var o=this._store.getMath(n(t,r,this._id));if(o)return"="+o.source}var a=this.getCell(t,r,!1);return a?a.value:null},t.prototype.getRange=function(t,r,e,n){for(var o=[],a=t;a<=e;a++)for(var i=r;i<=n;i++)o.push(this.getValue(a,i,!1));return o},t.prototype.getCellRange=function(t,r,e,n){for(var o=[],a=t;a<=e;a++)for(var i=r;i<=n;i++)o.push(this.getCell(a,i));return o},t.prototype.eachCell=function(t){this._data.forEach((function(r,e){r&&r.forEach((function(r,n){r&&t(e,n,r)}))}))},t.prototype.serialize=function(t){var r=this,o=[];return this.eachCell((function(a,i,u){if(u=e({},u),t){var f=r._store.getMath(n(a,i,r.getID()));f&&(u.value="="+f.source)}o.push([a,i,u])})),o},t.prototype.parse=function(t,r){var o=this;this._store.each((function(t){i(t)===o._id&&o._store.clean(t)})),this._data=[];var a=new Set;t.forEach((function(t){var i=t[0],u=t[1],f=t[2],s=o._data[i];s||(s=o._data[i]=[]);var h=(f=s[u]=e({},f)).value;if(h)if("string"==typeof h&&h.length>1&&"="===h[0]){var c=n(i,u,o._id),p=h.substr(1);o._store.setMath(c,p,o.getContext(),!0),a.add(c)}else if(r){f.value=null;c=n(i,u,o._id);o._store.setValue(c,h,null,!0),o._store.trigger(c,a)}})),this._store.triggerSet(a)},t}();function $t(t,r){for(var e=[t,0],n=0;n<r;n++)e.push(null);return e}var Kt=function(){function t(t,r,e){this._ranges=new Map,this._counter=1,this._rangeOrder=[],this._store=t,this._page=r,this._pageGetter=e}return t.prototype.get=function(t){return this._store.getMath(this._ranges.get(t))},t.prototype.toId=function(t){return this._ranges.get(t)},t.prototype.add=function(t,r){var e=this._ranges.get(t)||this._next_id();this._store.setMath(e,r,this._page.getContext()),this._ranges.set(t,e),this._refresh(t)},t.prototype.remove=function(t){this._ranges.delete(t),this._counter=1,this._refresh(t)},t.prototype.serialize=function(){var t=this;return Array.from(this._ranges.keys()).map((function(r){return[r,t.get(r).source]}))},t.prototype.parse=function(t){var r=this;t.forEach((function(t){return r.add(t[0],t[1])}))},t.prototype._refresh=function(t){var r=this,e=t.indexOf("!"),n="";-1!==e&&(n=t.substr(0,e),t=t.substr(e+1)),this._store.each((function(e,o){if(function(t,r,e,n){for(var o=0;o<t.length;o+=3)if(6===t[o]){if(""!==e){if(5===t[o-3]&&r.substr(t[o-2],t[o-1])!==e)continue;return!0}if(r.substr(t[o+1],t[o+2])===n)return!0}return!1}(o.code,o.source,n,t)){var a=i(e);r._store.setMath(e,o.source,r._pageGetter(a).getContext())}}))},t.prototype._next_id=function(){for(;this._rangeOrder[this._counter];)this._counter++;return this._rangeOrder[this._counter]=!0,n(this._counter,0,this._page.getID())},t.prototype.renamePage=function(t,r){var e=this;t+="!",r&&(r+="!"),this._ranges.forEach((function(n,o,a){0===o.indexOf(t)&&(r?a.set(o.replace(t,r),n):e._store.clean(n),a.delete(o))}))},t}();var Qt=function(){function t(){var t=this;this._pages=[],this._pageNames=[],this._pageName2ID=new Map,this._pCounter=0,this._parseContext={page:function(r){return t._pageName2ID.get(r)},pageName:function(r){return t._pageNames[r]},pageObj:function(r){return t._pages[r]},name:function(r,e,n){var o,a=r.length,i=e.substr(r[a-2],r[a-1]);if(5===r[a-6]){var u=e.substr(r[a-5],r[a-4]);o=t._ranges.toId(u+"!"+i)||t._ranges.toId(i)}else o=t._ranges.toId(n.pageName(n.z)+"!"+i)||t._ranges.toId(i);r.push(9,o||-1,0)},z:0},this._store=new qt({get:function(r){var e=o(r),n=e[0],a=e[1],i=e[2];return t._pages[i].getValue(n,a)},set:function(r,e,n){var a=o(r),i=a[0],u=a[1],f=a[2],s=t._pages[f].getCell(i,u,!0);return null==n&&(n=s.$format||0),s.$format=n,"string"==typeof e&&1!=n&&e&&parseFloat(e)==e&&(e=parseFloat(e)),s.value!==e&&(s.value=e,!0)}});var r=this._pages[63]=new Wt(63,this._store,this._parseContext);this._ranges=new Kt(this._store,r,this.getPage.bind(this))}return t.prototype.addPage=function(t){for(;this._pages[this._pCounter];)this._pCounter++;var r=this._pCounter,e=new Wt(r,this._store,this._parseContext);return this._pageName2ID.set(t,r),this._pages[r]=e,this._pageNames[r]=t,e},t.prototype.renamePage=function(t,r){if(t!==r){var e=this._pageName2ID.get(t);this._pageName2ID.delete(t),this._pageName2ID.set(r,e),this._pageNames[e]=r,this._ranges.renamePage(t,r);var n=this._pages[e].getContext();this._store.regenerate(e,!1,n)}},t.prototype.removePage=function(t){var r=this._pageName2ID.get(t),e=this._pages[r].getContext();this._pageName2ID.delete(t),this._pages[r]=this._pageNames[r]=null,this._pCounter=0,this._ranges.renamePage(t,null),this._store.regenerate(r,!0,e)},t.prototype.getPage=function(t){return"string"==typeof t&&(t=this._pageName2ID.get(t)),this._pages[t]},t.prototype.getRanges=function(){return this._ranges},t.prototype.getStore=function(){return this._store},t}();exports.D_COMMON=0,exports.D_STRING=1,exports.DataPage=Wt,exports.DataStore=Qt,exports.Store=qt,exports.T_ARG=7,exports.T_DATA=9,exports.T_ERROR=3,exports.T_METHOD=4,exports.T_NAME=6,exports.T_NUMBER=11,exports.T_OPERATOR=10,exports.T_PAGE=5,exports.T_PLACEHOLDER=2,exports.T_RANGE=8,exports.T_SPACE=12,exports.T_TEXT=1,exports.addMethod=function(t,r){Ht[t]=r},exports.column=function(t){return t>>6&4095},exports.fromId=o,exports.methodGroups=Yt,exports.methods=Ht,exports.page=i,exports.row=a,exports.str2id=function(t){var r=[];return y(r,t,0),r[1]},exports.str2pos=function(t){var r=[];return y(r,t,0),o(r[1]).slice(0,2)},exports.str2range=function(t){var r=[];t.split(":").map((function(t){return y(r,t,0)}));var e=o(r[1]),n=e[0],a=e[1],i=o(r[4]);return[n,a,i[0],i[1]]},exports.toId=n;
//# sourceMappingURL=muon.js.map


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getExcelDateFromJs(jsDate) {
    var returnDateTime = 25569 +
        (jsDate.getTime() - jsDate.getTimezoneOffset() * 60000) / (86400 * 1000);
    return returnDateTime;
}
exports.getExcelDateFromJs = getExcelDateFromJs;
function excelDateToJSDate(number) {
    return new Date(Math.round((number - 25569) * 86400 * 1000));
}
exports.excelDateToJSDate = excelDateToJSDate;
function addDay(d, count) {
    if (count === void 0) { count = 1; }
    return new Date(d.getFullYear(), d.getMonth(), d.getDate() + count);
}
exports.addDay = addDay;
function dateDiff(d1, d2) {
    var t2 = d2.getTime();
    var t1 = d1.getTime();
    return parseInt("" + (t2 - t1) / (24 * 3600 * 1000));
}
exports.dateDiff = dateDiff;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getWidth(columns, colspan, index) {
    var cols = columns.filter(function (_a) {
        var hidden = _a.hidden;
        return !hidden;
    });
    if (!colspan) {
        return cols[index].$width;
    }
    return cols.reduce(function (width, _a, i) {
        var $width = _a.$width;
        width += i >= index && i < index + colspan ? $width : 0;
        return width;
    }, 0);
}
exports.getWidth = getWidth;
function getHeight(dataRows, rowspan, index) {
    var rows = dataRows.filter(function (_a) {
        var hidden = _a.hidden;
        return !hidden;
    });
    if (!rowspan) {
        return rows[index].$height;
    }
    return rows.reduce(function (height, _a, i) {
        var $height = _a.$height;
        height += i >= index && i < index + rowspan ? $height : 0;
        return height;
    }, 0);
}
exports.getHeight = getHeight;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var html_1 = __webpack_require__(2);
exports.scrollViewConfig = {
    enable: false,
    autoHide: true,
    timeout: 1000,
    scrollHandler: function () { },
};
var ScrollView = /** @class */ (function () {
    function ScrollView(getRootView, config) {
        var _a;
        var _this = this;
        if (config === void 0) { config = {}; }
        this.config = core_1.extend({
            enable: exports.scrollViewConfig.enable,
            autoHide: exports.scrollViewConfig.autoHide,
            timeout: exports.scrollViewConfig.timeout,
            scrollHandler: exports.scrollViewConfig.scrollHandler,
        }, config);
        this._wheelName = html_1.isIE() ? "onmousewheel" : "onwheel";
        this._getRootView = getRootView;
        this._scrollYTop = this._scrollXLeft = this._runnerYTop = this._runnerXLeft = this._runnerHeight = this._runnerWidth = 0;
        this._visibleYArea = this._visibleXArea = 1;
        this._scrollWidth = html_1.getScrollbarWidth();
        this._scrollHeight = html_1.getScrollbarHeight();
        this._handlers = (_a = {
                onscroll: function (e) {
                    _this.config.scrollHandler(e);
                    _this.update();
                }
            },
            _a[this._wheelName] = function (e) {
                var isY = !!html_1.locateNodeByClassName(e.target, "y-scroll");
                e.preventDefault();
                var sign = (e.deltaY || -e.wheelDelta) > 0 ? 1 : -1;
                var delta = sign * 40;
                var area = _this._getRefs().area;
                if (isY) {
                    var maxBottom = area.scrollHeight - _this._runnerHeight;
                    var newScrollTop = _this._scrollYTop + delta;
                    if (newScrollTop < 0) {
                        area.scrollTop = 0;
                    }
                    else if (newScrollTop > maxBottom) {
                        area.scrollTop = maxBottom;
                    }
                    else {
                        area.scrollTop = newScrollTop;
                    }
                }
                else {
                    var maxRight = area.scrollWidth - _this._runnerWidth;
                    var newScrollLeft = _this._scrollXLeft + delta;
                    if (newScrollLeft < 0) {
                        area.scrollLeft = 0;
                    }
                    else if (newScrollLeft > maxRight) {
                        area.scrollLeft = maxRight;
                    }
                    else {
                        area.scrollLeft = newScrollLeft;
                    }
                }
                _this.update();
            },
            _a.onmousedownRunner = function (mouseDownEv) {
                mouseDownEv.preventDefault();
                var isY = !!html_1.locateNodeByClassName(mouseDownEv.target, "y-scroll");
                var _a = _this._getRefs(), area = _a.area, runnerY = _a.runnerY, runnerX = _a.runnerX;
                var rect = area.getBoundingClientRect();
                var top = rect.top + window.pageYOffset;
                var bottom = rect.bottom + window.pageYOffset;
                var maxBottom = area.scrollHeight - _this._runnerHeight;
                var deltaY = mouseDownEv.pageY - runnerY.getBoundingClientRect().top - window.pageYOffset;
                var left = rect.left + window.pageXOffset;
                var right = rect.right + window.pageXOffset;
                var maxRight = area.scrollWidth - _this._runnerWidth;
                var deltaX = mouseDownEv.pageX - runnerX.getBoundingClientRect().left - window.pageXOffset;
                var mouseMove = function (e) {
                    if (isY) {
                        var y = e.pageY - deltaY;
                        if (y <= top) {
                            area.scrollTop = 0;
                        }
                        else if (y > bottom) {
                            area.scrollTop = maxBottom;
                        }
                        else {
                            area.scrollTop = (y - top) / _this._visibleYArea;
                        }
                    }
                    else {
                        var x = e.pageX - deltaX;
                        if (x <= left) {
                            area.scrollLeft = 0;
                        }
                        else if (x > right) {
                            area.scrollLeft = maxRight;
                        }
                        else {
                            area.scrollLeft = (x - left) / _this._visibleXArea;
                        }
                    }
                    _this.update();
                };
                var mouseUp = function () {
                    document.removeEventListener("mousemove", mouseMove);
                    document.removeEventListener("mouseup", mouseUp);
                    document.body.classList.remove("dhx-no-select");
                };
                document.body.classList.add("dhx-no-select");
                document.addEventListener("mousemove", mouseMove);
                document.addEventListener("mouseup", mouseUp);
            },
            _a.onmousedownArea = function (e) {
                if (html_1.locateNodeByClassName(e, "scroll-runner"))
                    return;
                e.preventDefault();
                var isY = !!html_1.locateNodeByClassName(e.target, "y-scroll");
                var _a = _this._getRefs(), area = _a.area, runnerY = _a.runnerY, runnerX = _a.runnerX;
                if (isY) {
                    area.scrollTop += (e.pageY - runnerY.getBoundingClientRect().top) / _this._visibleYArea;
                }
                else {
                    area.scrollLeft += (e.pageX - runnerX.getBoundingClientRect().left) / _this._visibleXArea;
                }
                _this.update();
            },
            _a.onmouseenter = function (e) {
                if (html_1.locateNodeByClassName(e, "scroll-runner"))
                    return;
                var refs = _this._getRefs();
                if (!refs) {
                    return;
                }
                var isY = !!html_1.locateNodeByClassName(e.target, "y-scroll");
                var areaX = refs.areaX, areaY = refs.areaY;
                if (isY && _this._runnerHeight > 0) {
                    areaY.style.background = "#eee";
                }
                else if (!isY && _this._runnerWidth > 0) {
                    areaX.style.background = "#eee";
                }
            },
            _a.onmouseleave = function (e) {
                if (html_1.locateNodeByClassName(e, "scroll-runner"))
                    return;
                var refs = _this._getRefs();
                if (!refs) {
                    return;
                }
                var isY = !!html_1.locateNodeByClassName(e.target, "y-scroll");
                var areaX = refs.areaX, areaY = refs.areaY;
                if (isY && _this._runnerHeight > 0) {
                    areaY.style.background = "transparent";
                }
                else if (!isY && _this._runnerWidth > 0) {
                    areaX.style.background = "transparent";
                }
            },
            _a);
    }
    ScrollView.prototype.enable = function () {
        this.config.enable = true;
        this._getRootView().redraw();
    };
    ScrollView.prototype.disable = function () {
        this.config.enable = false;
        this._getRootView().redraw();
    };
    ScrollView.prototype.render = function (element, uid) {
        var _a, _b;
        var _this = this;
        if (uid === void 0) { uid = ""; }
        if (this._scrollWidth === 0 || !this.config.enable || !element.length) {
            return element;
        }
        if (uid)
            this._uid = uid;
        var scrollView = this.config.enable
            ? [
                dom_1.el(".y-scroll", (_a = {},
                    _a[this._wheelName] = this._handlers[this._wheelName],
                    _a._ref = uid ? "scroll-y-area-" + uid : "scroll-y-area",
                    _a.onmousedown = this._handlers.onmousedownArea,
                    _a.onmouseenter = this._handlers.onmouseenter,
                    _a.onmouseleave = this._handlers.onmouseleave,
                    _a.style = {
                        width: "6px",
                        height: "100%",
                        right: 0,
                        top: 0,
                        position: "absolute",
                    },
                    _a), [
                    dom_1.el(".scroll-runner", {
                        _ref: uid ? "scroll-y-runner-" + uid : "scroll-y-runner",
                        onmousedown: this._handlers.onmousedownRunner,
                        style: {
                            height: this._runnerHeight + "px",
                            top: this._runnerYTop,
                        },
                    }),
                ]),
                dom_1.el(".x-scroll", (_b = {},
                    _b[this._wheelName] = this._handlers[this._wheelName],
                    _b._ref = uid ? "scroll-x-area-" + uid : "scroll-x-area",
                    _b.onmousedown = this._handlers.onmousedownArea,
                    _b.onmouseenter = this._handlers.onmouseenter,
                    _b.onmouseleave = this._handlers.onmouseleave,
                    _b.style = {
                        width: "100%",
                        height: "6px",
                        left: 0,
                        bottom: 0,
                        position: "absolute",
                    },
                    _b), [
                    dom_1.el(".scroll-runner", {
                        _ref: uid ? "scroll-x-runner-" + uid : "scroll-x-runner",
                        onmousedown: this._handlers.onmousedownRunner,
                        style: {
                            width: this._runnerWidth + "px",
                            left: this._runnerXLeft,
                        },
                    }),
                ]),
            ]
            : null;
        return dom_1.el(".scroll-view-wrapper", [
            dom_1.el(".scroll-view", {
                onscroll: this._handlers.onscroll,
                _ref: uid ? "scroll-view-" + uid : "scroll-view",
                _hooks: {
                    didInsert: function () {
                        _this.update();
                    },
                    didRecycle: function () {
                        _this.update();
                    },
                },
                style: {
                    width: "calc(100% + " + this._scrollWidth + "px)",
                    height: "calc(100% + " + this._scrollHeight + "px)",
                },
            }, element),
        ].concat(scrollView));
    };
    ScrollView.prototype.update = function () {
        var refs = this._getRefs();
        if (!refs) {
            return;
        }
        var area = refs.area, areaX = refs.areaX, areaY = refs.areaY, runnerY = refs.runnerY, runnerX = refs.runnerX;
        this._visibleYArea = area.clientHeight / area.scrollHeight;
        this._visibleXArea = area.clientWidth / area.scrollWidth;
        this._scrollYTop = area.scrollTop;
        this._scrollXLeft = area.scrollLeft;
        this._runnerYTop = this._scrollYTop * this._visibleYArea;
        this._runnerXLeft = this._scrollXLeft * this._visibleXArea;
        this._runnerHeight = this._visibleYArea < 1 ? area.clientHeight * this._visibleYArea : 0;
        this._runnerWidth = this._visibleXArea < 1 ? area.clientWidth * this._visibleXArea : 0;
        var initialTop = runnerY.style.top;
        var initialLeft = runnerX.style.left;
        // update dom
        runnerY.style.opacity = 1;
        runnerY.style.top = this._runnerYTop + "px";
        runnerY.style.height = this._runnerHeight + "px";
        runnerX.style.opacity = 1;
        runnerX.style.left = this._runnerXLeft + "px";
        runnerX.style.width = this._runnerWidth + "px";
        if (initialTop !== runnerY.style.top) {
            areaY.style.opacity = 0.9;
            areaY.style.width = "10px";
        }
        if (initialLeft !== runnerX.style.left) {
            areaX.style.opacity = 0.9;
            areaX.style.height = "10px";
        }
        if (this.config.autoHide) {
            !this._autoHideFunc &&
                (this._autoHideFunc = core_1.debounce(function () {
                    runnerY.style.opacity = 0;
                    areaY.style.width = "6px";
                    runnerX.style.opacity = 0;
                    areaX.style.height = "6px";
                }, this.config.timeout));
        }
        else {
            this._autoHideFunc = core_1.debounce(function () {
                areaY.style.width = "6px";
                areaX.style.height = "6px";
            }, this.config.timeout);
        }
        this._autoHideFunc();
    };
    ScrollView.prototype._getRefs = function () {
        var rootView = this._getRootView();
        var refsCheck = !!(rootView.refs["scroll-view"] &&
            (rootView.refs["scroll-x-runner"] || rootView.refs["scroll-y-runner"]));
        var refsIdCheck = !!(this._uid &&
            rootView.refs["scroll-view-" + this._uid] &&
            (rootView.refs["scroll-x-runner-" + this._uid] || rootView.refs["scroll-y-runner-" + this._uid]));
        if (rootView.refs) {
            if (refsCheck) {
                return {
                    area: rootView.refs["scroll-view"].el,
                    areaY: rootView.refs["scroll-y-area"].el,
                    areaX: rootView.refs["scroll-x-area"].el,
                    runnerY: rootView.refs["scroll-y-runner"].el,
                    runnerX: rootView.refs["scroll-x-runner"].el,
                };
            }
            else if (refsIdCheck) {
                return {
                    area: rootView.refs["scroll-view-" + this._uid].el,
                    areaY: rootView.refs["scroll-y-area-" + this._uid].el,
                    areaX: rootView.refs["scroll-x-area-" + this._uid].el,
                    runnerY: rootView.refs["scroll-y-runner-" + this._uid].el,
                    runnerX: rootView.refs["scroll-x-runner-" + this._uid].el,
                };
            }
        }
    };
    return ScrollView;
}());
exports.ScrollView = ScrollView;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SelectionEvents;
(function (SelectionEvents) {
    SelectionEvents["beforeUnSelect"] = "beforeunselect";
    SelectionEvents["afterUnSelect"] = "afterunselect";
    SelectionEvents["beforeSelect"] = "beforeselect";
    SelectionEvents["afterSelect"] = "afterselect";
})(SelectionEvents = exports.SelectionEvents || (exports.SelectionEvents = {}));


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_data_1 = __webpack_require__(8);
exports.DataEvents = ts_data_1.DataEvents;
var NavigationBarEvents;
(function (NavigationBarEvents) {
    NavigationBarEvents["inputCreated"] = "inputCreated";
    NavigationBarEvents["click"] = "click";
    NavigationBarEvents["openMenu"] = "openMenu";
    NavigationBarEvents["beforeHide"] = "beforeHide";
    NavigationBarEvents["afterHide"] = "afterHide";
    NavigationBarEvents["inputFocus"] = "inputFocus";
    NavigationBarEvents["inputBlur"] = "inputBlur";
    NavigationBarEvents["inputChange"] = "inputChange";
})(NavigationBarEvents = exports.NavigationBarEvents || (exports.NavigationBarEvents = {}));


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var types_1 = __webpack_require__(6);
var AddColumn_1 = __webpack_require__(152);
var AddRow_1 = __webpack_require__(153);
var AddSheet_1 = __webpack_require__(154);
var DeleteColumn_1 = __webpack_require__(155);
var DeleteRow_1 = __webpack_require__(156);
var DeleteSheet_1 = __webpack_require__(157);
var GroupAction_1 = __webpack_require__(158);
var GroupColAction_1 = __webpack_require__(159);
var GroupRowAction_1 = __webpack_require__(160);
var LockCell_1 = __webpack_require__(161);
var RemoveCellStyles_1 = __webpack_require__(162);
var RenameSheet_1 = __webpack_require__(163);
var SetCellFormat_1 = __webpack_require__(164);
var SetCellStyle_1 = __webpack_require__(165);
var SetCellValue_1 = __webpack_require__(166);
var Clear_1 = __webpack_require__(167);
var ClearSheet_1 = __webpack_require__(168);
exports.actions = {
    setCellStyle: SetCellStyle_1.SetCellStyle,
    setCellValue: SetCellValue_1.SetCellValue,
    setCellFormat: SetCellFormat_1.SetCellFormat,
    removeCellStyles: RemoveCellStyles_1.RemoveCellStyles,
    lockCell: LockCell_1.LockCell,
    deleteRow: DeleteRow_1.DeleteRow,
    addRow: AddRow_1.AddRow,
    deleteColumn: DeleteColumn_1.DeleteColumn,
    addColumn: AddColumn_1.AddColumn,
    groupAction: GroupAction_1.GroupAction,
    groupRowAction: GroupRowAction_1.GroupRowAction,
    groupColAction: GroupColAction_1.GroupColAction,
    addSheet: AddSheet_1.AddSheet,
    deleteSheet: DeleteSheet_1.DeleteSheet,
    renameSheet: RenameSheet_1.RenameSheet,
    clear: Clear_1.Clear,
    clearSheet: ClearSheet_1.ClearSheet,
};
function getActionsPack(commandsPack, baseConfig) {
    var actionsPack = commandsPack.map(function (config) {
        var action = config.groupAction || config.action;
        if (action) {
            return new exports.actions[action](__assign(__assign({}, config), baseConfig));
        }
    });
    return {
        do: function () {
            actionsPack.map(function (action) { return action.do(); });
        },
        undo: function () {
            actionsPack.map(function (action) { return action.undo(); });
        },
    };
}
var ActionsManager = /** @class */ (function () {
    function ActionsManager(config) {
        this._config = config;
        this._actions = [];
        this._redoActions = [];
        this._sheets = [];
        this._redoSheets = [];
        this._dataStore = config.dataStore;
    }
    ActionsManager.prototype.execute = function (command, config) {
        if (Array.isArray(command)) {
            var actionsPack = getActionsPack(command, this._config);
            actionsPack.do();
            this._actions.push(actionsPack);
            this._sheets.push(this._config.spreadsheet.activeSheetName);
            return;
        }
        core_1.extend(config, this._config);
        if (exports.actions[command]) {
            var action = new exports.actions[command](config);
            action.do();
            if (config.action === types_1.Actions.addSheet ||
                config.action === types_1.Actions.deleteSheet ||
                config.action === types_1.Actions.renameSheet) {
                this._sheets.push(null);
            }
            else {
                this._sheets.push(this._config.spreadsheet.activeSheetName);
            }
            this._actions.push(action);
        }
    };
    ActionsManager.prototype.undo = function () {
        var action = this._actions.pop();
        if (action) {
            action.undo();
            var sheet = this._sheets.pop();
            if (sheet) {
                var activePage = this._dataStore.getPage(sheet);
                this._config.spreadsheet._changeSheet(activePage.getMeta().toolbarId);
            }
            this._redoActions.push(action);
            this._redoSheets.push(sheet);
        }
    };
    ActionsManager.prototype.redo = function () {
        var action = this._redoActions.pop();
        if (action) {
            action.do();
            var sheet = this._redoSheets.pop();
            if (sheet) {
                var activePage = this._dataStore.getPage(sheet);
                this._config.spreadsheet._changeSheet(activePage.getMeta().toolbarId);
            }
            this._actions.push(action);
            this._sheets.push(sheet);
        }
    };
    return ActionsManager;
}());
exports.ActionsManager = ActionsManager;


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(14);
var format_1 = __webpack_require__(13);
var main_1 = __webpack_require__(3);
function getColorpickerTemplate(color, icon) {
    return "<div class=\"dxi dxi-" + icon + " dhx_toolbar-button__icon dhx_toolbar-button__colorpicker\" style=\"border-bottom: solid 3px " + color + "\"></div>";
}
exports.getColorpickerTemplate = getColorpickerTemplate;
function updateToolbar(toolbar, cellInfo) {
    cellInfo = __assign({ locked: false, format: format_1.getFormat("common") }, cellInfo);
    var css = [];
    if (cellInfo.css) {
        css = typeof cellInfo.css === "string" ? cellInfo.css.split(" ") : cellInfo.css;
    }
    var customCssStyles = {};
    for (var _i = 0, css_1 = css; _i < css_1.length; _i++) {
        var styles_1 = css_1[_i];
        customCssStyles = __assign(__assign({}, customCssStyles), dhx.css.get(styles_1));
    }
    var styles = __assign({ color: "#4C4C4C", background: "#FFF", "text-align": "left", "vertical-align": "center", "font-style": "", "font-weight": "", "text-decoration": "" }, customCssStyles);
    var updateStyles = function (css) {
        for (var key in css) {
            switch (key) {
                case "color":
                    toolbar.data.update(key, {
                        html: getColorpickerTemplate(css[key] || "#4C4C4C", "format-color-text"),
                    });
                    break;
                case "background":
                case "background-color":
                    toolbar.data.update("background", {
                        html: getColorpickerTemplate(css[key] || "#FFF", "format-color-fill"),
                    });
                    break;
                case "text-align":
                    if (!toolbar.data.exists("halign"))
                        return;
                    var halign = "halign-" + css[key];
                    toolbar.setState({ "halign": halign });
                    toolbar.data.update("halign", { icon: toolbar.data.getItem(halign).icon });
                    break;
                case "vertical-align":
                    if (!toolbar.data.exists("valign"))
                        return;
                    var valign = "valign-" + css[key];
                    toolbar.setState({ "valign": valign });
                    toolbar.data.update("valign", { icon: toolbar.data.getItem(valign).icon });
                    break;
                case "font-weight":
                    toolbar.data.update("font-weight-bold", {
                        active: css[key] == "bold" || css[key] == "700",
                    });
                    break;
                case "font-style":
                    toolbar.data.update("font-style-italic", {
                        active: css[key] === "italic",
                    });
                    break;
                case "text-decoration":
                    toolbar.data.update("text-decoration-underline", {
                        active: css[key] === "underline",
                    });
                    break;
                default:
                    break;
            }
        }
    };
    updateStyles(styles);
    // reset format menu state
    var formatItem = toolbar.data.getItem("format");
    if (formatItem) {
        formatItem.items.map(function (item) { return (item.active = false); });
    }
    for (var key in cellInfo) {
        switch (key) {
            case "locked":
                if (toolbar.data.getItem("lock")) {
                    toolbar.data.update("lock", {
                        active: cellInfo[key],
                    });
                }
                break;
            case "format":
                // eslint-disable-next-line no-case-declarations
                var id = format_1.getDefaultFormatsMap()[cellInfo[key].mask] || "common";
                toolbar.data.getItem("format") &&
                    toolbar.data.update("format", {
                        value: format_1.getFormat(id).name || id,
                    });
                if (toolbar.data.getItem(id)) {
                    toolbar.data.update(id, {
                        active: true,
                    });
                }
                break;
            default:
                break;
        }
    }
}
exports.updateToolbar = updateToolbar;
function getToggledValue(page, cell, name, value) {
    var info = main_1.getCellInfo(cell, page);
    var css = dhx.css.get(info.css) || {};
    return css[name] ? "" : value;
}
exports.getToggledValue = getToggledValue;
function getFormatItem(format, example) {
    if (example === void 0) { example = "1500.31"; }
    var name = format.name;
    var val = format_1.getFormattedValue(example, format);
    return "<div class=\"dhx_format-item\"><span class=\"dhx_format-name\">" + (en_1.default[name] ||
        name) + " </span><span class=\"dhx_format-helper\">" + val + "</span></div>";
}
exports.getFormatItem = getFormatItem;
function getFormatsDropdown(config) {
    var formats = config.formats;
    return formats.map(function (format) { return ({
        id: format.id,
        css: "dhx_format-name-wrap",
        html: getFormatItem(format, format.example),
    }); });
}
exports.getFormatsDropdown = getFormatsDropdown;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RealPosition;
(function (RealPosition) {
    RealPosition["left"] = "left";
    RealPosition["right"] = "right";
    RealPosition["top"] = "top";
    RealPosition["bottom"] = "bottom";
    RealPosition["center"] = "center";
})(RealPosition = exports.RealPosition || (exports.RealPosition = {}));
var Position;
(function (Position) {
    Position["right"] = "right";
    Position["bottom"] = "bottom";
    Position["center"] = "center";
})(Position = exports.Position || (exports.Position = {}));
var MessageContainerPosition;
(function (MessageContainerPosition) {
    MessageContainerPosition["topLeft"] = "top-left";
    MessageContainerPosition["topRight"] = "top-right";
    MessageContainerPosition["bottomLeft"] = "bottom-left";
    MessageContainerPosition["bottomRight"] = "bottom-right";
})(MessageContainerPosition = exports.MessageContainerPosition || (exports.MessageContainerPosition = {}));


/***/ }),
/* 35 */
/***/ (function(module, exports) {

"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function HSVtoRGB(hsv) {
    var rgb = { r: 0, g: 0, b: 0 };
    var h = hsv.h / 60;
    var s = hsv.s;
    var v = hsv.v;
    var i = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch (i) {
        case 0:
            rgb.r = v;
            rgb.g = t;
            rgb.b = p;
            break;
        case 1:
            rgb.r = q;
            rgb.g = v;
            rgb.b = p;
            break;
        case 2:
            rgb.r = p;
            rgb.g = v;
            rgb.b = t;
            break;
        case 3:
            rgb.r = p;
            rgb.g = q;
            rgb.b = v;
            break;
        case 4:
            rgb.r = t;
            rgb.g = p;
            rgb.b = v;
            break;
        case 5:
            rgb.r = v;
            rgb.g = p;
            rgb.b = q;
            break;
    }
    for (var key in rgb) {
        rgb[key] = Math.round(rgb[key]);
    }
    return rgb;
}
exports.HSVtoRGB = HSVtoRGB;
function RGBToHex(rgb) {
    return Object.keys(rgb).reduce(function (hex, c) {
        var h = rgb[c].toString(16).toUpperCase();
        h = h.length === 1 ? "0" + h : h;
        return (hex += h);
    }, "#");
}
exports.RGBToHex = RGBToHex;
function HexToRGB(hex) {
    var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
    hex = hex.replace(shorthandRegex, function (_m, r, g, b) { return r + r + g + g + b + b; });
    var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
        }
        : null;
}
exports.HexToRGB = HexToRGB;
function RGBToHSV(rgb) {
    var h;
    var s;
    var r = rgb.r / 255;
    var g = rgb.g / 255;
    var b = rgb.b / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function (c) {
        return (v - c) / 6 / diff + 1 / 2;
    };
    if (diff === 0) {
        h = s = 0;
    }
    else {
        s = diff / v;
        var rdif = diffc(r);
        var gdif = diffc(g);
        var bdif = diffc(b);
        if (r === v) {
            h = bdif - gdif;
        }
        else if (g === v) {
            h = 1 / 3 + rdif - bdif;
        }
        else if (b === v) {
            h = 2 / 3 + gdif - rdif;
        }
        if (h < 0) {
            h += 1;
        }
        else if (h > 1) {
            h -= 1;
        }
    }
    return {
        h: Math.floor(h * 360),
        s: s,
        v: v,
    };
}
exports.RGBToHSV = RGBToHSV;
function HexToHSV(hex) {
    return RGBToHSV(HexToRGB(hex));
}
exports.HexToHSV = HexToHSV;
function isHex(hex) {
    return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
}
exports.isHex = isHex;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en = {
    cancel: "Cancel",
    select: "Select",
    rightClickToDelete: "Right click to delete",
    customColors: "Custom colors",
    addNewColor: "Add new color",
};
exports.default = en;


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(15);
var helpers_1 = __webpack_require__(16);
function toQueryString(data) {
    return Object.keys(data)
        .reduce(function (entries, key) {
        var value = typeof data[key] === "object" ? JSON.stringify(data[key]) : data[key];
        entries.push(key + "=" + encodeURIComponent(value));
        return entries;
    }, [])
        .join("&");
}
function inferResponseType(contentType) {
    if (!contentType) {
        return "text";
    }
    if (contentType.includes("json")) {
        return "json";
    }
    if (contentType.includes("xml")) {
        return "xml";
    }
    return "text";
}
function send(url, data, method, headers, responseType) {
    function parseResponse(responseText, genResponseType) {
        switch (genResponseType) {
            case "json": {
                return JSON.parse(responseText);
            }
            case "text": {
                return responseText;
            }
            case "xml": {
                var driver = helpers_1.toDataDriver(types_1.DataDriver.xml);
                if (driver) {
                    return driver.toJsonObject(responseText);
                }
                else {
                    return { parseError: "Incorrect data driver type: 'xml'" };
                }
            }
            default: {
                return responseText;
            }
        }
    }
    var allHeaders = headers || {};
    if (responseType) {
        allHeaders.Accept = "application/" + responseType;
    }
    if (method !== "GET") {
        allHeaders["Content-Type"] = allHeaders["Content-Type"] || "application/json";
    }
    if (method === "GET") {
        var urlData = data && typeof data === "object"
            ? toQueryString(data)
            : data && typeof data === "string"
                ? data
                : "";
        if (urlData) {
            url += !url.includes("?") ? "?" : "&";
            url += urlData;
        }
        data = null;
    }
    if (!window.fetch) {
        return new Promise(function (resolve, reject) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 300) {
                    if (responseType === "raw") {
                        resolve({
                            url: xhr.responseURL,
                            headers: xhr
                                .getAllResponseHeaders()
                                .trim()
                                .split(/[\r\n]+/)
                                .reduce(function (acc, cur) {
                                var kv = cur.split(": ");
                                acc[kv[0]] = kv[1];
                                return acc;
                            }, {}),
                            body: xhr.response,
                        });
                    }
                    if (xhr.status === 204) {
                        resolve();
                    }
                    else {
                        resolve(parseResponse(xhr.responseText, responseType || inferResponseType(xhr.getResponseHeader("Content-Type"))));
                    }
                }
                else {
                    reject({
                        status: xhr.status,
                        statusText: xhr.statusText,
                    });
                }
            };
            xhr.onerror = function () {
                reject({
                    status: xhr.status,
                    statusText: xhr.statusText,
                    message: xhr.responseText,
                });
            };
            xhr.open(method, url);
            for (var headerKey in allHeaders) {
                xhr.setRequestHeader(headerKey, allHeaders[headerKey]);
            }
            switch (method) {
                case "POST":
                case "DELETE":
                case "PUT":
                    xhr.send(data !== undefined ? JSON.stringify(data) : "");
                    break;
                case "GET":
                    xhr.send();
                    break;
                default:
                    xhr.send();
                    break;
            }
        });
    }
    else {
        return window
            .fetch(url, {
            method: method,
            body: data ? JSON.stringify(data) : null,
            headers: allHeaders,
        })
            .then(function (response) {
            if (response.ok) {
                var genResponseType = responseType || inferResponseType(response.headers.get("Content-Type"));
                if (genResponseType === "raw") {
                    return {
                        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore
                        // @ts-ignore
                        headers: Object.fromEntries(response.headers.entries()),
                        url: response.url,
                        body: response.body,
                    };
                }
                if (response.status !== 204) {
                    switch (genResponseType) {
                        case "json": {
                            return response.json();
                        }
                        case "xml": {
                            var driver_1 = helpers_1.toDataDriver(types_1.DataDriver.xml);
                            if (driver_1) {
                                return response.text().then(function (xmlData) { return driver_1.toJsonObject(xmlData); });
                            }
                            else {
                                return response.text();
                            }
                        }
                        default:
                            return response.text();
                    }
                }
            }
            else {
                return response.text().then(function (message) {
                    return Promise.reject({
                        status: response.status,
                        statusText: response.statusText,
                        message: message,
                    });
                });
            }
        });
    }
}
exports.ajax = {
    get: function (url, data, config) {
        return send(url, data, "GET", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    post: function (url, data, config) {
        return send(url, data, "POST", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    put: function (url, data, config) {
        return send(url, data, "PUT", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
    delete: function (url, data, config) {
        return send(url, data, "DELETE", config && config.headers, config !== undefined ? config.responseType : undefined);
    },
};

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var cells_1 = __webpack_require__(28);
var main_1 = __webpack_require__(11);
var types_1 = __webpack_require__(4);
var editors_1 = __webpack_require__(103);
var html_1 = __webpack_require__(2);
var data_1 = __webpack_require__(17);
function handleMouse(rowStart, colStart, conf, type, e) {
    colStart = html_1.locateNodeByClassName(e.target, "dhx_grid-fixed-cols-wrap") ? 0 : colStart;
    var target = html_1.locateNodeByClassName(e.target, "dhx_grid-cell");
    var targetSpan = html_1.locateNodeByClassName(e.target, "dhx_span-cell");
    if ((!target && !targetSpan) || !type) {
        return;
    }
    var rowNode = target ? target.parentNode : targetSpan;
    var bodyNode = rowNode.parentNode;
    var colIndex = target
        ? Array.prototype.indexOf.call(rowNode.childNodes, target)
        : conf.columns.findIndex(function (column) { return column.id === targetSpan.getAttribute("dhx_col_id"); });
    var columns = conf.columns.filter(function (col) { return !col.hidden; });
    var col = columns[colStart + colIndex];
    var rowIndex = target
        ? Array.prototype.indexOf.call(bodyNode.childNodes, rowNode)
        : Number(targetSpan.getAttribute("dhx_id")) - 1;
    var row = conf.data["" + ((target ? rowStart : 0) + rowIndex)];
    var systemEvent = type.toLocaleLowerCase().includes("touch");
    if (systemEvent) {
        conf._events.fire(type, [row, col, e]);
    }
    else {
        conf.events.fire(type, [row, col, e]);
    }
}
function getHandlers(row, column, conf) {
    return {
        onclick: [handleMouse, row, column, conf, types_1.GridEvents.cellClick],
        onmouseover: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseOver],
        onmousedown: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseDown],
        ondblclick: [handleMouse, row, column, conf, types_1.GridEvents.cellDblClick],
        oncontextmenu: [handleMouse, row, column, conf, types_1.GridEvents.cellRightClick],
        ontouchstart: [handleMouse, row, column, conf, types_1.GridEvents.cellMouseDown],
        ontouchmove: [handleMouse, row, column, conf, types_1.GridSystemEvents.cellTouchMove],
        ontouchend: [handleMouse, row, column, conf, types_1.GridSystemEvents.cellTouchEnd],
    };
}
exports.getHandlers = getHandlers;
function getTreeCell(content, row, col, conf) {
    var getCellAriaAttrs = function (col, ind) { return ({
        role: "gridcell",
        "aria-colindex": ind,
    }); };
    var getToggleAriaAttrs = function (row) { return ({
        role: "button",
        "aria-label": row.$opened ? "Collapse group" : "Expand group",
    }); };
    var isEditable = conf.$editable && conf.$editable.row === row.id && conf.$editable.col === col.id;
    var css = "";
    var cellAlign = col.align ? " dhx_align-" + col.align : "dhx_align-left";
    if (conf.dragMode && conf.dragItem === "row") {
        css +=
            (row.$drophere && !isEditable ? " dhx_grid-cell--drophere" : "") +
                (row.$dragtarget && !isEditable ? " dhx_grid-cell--dragtarget" : "") +
                (!isEditable ? " dhx_grid-cell--drag" : "");
    }
    var parentPadding = data_1.getTreeCellWidthOffset(row);
    return dom_1.el(".dhx_grid-cell", __assign({ class: "dhx_tree-cell " + (col.$cellCss[row.id] || "") + " " + (row.$items ? "dhx_grid-expand-cell" : "") +
            (" " + (isEditable ? "dhx_tree-editing-cell" : "") + " " + css) +
            cellAlign, style: {
            width: col.$width,
            height: row.$height,
            padding: !row.$items ? "0 0 0 " + parentPadding + "px" : 0,
        }, dhx_col_id: col.id }, getCellAriaAttrs(col, 1)), [
        row.$items
            ? dom_1.el(".dhx_grid-expand-cell-icon", __assign(__assign({ class: row.$opened ? "dxi dxi-chevron-up" : "dxi dxi-chevron-down", dhx_id: row.id }, getToggleAriaAttrs(row)), { style: {
                    padding: row.$level ? "0 0 0 " + (4 + parentPadding) + "px" : "0 0 0 4px",
                } }))
            : null,
        dom_1.el(".dhx_tree-cell", {
            class: cellAlign + ("" + ((conf.autoHeight && " dhx_tree-cell_auto-height") || "")),
        }, [content]),
    ]);
}
exports.getTreeCell = getTreeCell;
function getEditorCell(row, col, conf) {
    return editors_1.getEditor(row, col, conf);
}
function getCells(conf) {
    if (!conf.data || !conf.columns) {
        return [];
    }
    var getRowAriaAttrs = function (ind) { return ({
        role: "row",
        "aria-rowindex": ind,
    }); };
    var pos = conf.$positions;
    var data = conf.data ? conf.data.slice(pos.yStart, pos.yEnd) : [];
    var columns = conf.columns.slice(pos.xStart, pos.xEnd);
    var selectedCell = conf.selection.getCell();
    var isFirstTabindex = true;
    return data.map(function (row, index) {
        var isLastRow = data.length - 1 === index;
        var rowCss = "";
        if (conf.rowCss) {
            rowCss = conf.rowCss(row);
        }
        if (row.$css) {
            rowCss += row.$css;
        }
        return dom_1.el(".dhx_grid-row", __assign({ style: { height: isLastRow ? row.$height + 1 : row.$height }, dhx_id: row.id, class: rowCss, _key: row.id, _flags: dom_1.KEYED_LIST }, getRowAriaAttrs(pos.yStart + index + 1)), row.$customRender
            ? [row.$customRender(row, conf)]
            : columns.map(function (col, colIndex) {
                var _a;
                if (!col.hidden) {
                    var value = data_1.toFormat(row[col.id], col.type, col.format);
                    var getTabIndex_1 = function (col, row) {
                        var attrs = {
                            tabindex: -1,
                        };
                        if (selectedCell) {
                            // is current cell selected?
                            if (selectedCell.row.id === row.id && selectedCell.column.id === col.id) {
                                attrs["tabindex"] = 0;
                            }
                        }
                        else if (isFirstTabindex) {
                            attrs["tabindex"] = 0;
                            // one-time event - only on first focus
                            // FIXME: crutch-solution
                            attrs["onfocus"] = function (e) {
                                // FIXME: issue with samples that already setCell from index.html, rendered twice
                                // TODO: not here BUT if first cell is not in viewport -> scroll to it to set focus
                                if (conf.selection && !selectedCell) {
                                    var rowId = e.target.parentNode.getAttribute("dhx_id");
                                    var colId = e.target.getAttribute("dhx_col_id");
                                    if (colId && rowId) {
                                        conf.selection.setCell(rowId, colId);
                                        selectedCell = conf.selection.getCell();
                                    }
                                }
                            };
                        }
                        isFirstTabindex = false;
                        return attrs;
                    };
                    var getEditBtnAriaAttrs = function () { return ({
                        role: "button",
                        "aria-label": "Edit content",
                    }); };
                    var getCellAriaAttrs = function (col, colIndex, rowIndex, isEditable) { return (__assign({ role: "gridcell", "aria-colindex": colIndex, "aria-readonly": isEditable ? "false" : "true" }, getTabIndex_1(col, row))); };
                    var defaultTemplate = function (text) {
                        if (typeof text === "boolean" || col.type === "boolean") {
                            if (typeof text !== "string") {
                                return "" + Boolean(text);
                            }
                        }
                        return text || text === 0 ? text : "";
                    };
                    var content = col.template
                        ? col.template(value, row, col)
                        : defaultTemplate(value);
                    // content can be a domvm node or a string
                    if (typeof content === "string") {
                        content = main_1.isHtmlEnable(conf, col)
                            ? dom_1.el("div.dhx_grid-cell__content", __assign({ ".innerHTML": content }, getEditBtnAriaAttrs()))
                            : content;
                    }
                    var css = (((col.$cellCss && col.$cellCss[row.id]) || "") + " dhx_" + col.type + "-cell").replace(/\s+/g, " ");
                    var colWidth = col.$width;
                    var isEditable = conf.$editable &&
                        conf.$editable.row === row.id &&
                        conf.$editable.col === col.id;
                    if (isEditable ||
                        (col.type === "boolean" &&
                            ((conf.editable && ((_a = col.editable) !== null && _a !== void 0 ? _a : true)) ||
                                (!conf.editable && col.editable)))) {
                        if (!(conf.leftSplit &&
                            conf.columns.length !== conf.leftSplit &&
                            conf.columns.indexOf(col) < conf.leftSplit)) {
                            content = getEditorCell(row, col, conf).toHTML();
                            css += " dhx_grid-cell__editable";
                            if (conf.leftSplit === conf.columns.indexOf(col) + 1) {
                                colWidth -= 1;
                            }
                        }
                    }
                    if (conf.type === "tree" && conf.firstColId === col.id) {
                        return getTreeCell(content, row, col, conf);
                    }
                    if (conf.dragMode && conf.dragItem === "row") {
                        css +=
                            (row.$drophere && !isEditable ? " dhx_grid-cell--drophere" : "") +
                                (row.$dragtarget && !isEditable ? " dhx_grid-cell--dragtarget" : "") +
                                (!isEditable ? " dhx_grid-cell--drag" : "");
                    }
                    if (col.align) {
                        css += " dhx_align-" + col.align;
                    }
                    if (conf.autoHeight) {
                        css += " dhx_grid-cell__content_auto-height";
                    }
                    return dom_1.el(".dhx_grid-cell", __assign({ class: css, style: {
                            width: colWidth,
                            height: row.$height + "px",
                        }, _key: col.id, dhx_col_id: col.id }, getCellAriaAttrs(col, pos.xStart + colIndex + 1, index, conf.editable)), [content]);
                }
            }));
    });
}
exports.getCells = getCells;
function getSpans(config, frozen) {
    var spanCells = [];
    var pos = config.$positions;
    var columns = config.columns;
    var rows = config.data;
    if (!columns.length || !config.spans)
        return null;
    var spans = config.spans.sort(function (a, b) {
        return typeof a.row === "string" && typeof b.row === "string"
            ? a.row.localeCompare(b.row)
            : a.row - b.row;
    });
    var _loop_1 = function (i) {
        var row = spans[i].row;
        var col = spans[i].column;
        var spanHeight = spans[i].rowspan;
        var spanWidth = spans[i].colspan;
        var spanCss = spans[i].css;
        if (spanHeight === 1) {
            return "continue";
        }
        var colIndex = core_1.findIndex(columns, function (item) { return "" + item.id === "" + col; });
        var rowIndex = core_1.findIndex(rows, function (item) { return "" + item.id === "" + row; });
        if (colIndex < 0 || rowIndex < 0) {
            return "continue";
        }
        if (frozen === true &&
            ((spanWidth || 1) + colIndex > config.leftSplit || colIndex + 1 > config.leftSplit)) {
            return "continue";
        }
        var currCol = columns[colIndex];
        var currRow = rows[rowIndex];
        if (currCol.hidden) {
            return "continue";
        }
        var content = spans[i].text ? spans[i].text : currRow[col] === undefined ? "" : currRow[col];
        var t = function (text, _row, _col) { return (text || text === 0 ? text : ""); };
        var template = currCol.template || t;
        content = template(content, currRow, currCol);
        content =
            typeof content === "string"
                ? dom_1.el("div.dhx_span-cell-content", { ".innerHTML": content })
                : content;
        var currentTop = 0;
        for (var index = 0; index < rowIndex; index++) {
            currentTop += rows[index].$height;
        }
        var top_1 = currentTop - 1;
        var left = 0;
        for (var s = colIndex - 1; s >= 0; s--) {
            left += columns[s].$width;
        }
        var rowspanWithLastCol = colIndex === columns.length - 1;
        var colspanWithLastCol = colIndex + spanWidth === columns.length;
        var css = currCol.header[0].text ? " dhx_span-cell" : " dhx_span-cell dhx_span-cell--title";
        css += spanCss ? " " + spanCss : "";
        css += rowIndex === 0 ? " dhx_span-first-row" : "";
        css += colIndex === 0 ? " dhx_span-first-col" : "";
        css += rowspanWithLastCol || colspanWithLastCol ? " dhx_span-last-col" : "";
        css += !spanWidth ? " dhx_span-" + (currCol.type || "string") + "-cell" : " dhx_span-string-cell";
        css += currCol.align ? " dhx_align-" + currCol.align : " dhx_align-left";
        var width = spanWidth > 1 ? cells_1.getWidth(columns, spanWidth, colIndex) : currCol.$width;
        var height = spanHeight > 1 ? cells_1.getHeight(rows, spanHeight, rowIndex) : currRow.$height;
        spanCells.push(dom_1.el("div", __assign({ class: css, style: {
                width: width,
                height: height,
                top: top_1,
                left: left,
            }, dhx_col_id: col, dhx_id: row, "aria-hidden": "true" }, getHandlers(pos.yStart, pos.xStart, config)), [content]));
    };
    for (var i = 0; i < spans.length; i++) {
        _loop_1(i);
    }
    return spanCells;
}
exports.getSpans = getSpans;
function getShifts(conf) {
    var columnsLeft = conf.columns.slice(0, conf.$positions.xStart);
    var rowsTop = conf.data.slice(0, conf.$positions.yStart);
    return {
        x: main_1.getTotalWidth(columnsLeft),
        y: main_1.getTotalHeight(rowsTop),
    };
}
exports.getShifts = getShifts;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(107));
__export(__webpack_require__(62));


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var LayoutEvents;
(function (LayoutEvents) {
    LayoutEvents["beforeShow"] = "beforeShow";
    LayoutEvents["afterShow"] = "afterShow";
    LayoutEvents["beforeHide"] = "beforeHide";
    LayoutEvents["afterHide"] = "afterHide";
    LayoutEvents["beforeResizeStart"] = "beforeResizeStart";
    LayoutEvents["resize"] = "resize";
    LayoutEvents["afterResizeEnd"] = "afterResizeEnd";
    LayoutEvents["beforeAdd"] = "beforeAdd";
    LayoutEvents["afterAdd"] = "afterAdd";
    LayoutEvents["beforeRemove"] = "beforeRemove";
    LayoutEvents["afterRemove"] = "afterRemove";
    LayoutEvents["beforeCollapse"] = "beforeCollapse";
    LayoutEvents["afterCollapse"] = "afterCollapse";
    LayoutEvents["beforeExpand"] = "beforeExpand";
    LayoutEvents["afterExpand"] = "afterExpand";
})(LayoutEvents = exports.LayoutEvents || (exports.LayoutEvents = {}));


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(65));
__export(__webpack_require__(124));
__export(__webpack_require__(66));
__export(__webpack_require__(43));


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ListEvents;
(function (ListEvents) {
    ListEvents["click"] = "click";
    ListEvents["doubleClick"] = "doubleclick";
    ListEvents["focusChange"] = "focuschange";
    ListEvents["beforeEditStart"] = "beforeEditStart";
    ListEvents["afterEditStart"] = "afterEditStart";
    ListEvents["beforeEditEnd"] = "beforeEditEnd";
    ListEvents["afterEditEnd"] = "afterEditEnd";
    ListEvents["itemRightClick"] = "itemRightClick";
    ListEvents["itemMouseOver"] = "itemMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ListEvents["contextmenu"] = "contextmenu";
})(ListEvents = exports.ListEvents || (exports.ListEvents = {}));


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(71));
__export(__webpack_require__(148));


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var WindowEvents;
(function (WindowEvents) {
    WindowEvents["resize"] = "resize";
    WindowEvents["headerDoubleClick"] = "headerdoubleclick";
    WindowEvents["move"] = "move";
    WindowEvents["afterShow"] = "aftershow";
    WindowEvents["afterHide"] = "afterhide";
    WindowEvents["beforeShow"] = "beforeshow";
    WindowEvents["beforeHide"] = "beforehide";
})(WindowEvents = exports.WindowEvents || (exports.WindowEvents = {}));


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    apply: "apply",
    reject: "reject",
};
exports.default = locale;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function blockKeys(e) {
    var active = document.activeElement;
    if (active.classList.contains("dhx_alert__apply-button") && e.key === "Enter") {
        return;
    }
    if (!active.classList.contains("dhx_alert__confirm-reject") &&
        !active.classList.contains("dhx_alert__confirm-aply")) {
        e.preventDefault();
    }
}
function blockScreen(css) {
    var blocker = document.createElement("div");
    blocker.className = "dhx_alert__overlay " + (css || "");
    document.body.appendChild(blocker);
    document.addEventListener("keydown", blockKeys);
    return function () {
        document.body.removeChild(blocker);
        document.removeEventListener("keydown", blockKeys);
    };
}
exports.blockScreen = blockScreen;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(2);
var types_1 = __webpack_require__(34);
var DEFAULT_SHOW_DELAY = 750;
var DEFAULT_HIDE_DELAY = 200;
function findPosition(targetRect, position, width, height) {
    var margin = 8; // margin top/bot, left/right
    var pos;
    var left;
    var top;
    switch (position) {
        case types_1.Position.center:
            left = targetRect.left + window.pageXOffset + (targetRect.width - width) / 2;
            if (left + margin < window.pageXOffset) {
                left = targetRect.left + window.pageXOffset;
            }
            top = targetRect.top + window.pageYOffset + (targetRect.height - height) / 2;
            pos = types_1.RealPosition.center;
            return { left: left, top: top, pos: pos };
        case types_1.Position.right:
            pos = types_1.RealPosition.right;
            left = targetRect.right + window.pageXOffset;
            if (left + width + margin > window.innerWidth + window.pageXOffset) {
                // set left
                left = window.pageXOffset + targetRect.left - width;
                pos = types_1.RealPosition.left;
            }
            top = window.pageYOffset + targetRect.top + (targetRect.height - height) / 2;
            return { left: left, top: top, pos: pos };
        case types_1.Position.bottom:
        default:
            left = window.pageXOffset + targetRect.left + (targetRect.width - width) / 2;
            if (left + width > window.innerWidth + window.pageXOffset) {
                left = window.innerWidth + window.pageXOffset - width;
            }
            else if (left < 0) {
                left = 0;
            }
            pos = types_1.RealPosition.bottom;
            top = window.pageYOffset + targetRect.bottom;
            if (top + height + margin > window.innerHeight + window.pageYOffset) {
                // set top
                top = window.pageYOffset + targetRect.top - height;
                pos = types_1.RealPosition.top;
            }
            return { left: left, top: top, pos: pos };
    }
}
exports.findPosition = findPosition;
// tooltip init
var tooltipBox = document.createElement("div");
var tooltipText = document.createElement("span");
tooltipText.className = "dhx_tooltip__text";
tooltipBox.appendChild(tooltipText);
tooltipBox.setAttribute("role", "tooltip");
tooltipBox.style.position = "absolute";
var lastNode = null;
var isActive = false;
var hideTimeout = null;
var showTimeout = null;
var activeListenersDestructor;
function getZIndex(node) {
    if (node &&
        node.classList.contains("dhx_popup--window") &&
        node.classList.contains("dhx_popup--window_active")) {
        return 2147483647;
    }
    if ((node === null || node === void 0 ? void 0 : node.classList.contains("dhx_popup--window")) || (node === null || node === void 0 ? void 0 : node.classList.contains("dhx_popup--window_modal"))) {
        return 2147483646;
    }
    if (node && node.offsetParent) {
        return getZIndex(node.offsetParent);
    }
    return null;
}
exports.getZIndex = getZIndex;
function showTooltip(node, text, position, css, force, htmlEnable) {
    if (force === void 0) { force = false; }
    var rects = node.getBoundingClientRect();
    if (htmlEnable) {
        tooltipText.innerHTML = text;
    }
    else {
        tooltipText.textContent = text;
    }
    document.body.appendChild(tooltipBox);
    tooltipBox.className = "dhx_widget dhx_tooltip" + (force ? " dhx_tooltip--forced" : "");
    var _a = tooltipBox.getBoundingClientRect(), width = _a.width, height = _a.height;
    var _b = findPosition(rects, position, width, height), left = _b.left, top = _b.top, pos = _b.pos;
    var zIndex = getZIndex(node);
    if (zIndex) {
        tooltipBox.style.zIndex = zIndex.toString();
    }
    switch (pos) {
        case types_1.RealPosition.bottom:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.top:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.left:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.right:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
        case types_1.RealPosition.center:
            tooltipBox.style.left = left + "px";
            tooltipBox.style.top = top + "px";
            break;
    }
    tooltipBox.className += " dhx_tooltip--" + pos + " " + (css || "");
    isActive = true;
    if (!force) {
        setTimeout(function () {
            tooltipBox.className += " dhx_tooltip--animate";
        });
    }
}
function hideTooltip(delay) {
    if (lastNode) {
        hideTimeout = setTimeout(function () {
            document.body.removeChild(tooltipBox);
            isActive = false;
            hideTimeout = null;
        }, delay || DEFAULT_HIDE_DELAY);
    }
}
function addListeners(node, text, config) {
    var force = config.force, showDelay = config.showDelay, hideDelay = config.hideDelay, position = config.position, css = config.css, htmlEnable = config.htmlEnable;
    if (!force) {
        showTimeout = setTimeout(function () {
            showTooltip(node, text, position || types_1.Position.bottom, css, false, htmlEnable);
        }, showDelay || DEFAULT_SHOW_DELAY);
    }
    var hide = function () {
        if (isActive) {
            hideTooltip(hideDelay);
        }
        clearTimeout(showTimeout);
        node.removeEventListener("mouseleave", hide);
        node.removeEventListener("blur", hide);
        document.removeEventListener("mousedown", hide);
        lastNode = null;
        activeListenersDestructor = null;
    };
    if (force) {
        showTooltip(node, text, position, css, force, htmlEnable);
    }
    node.addEventListener("mouseleave", hide);
    node.addEventListener("blur", hide);
    document.addEventListener("mousedown", hide);
    activeListenersDestructor = hide;
}
// default
function tooltip(text, config) {
    var node = html_1.toNode(config.node);
    if (node === lastNode) {
        return;
    }
    if (activeListenersDestructor) {
        activeListenersDestructor();
        activeListenersDestructor = null;
    }
    lastNode = node;
    if (hideTimeout) {
        clearTimeout(hideTimeout);
        hideTimeout = null;
        addListeners(node, text, __assign(__assign({}, config), { force: true }));
    }
    else {
        addListeners(node, text, config);
    }
}
exports.tooltip = tooltip;
function _mousemove(e) {
    var node = html_1.locateNode(e, "dhx_tooltip_text");
    if (!node) {
        return;
    }
    tooltip(node.getAttribute("dhx_tooltip_text"), {
        position: node.getAttribute("dhx_tooltip_position") || types_1.Position.bottom,
        node: node,
    });
}
function enableTooltip() {
    document.addEventListener("mousemove", _mousemove);
}
exports.enableTooltip = enableTooltip;
function disableTooltip() {
    document.removeEventListener("mousemove", _mousemove);
}
exports.disableTooltip = disableTooltip;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.grayShades = [
    "#000000",
    "#4C4C4C",
    "#666666",
    "#808080",
    "#999999",
    "#B3B3B3",
    "#CCCCCC",
    "#E6E6E6",
    "#F2F2F2",
    "#FFFFFF",
];
exports.palette = [
    ["#D4DAE4", "#B0B8CD", "#949DB1", "#727A8C", "#5E6677", "#3F4757", "#1D2534"],
    ["#FFCDD2", "#FE9998", "#F35C4E", "#E94633", "#D73C2D", "#CA3626", "#BB2B1A"],
    ["#F9E6AD", "#F4D679", "#EDB90F", "#EAA100", "#EA8F00", "#EA7E00", "#EA5D00"],
    ["#BCE4CE", "#90D2AF", "#33B579", "#36955F", "#247346", "#1D5B38", "#17492D"],
    ["#BDF0E9", "#92E7DC", "#02D7C5", "#11B3A5", "#018B80", "#026B60", "#024F43"],
    ["#B3E5FC", "#81D4FA", "#29B6F6", "#039BE5", "#0288D1", "#0277BD", "#01579B"],
    ["#AEC1FF", "#88A3F9", "#5874CD", "#2349AE", "#163FA2", "#083596", "#002381"],
    ["#C5C0DA", "#9F97C1", "#7E6BAD", "#584A8F", "#4F4083", "#473776", "#3A265F"],
    ["#D6BDCC", "#C492AC", "#A9537C", "#963A64", "#81355A", "#6E3051", "#4C2640"],
    ["#D2C5C1", "#B4A09A", "#826358", "#624339", "#5D4037", "#4E342E", "#3E2723"],
];


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ColorpickerEvents;
(function (ColorpickerEvents) {
    ColorpickerEvents["change"] = "change";
    ColorpickerEvents["apply"] = "apply";
    ColorpickerEvents["cancelClick"] = "cancelClick";
    ColorpickerEvents["modeChange"] = "modeChange";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["selectClick"] = "selectClick";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["colorChange"] = "colorChange";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ColorpickerEvents["viewChange"] = "viewChange";
})(ColorpickerEvents = exports.ColorpickerEvents || (exports.ColorpickerEvents = {}));


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(5);
var loader_1 = __webpack_require__(95);
var sort_1 = __webpack_require__(98);
var dataproxy_1 = __webpack_require__(23);
var helpers_1 = __webpack_require__(16);
var types_1 = __webpack_require__(15);
var core_1 = __webpack_require__(1);
var DataCollection = /** @class */ (function () {
    function DataCollection(config, events) {
        var _this = this;
        this._changes = { order: [] };
        this.config = config || {};
        this._sort = new sort_1.Sort();
        this._loader = new loader_1.Loader(this, this._changes);
        this.events = events || new events_1.EventSystem(this);
        this.events.on("dataRequest", function (from, to) {
            var proxy = _this.dataProxy;
            if (proxy && proxy.updateUrl) {
                proxy.updateUrl(null, { from: from, limit: proxy.config.limit || to - from });
                _this.load(proxy);
            }
        });
        this.events.on(types_1.DataEvents.loadError, function (response) {
            if (typeof response !== "string") {
                helpers_1.dhxError(response);
            }
            else {
                helpers_1.dhxWarning(response);
            }
        });
        this._reset();
    }
    DataCollection.prototype._reset = function () {
        this._order = [];
        this._pull = {};
        this._changes = { order: [] };
        this._initOrder = null;
        this._meta = new WeakMap();
        this._loaded = false;
    };
    DataCollection.prototype.add = function (newItem, index) {
        var _this = this;
        if (!this.events.fire(types_1.DataEvents.beforeAdd, [newItem])) {
            return;
        }
        var out;
        if (Array.isArray(newItem)) {
            out = newItem.map(function (element, key) {
                if (key !== 0) {
                    index = index + 1;
                }
                return _this._add(element, index);
            });
        }
        else {
            out = this._add(newItem, index);
        }
        this._applySmart();
        return out;
    };
    DataCollection.prototype.remove = function (id) {
        var _this = this;
        if (id) {
            if (id instanceof Array) {
                __spreadArrays(id).map(function (elementId) {
                    _this._remove(elementId);
                });
            }
            else {
                this._remove(id);
            }
        }
    };
    DataCollection.prototype.removeAll = function () {
        this._reset();
        this.events.fire(types_1.DataEvents.removeAll);
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.exists = function (id) {
        return !!this._pull[id];
    };
    DataCollection.prototype.getNearId = function (id) {
        var item = this._pull[id];
        if (!item) {
            return this._order[0].id || "";
        }
    };
    DataCollection.prototype.getItem = function (id) {
        return this._pull[id];
    };
    DataCollection.prototype.update = function (id, newItem, silent) {
        var item = this.getItem(id);
        if (item) {
            if (helpers_1.isEqualObj(newItem, item)) {
                return;
            }
            if (newItem.id && id !== newItem.id) {
                helpers_1.dhxWarning("this method doesn't allow change id");
                if (helpers_1.isDebug()) {
                    // eslint-disable-next-line no-debugger
                    debugger;
                }
            }
            else {
                if (newItem.parent && item.parent && newItem.parent !== item.parent) {
                    this.move(id, -1, this, newItem.parent);
                }
                core_1.extend(this._pull[id], newItem, false);
                if (this.config.update) {
                    this.config.update(this._pull[id]);
                }
                if (!silent) {
                    this._onChange("update", id, this._pull[id]);
                }
            }
            this._applySmart();
        }
        else {
            helpers_1.dhxWarning("item not found");
        }
    };
    DataCollection.prototype.getIndex = function (id) {
        if (!id) {
            return -1;
        }
        var res = core_1.findIndex(this._order, function (item) { return item && item.id.toString() === id.toString(); });
        if (this._pull[id] && res >= 0) {
            return res;
        }
    };
    DataCollection.prototype.getId = function (index) {
        if (!this._order[index]) {
            return;
        }
        return this._order[index].id;
    };
    DataCollection.prototype.getLength = function () {
        return this._order.length;
    };
    DataCollection.prototype.isDataLoaded = function (from, to) {
        if (from === void 0) { from = 0; }
        if (to === void 0) { to = this._order.length; }
        if (core_1.isNumeric(from) && core_1.isNumeric(to)) {
            return this._order.slice(from, to).filter(function (item) { return item && item.$empty; }).length === 0;
        }
        // if check succeeds once, collection can't go back to not-loaded state
        if (!this._loaded) {
            this._loaded = !this.find(function (item) { return item.$empty; });
        }
        return !!this._loaded;
    };
    DataCollection.prototype.filter = function (rule, config) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (!config || !config.add) {
            this._order = this._initOrder || this._order;
            this._initOrder = null;
        }
        if (rule && typeof rule !== "function") {
            var t_1 = rule;
            if (t_1.by !== undefined && t_1.match !== undefined) {
                rule = t_1.compare
                    ? function (obj) { return t_1.compare(obj[t_1.by], t_1.match, obj, t_1.multi); }
                    : function (obj) { return obj[t_1.by] == t_1.match; };
            }
        }
        this._filter = config && config.smartFilter ? rule : null;
        this._applyFilters(rule);
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.find = function (conf) {
        for (var key in this._pull) {
            var res = helpers_1.findByConf(this._pull[key], conf);
            if (res) {
                return res;
            }
        }
        return null;
    };
    DataCollection.prototype.findAll = function (conf) {
        var res = [];
        for (var key in this._pull) {
            var item = helpers_1.findByConf(this._pull[key], conf);
            if (item) {
                res.push(item);
            }
        }
        return res;
    };
    DataCollection.prototype.sort = function (rule, config) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (config && config.smartSorting) {
            this._sorter = rule;
        }
        if (rule) {
            this._applySorters(rule);
        }
        this.events.fire(types_1.DataEvents.change);
    };
    DataCollection.prototype.copy = function (id, index, target, targetId) {
        var _this = this;
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._copy(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._copy(id, index, target, targetId);
        }
    };
    DataCollection.prototype.move = function (id, index, target, targetId) {
        var _this = this;
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._move(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._move(id, index, target, targetId);
        }
    };
    DataCollection.prototype.forEach = function (callback) {
        for (var i = 0; i < this._order.length; i++) {
            callback.call(this, this._order[i], i, this._order);
        }
    };
    DataCollection.prototype.load = function (url, driver) {
        if (typeof url === "string") {
            this.dataProxy = url = new dataproxy_1.DataProxy(url);
        }
        this.dataProxy = url;
        return this._loader.load(url, driver);
    };
    DataCollection.prototype.parse = function (data, driver) {
        this._reset();
        return this._loader.parse(data, driver);
    };
    DataCollection.prototype.$parse = function (data) {
        var apx = this.config.approximate;
        if (apx) {
            data = this._approximate(data, apx.value, apx.maxNum);
        }
        this._parse_data(data);
        this._applySmart();
        this.events.fire(types_1.DataEvents.change, ["load"]);
        this.events.fire(types_1.DataEvents.load);
    };
    DataCollection.prototype.save = function (url) {
        if (typeof url === "string") {
            url = new dataproxy_1.DataProxy(url);
        }
        this._loader.save(url);
    };
    DataCollection.prototype.changeId = function (id, newId, silent) {
        if (newId === void 0) { newId = core_1.uid(); }
        if (!silent && !this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var item = this.getItem(id);
        if (!item) {
            helpers_1.dhxWarning("item not found");
        }
        else {
            item.id = newId;
            core_1.extend(this._pull[id], item);
            this._pull[newId] = this._pull[id];
            if (!silent) {
                this._onChange("update", newId, this._pull[newId]);
            }
            delete this._pull[id];
        }
    };
    // todo: loop through the array and check saved statuses
    DataCollection.prototype.isSaved = function () {
        return !this._changes.order.length; // todo: bad solution, errors and holded elments are missed...
    };
    DataCollection.prototype.map = function (callback) {
        var result = [];
        for (var i = 0; i < this._order.length; i++) {
            result.push(callback.call(this, this._order[i], i, this._order));
        }
        return result;
    };
    DataCollection.prototype.mapRange = function (from, to, callback) {
        if (from < 0) {
            from = 0;
        }
        if (to > this._order.length - 1) {
            to = this._order.length - 1;
        }
        var arr = this._order.slice(from, to);
        var result = [];
        for (var i = from; i <= to; i++) {
            result.push(callback.call(this, this._order[i], i, arr));
        }
        return result;
    };
    DataCollection.prototype.reduce = function (callback, acc) {
        for (var i = 0; i < this._order.length; i++) {
            acc = callback.call(this, acc, this._order[i], i);
        }
        return acc;
    };
    DataCollection.prototype.serialize = function (driver) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        // remove $ attrs
        var data = this.map(function (item) {
            var newItem = __assign({}, item);
            Object.keys(newItem).forEach(function (key) {
                if (key.startsWith("$")) {
                    delete newItem[key];
                }
            });
            return newItem;
        });
        var dataDriver = helpers_1.toDataDriver(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    DataCollection.prototype.getInitialData = function () {
        return this._initOrder;
    };
    DataCollection.prototype.setMeta = function (obj, key, value) {
        if (!obj)
            return;
        var map = this._meta.get(obj);
        if (!map) {
            map = {};
            this._meta.set(obj, map);
        }
        map[key] = value;
    };
    DataCollection.prototype.getMeta = function (obj, key) {
        var map = this._meta.get(obj);
        return map ? map[key] : null;
    };
    DataCollection.prototype.getMetaMap = function (obj) {
        return this._meta.get(obj);
    };
    DataCollection.prototype.setRange = function (from, to) {
        this._range = !to ? null : [from, to];
    };
    DataCollection.prototype.getRawData = function (from, to, order, mode) {
        order = order || this._order;
        if (mode === 1)
            return order;
        if (this._range) {
            from = this._range[0] + from;
            if (to === -1) {
                to = this._range[1];
            }
            else {
                var diff = to - from;
                to = from + diff > this._range[1] ? this._range[1] : from + diff;
            }
        }
        if (!to || (from === 0 && (to === -1 || to === order.length))) {
            return order;
        }
        if (from >= order.length)
            return [];
        if (to === -1 || to > order.length)
            to = order.length;
        var slice = order.slice(from, to);
        if (slice.filter(function (item) { return item.$empty; }).length !== 0) {
            this.events.fire("dataRequest", [from, to]);
        }
        return slice;
    };
    DataCollection.prototype._add = function (newItem, index) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var id = this._addCore(newItem, index);
        this._onChange("add", newItem.id, newItem);
        this.events.fire(types_1.DataEvents.afterAdd, [newItem]);
        return id;
    };
    DataCollection.prototype._remove = function (id) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        var removedItem = this._pull[id];
        if (removedItem) {
            if (!this.events.fire(types_1.DataEvents.beforeRemove, [removedItem])) {
                return;
            }
            this._removeCore(removedItem.id);
            this._onChange("remove", id, removedItem);
        }
        this.events.fire(types_1.DataEvents.afterRemove, [removedItem]);
    };
    DataCollection.prototype._copy = function (id, index, target, targetId, key) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (!this.exists(id)) {
            return null;
        }
        var newid = core_1.uid();
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target) {
            if (!(target instanceof DataCollection) && targetId) {
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                return;
            }
            if (target.exists(id)) {
                target.add(__assign(__assign({}, helpers_1.copyWithoutInner(this.getItem(id))), { id: newid }), index);
                return newid;
            }
            else {
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                return id;
            }
        }
        this.add(__assign(__assign({}, helpers_1.copyWithoutInner(this.getItem(id))), { id: newid }), index);
        return newid;
    };
    DataCollection.prototype._move = function (id, index, target, targetId, key) {
        if (!this.isDataLoaded()) {
            helpers_1.dhxWarning("the method doesn't work with lazyLoad");
            return;
        }
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target && target !== this && this.exists(id)) {
            var item = core_1.copy(this.getItem(id), true);
            if (target.exists(id)) {
                item.id = core_1.uid();
            }
            if (targetId) {
                item.parent = targetId;
            }
            target.add(item, index);
            // remove data from original collection
            this.remove(id);
            return item.id;
        }
        if (this.getIndex(id) === index) {
            return null;
        }
        // move other elements
        var spliced = this._order.splice(this.getIndex(id), 1)[0];
        if (index === -1) {
            index = this._order.length;
        }
        this._order.splice(index, 0, spliced);
        this.events.fire(types_1.DataEvents.change, [id, "update", this.getItem(id)]);
        return id;
    };
    DataCollection.prototype._addCore = function (obj, index) {
        var _a;
        if (this.config.init) {
            obj = this.config.init(obj);
        }
        obj.id = (_a = obj.id) !== null && _a !== void 0 ? _a : core_1.uid();
        if (this._pull[obj.id]) {
            helpers_1.dhxError("Item " + obj.id + " already exist");
        }
        // todo: not ideal solution
        if (this._initOrder) {
            this._addToOrder(this._initOrder, obj, index);
        }
        this._addToOrder(this._order, obj, index);
        return obj.id;
    };
    DataCollection.prototype._removeCore = function (id) {
        if (this.getIndex(id) >= 0) {
            this._order = this._order.filter(function (el) { return el.id !== id; });
            delete this._pull[id];
        }
        if (this._initOrder && this._initOrder.length) {
            this._initOrder = this._initOrder.filter(function (el) { return el.id !== id; });
            delete this._pull[id];
        }
    };
    DataCollection.prototype._parse_data = function (data) {
        var index = this._order.length;
        if (this.config.prep) {
            data = this.config.prep(data);
        }
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            this._addCore(obj, index++);
        }
    };
    DataCollection.prototype._approximate = function (data, values, maxNum) {
        var len = data.length;
        var vlen = values.length;
        var rlen = Math.floor(len / maxNum);
        var newData = Array(Math.ceil(len / rlen));
        var index = 0;
        for (var i = 0; i < len; i += rlen) {
            var newItem = core_1.copy(data[i]);
            var end = Math.min(len, i + rlen);
            for (var j = 0; j < vlen; j++) {
                var sum = 0;
                for (var z = i; z < end; z++) {
                    sum += data[z][values[j]];
                }
                newItem[values[j]] = sum / (end - i);
            }
            newData[index++] = newItem;
        }
        return newData;
    };
    DataCollection.prototype._onChange = function (status, id, obj) {
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var item = _a[_i];
            // update pending item if previous state is "saving" or if item not saved yet
            if (item.id === id && !item.saving) {
                // update item
                if (item.error) {
                    item.error = false;
                }
                if (item.status === "add")
                    status = "add";
                var index = this._changes.order.indexOf(item);
                item = __assign(__assign({}, item), { obj: obj, status: status });
                this._changes.order.splice(index, 1, item);
                this._loader.updateChanges(this._changes);
                if (status === "remove" && obj.$emptyRow)
                    return;
                this.events.fire(types_1.DataEvents.change, [id, status, obj]);
                return;
            }
        }
        this._changes.order.push({ id: id, status: status, obj: __assign({}, obj), saving: false });
        this._loader.updateChanges(this._changes);
        this.events.fire(types_1.DataEvents.change, [id, status, obj]);
    };
    DataCollection.prototype._addToOrder = function (array, obj, index) {
        if (index >= 0 && array[index]) {
            this._pull[obj.id] = obj;
            array.splice(index, 0, obj);
        }
        else {
            this._pull[obj.id] = obj;
            array.push(obj);
        }
    };
    DataCollection.prototype._applySmart = function () {
        if (this._filter) {
            this._applyFilters();
        }
        if (this._sorter) {
            this._applySorters();
        }
    };
    DataCollection.prototype._applySorters = function (by) {
        this._sort.sort(this._order, by, this._sorter);
        // sort the not-filtered dataset
        if (this._initOrder && this._initOrder.length) {
            this._sort.sort(this._initOrder, by, this._sorter);
        }
    };
    DataCollection.prototype._applyFilters = function (rule) {
        var filter = this._filter;
        if (rule === filter)
            rule = null;
        if (rule || filter) {
            var fOrder = this._order.filter(function (item) { return (rule ? rule(item) : true) && (filter ? filter(item) : true); });
            if (!this._initOrder) {
                this._initOrder = this._order;
            }
            this._order = fOrder;
        }
    };
    return DataCollection;
}());
exports.DataCollection = DataCollection;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var JsonDriver_1 = __webpack_require__(53);
var CsvDriver_1 = __webpack_require__(54);
var XMLDriver_1 = __webpack_require__(96);
exports.dataDrivers = {
    json: JsonDriver_1.JsonDriver,
    csv: CsvDriver_1.CsvDriver,
};
exports.dataDriversPro = __assign(__assign({}, exports.dataDrivers), { xml: XMLDriver_1.XMLDriver });


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var JsonDriver = /** @class */ (function () {
    function JsonDriver() {
    }
    JsonDriver.prototype.toJsonArray = function (data) {
        return this.getRows(data);
    };
    JsonDriver.prototype.serialize = function (data) {
        return data;
    };
    JsonDriver.prototype.getFields = function (row) {
        return row;
    };
    JsonDriver.prototype.getRows = function (data) {
        return typeof data === "string" ? JSON.parse(data) : data;
    };
    return JsonDriver;
}());
exports.JsonDriver = JsonDriver;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var CsvDriver = /** @class */ (function () {
    function CsvDriver(config) {
        var initConfig = {
            skipHeader: 0,
            nameByHeader: false,
            rowDelimiter: "\n",
            columnDelimiter: ",",
        };
        this.config = __assign(__assign({}, initConfig), config);
        if (this.config.nameByHeader) {
            this.config.skipHeader = 1;
        }
    }
    CsvDriver.prototype.getFields = function (row, headers) {
        var parts = row.trim().split(this.config.columnDelimiter);
        var obj = {};
        for (var i = 0; i < parts.length; i++) {
            obj[headers ? headers[i] : i + 1] = isNaN(Number(parts[i])) ? parts[i] : parseFloat(parts[i]);
        }
        return obj;
    };
    CsvDriver.prototype.getRows = function (data) {
        return data.trim().split(this.config.rowDelimiter);
    };
    CsvDriver.prototype.toJsonArray = function (data) {
        var _this = this;
        var rows = this.getRows(data);
        var names = this.config.names;
        if (this.config.skipHeader) {
            var top_1 = rows.splice(0, this.config.skipHeader);
            if (this.config.nameByHeader) {
                names = top_1[0].trim().split(this.config.columnDelimiter);
            }
        }
        return rows.map(function (row) { return _this.getFields(row, names); });
    };
    CsvDriver.prototype.serialize = function (data, withoutHeader) {
        var header = data[0]
            ? Object.keys(data[0])
                .filter(function (key) { return !key.startsWith("$"); })
                .join(this.config.columnDelimiter) +
                this.config.columnDelimiter +
                this.config.rowDelimiter
            : "";
        var readyData = this._serialize(data);
        if (withoutHeader) {
            return readyData;
        }
        return header + readyData;
    };
    CsvDriver.prototype._serialize = function (data) {
        var _this = this;
        return data.reduce(function (csv, row) {
            var cells = Object.keys(row).reduce(function (total, key, i) {
                if (key.startsWith("$") || key === "items") {
                    return total;
                }
                return "" + total + row[key] + (i === row.length - 1 ? "" : _this.config.columnDelimiter);
            }, "");
            if (row.items) {
                return "" + csv + (csv ? "\n" : "") + cells + _this._serialize(row.items);
            }
            return "" + csv + (csv ? _this.config.rowDelimiter : "") + cells;
        }, "");
    };
    return CsvDriver;
}());
exports.CsvDriver = CsvDriver;


/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var html_1 = __webpack_require__(2);
var core_1 = __webpack_require__(1);
var KeyManager_1 = __webpack_require__(20);
var view_1 = __webpack_require__(7);
var ts_data_1 = __webpack_require__(8);
var Exporter_1 = __webpack_require__(101);
var data_1 = __webpack_require__(17);
var cells_1 = __webpack_require__(28);
var main_1 = __webpack_require__(11);
var Selection_1 = __webpack_require__(102);
var types_1 = __webpack_require__(4);
var render_1 = __webpack_require__(56);
var date_1 = __webpack_require__(12);
var content_1 = __webpack_require__(129);
var columnsResizer_1 = __webpack_require__(130);
var ts_message_1 = __webpack_require__(19);
var keys_1 = __webpack_require__(131);
var FocusManager_1 = __webpack_require__(10);
var Grid = /** @class */ (function (_super) {
    __extends(Grid, _super);
    function Grid(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        _this.config = core_1.extend({
            rowHeight: 40,
            headerRowHeight: 40,
            footerRowHeight: 40,
            keyNavigation: true,
            // selection: "cell", // TODO: turn it on to test aria attrs only OR fix keynavigation to work without selection (or special selection mode enabled by default)
            sortable: true,
            columns: [],
            data: [],
            tooltip: true,
            rootParent: (typeof container === "string" && container) || _this._uid,
            // TODO: remove suite_7.0
            headerSort: true,
        }, config);
        _this.content = content_1.getContent();
        _this._scroll = {
            top: 0,
            left: 0,
        };
        // TODO: remove suite_7.0
        _this.config.autoWidth = _this.config.autoWidth || _this.config.fitToContainer;
        _this.config.adjust = _this.config.adjust || _this.config.columnsAutoWidth;
        _this.config.editable = _this.config.editable || _this.config.editing;
        _this.config.leftSplit = _this.config.leftSplit || _this.config.splitAt;
        if (!_this.config.sortable || !_this.config.headerSort) {
            _this.config.sortable = false;
        }
        _this.config.columns.forEach(function (col) {
            col.format = col.format || col.dateFormat;
        });
        var showCellTooltip = function (row, column, node) {
            if (row && column && main_1.isTooltip(_this.config, column)) {
                var value = data_1.toFormat(row[column.id], column.type, column.format);
                if (column.tooltipTemplate) {
                    value = column.tooltipTemplate(value, row, column);
                }
                else if (value && column.template) {
                    value = column.template(value, row, column);
                }
                value &&
                    ts_message_1.tooltip(value, {
                        css: "dhx_grid_tooltip",
                        node: node,
                        htmlEnable: main_1.isHtmlEnable(_this.config, column),
                    });
            }
        };
        var showContentTootlip = function (e, column) {
            if (column && main_1.isTooltip(_this.config, column)) {
                var value = (e.target.querySelector(".dhx_grid-header-cell-text span") &&
                    e.target.querySelector(".dhx_grid-header-cell-text span").textContent) ||
                    (e.target.querySelector(".dhx_grid-footer-cell-text span") &&
                        e.target.querySelector(".dhx_grid-footer-cell-text span").textContent) ||
                    "";
                value &&
                    ts_message_1.tooltip(value, {
                        css: "dhx_grid_tooltip",
                        node: e.target,
                        htmlEnable: main_1.isHtmlEnable(_this.config, column),
                    });
            }
        };
        _this._htmlEvents = {
            onclick: html_1.eventHandler(function (e) { return html_1.locate(e); }, {
                "dhx_grid-header-cell--sortable": function (e, id) {
                    var _a;
                    var isResizable = e.target.getAttribute("dhx_resized");
                    var column = _this._getColumn(id);
                    if (column &&
                        main_1.isSortable(_this.config, column) &&
                        !isResizable &&
                        _this.events.fire(types_1.GridEvents.beforeSort, [column, _this._sortDir ? "asc" : "desc"])) {
                        var text_1 = (_a = html_1.locateNodeByClassName(e, "dhx_grid-header-cell")) === null || _a === void 0 ? void 0 : _a.querySelector(".dhx_grid-header-cell-text_content").innerHTML;
                        var cellConfig = text_1 ? column.header.find(function (item) { return item.text === text_1; }) : null;
                        var dir = _this._sortDir === "asc" ? "desc" : "asc";
                        _this._sort(id, dir, cellConfig === null || cellConfig === void 0 ? void 0 : cellConfig.sortAs);
                    }
                },
                "dhx_grid-expand-cell": function (e, rowId) {
                    if (e.target.classList.contains("dhx_grid-expand-cell-icon")) {
                        _this.events.fire(types_1.GridEvents.expand, [rowId]);
                    }
                },
            }),
            onscroll: function (e) {
                _this.events.fire(types_1.GridEvents.scroll, [
                    {
                        y: e.target.scrollTop,
                        x: e.target.scrollLeft,
                    },
                ]);
            },
            onmouseover: {
                ".dhx_grid-cell": function (e) {
                    var row = _this.data.getItem(e.composedPath()[1].getAttribute("dhx_id"));
                    var column = _this._getColumn(e.target.getAttribute("dhx_col_id"));
                    showCellTooltip(row, column, e.target);
                },
                ".dhx_grid-cell:not(.dhx_tree-cell) .dhx_grid-cell__content, .dhx_tree-cell :not(.dhx_grid-cell__content)": function (e) {
                    var path = e.composedPath();
                    var row = _this.data.getItem(path[2].getAttribute("dhx_id"));
                    var column = _this._getColumn(path[1].getAttribute("dhx_col_id"));
                    showCellTooltip(row, column, e.target);
                },
                ".dhx_grid-cell.dhx_tree-cell .dhx_grid-cell__content": function (e) {
                    var path = e.composedPath();
                    var row = _this.data.getItem(path[3].getAttribute("dhx_id"));
                    var column = _this._getColumn(path[2].getAttribute("dhx_col_id"));
                    showCellTooltip(row, column, path[2]);
                },
                ".dhx_span-cell:not(.dhx_grid-header-cell)": function (e) {
                    var row = _this.data.getItem(e.target.getAttribute("dhx_id"));
                    var column = _this._getColumn(e.target.getAttribute("dhx_col_id"));
                    var span = _this.getSpan(row.id, column.id);
                    if (row && span && main_1.isTooltip(_this.config, span)) {
                        var value = span.text || data_1.toFormat(row[column.id], column.type, column.format);
                        if (span.tooltipTemplate) {
                            value = span.tooltipTemplate(value, span);
                        }
                        else if (column.template) {
                            value = column.template(value, row, column);
                        }
                        value &&
                            ts_message_1.tooltip(value, {
                                css: "dhx_grid_tooltip",
                                node: e.target,
                                htmlEnable: true,
                            });
                    }
                },
                ".dhx_grid-header-cell:not(.dhx_span-cell)": function (e) {
                    var column = _this._getColumn(e.target.getAttribute("dhx_id"));
                    showContentTootlip(e, column);
                },
                ".dhx_grid-footer-cell:not(.dhx_span-cell)": function (e) {
                    var column = _this._getColumn(e.target.getAttribute("dhx_id"));
                    showContentTootlip(e, column);
                },
                ".dhx_grid-header-cell.dhx_span-cell": function (e) {
                    var column = _this._getColumn(e.target.getAttribute("dhx_id"));
                    var headerSpan = column && column.header.find(function (item) { return !!(item.rowspan || item.colspan); });
                    if (column && headerSpan && main_1.isTooltip(_this.config, column)) {
                        var value = headerSpan.text || "";
                        value &&
                            ts_message_1.tooltip(value, {
                                css: "dhx_grid_tooltip",
                                node: e.target,
                                htmlEnable: main_1.isHtmlEnable(_this.config, column),
                            });
                    }
                },
                ".dhx_grid-header-cell-text_content": function (e) {
                    var path = e.composedPath();
                    var column = _this._getColumn(path[1].getAttribute("dhx_id"));
                    if (column && main_1.isTooltip(_this.config, column)) {
                        var value = (path[2].querySelector(".dhx_grid-header-cell-text_content") &&
                            path[2].querySelector(".dhx_grid-header-cell-text_content").textContent) ||
                            "";
                        value &&
                            ts_message_1.tooltip(value, {
                                css: "dhx_grid_tooltip",
                                node: path[1],
                                htmlEnable: main_1.isHtmlEnable(_this.config, column),
                            });
                    }
                },
            },
        };
        if (_this.config.dragMode || _this.config.dragItem) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
            if (!_this.config.dragItem) {
                _this.config.dragItem = "row";
            }
            if (!_this.config.dragMode) {
                _this.config.dragMode = "both";
            }
        }
        _this._init();
        if (_this.config.columns) {
            _this._parseColumns(true);
        }
        if (_this.config.data &&
            _this.config.data instanceof Array &&
            _this.config.data.length &&
            _this.config.columns) {
            _this.data.parse(_this.config.data);
        }
        _this.selection = new Selection_1.Selection(_this, {
            disabled: !_this.config.selection,
        }, _this.events, _this._uid);
        _this.mount(container, _this._createView());
        _this.config.autoWidth && _this.config.autoHeight && _this._prepareData(_this.config.data);
        dom_1.awaitRedraw().then(function () {
            if (_this.config.keyNavigation) {
                _this.keyManager = new KeyManager_1.KeyManager(function (e, focusId) {
                    if (focusId === _this._uid && _this.events.fire(types_1.GridEvents.beforeKeyDown, [e])) {
                        _this.events.fire(types_1.GridEvents.afterKeyDown, [e]);
                        return true;
                    }
                    return false;
                });
                _this._initHotKey();
                FocusManager_1.focusManager.setFocusId(_this._uid);
            }
        });
        if (config.autoEmptyRow && _this.data.getLength() === 0) {
            _this._addEmptyRow();
            _this.paint();
        }
        return _this;
    }
    Grid.prototype.destructor = function () {
        this._destroyContent();
        this.keyManager && this.keyManager.destructor();
        this.events.events = {};
        this.events.context = null;
        this._activeFilters = this._filterData = this._scroll = this.content = null;
        this.unmount();
    };
    Grid.prototype.setColumns = function (columns) {
        var _this = this;
        this.config.columns = columns;
        this._parseColumns(true);
        this._adjustColumns();
        this._checkFilters();
        this._checkMarks();
        this.paint();
        dom_1.awaitRedraw().then(function () {
            _this.config.keyNavigation && _this._initHotKey();
        });
    };
    Grid.prototype.addRowCss = function (rowId, css) {
        var item = this.data.getItem(rowId);
        var styles = item.$css || "";
        if (!styles.match(new RegExp(css, "g"))) {
            item.$css = styles + (" " + css);
            this.paint();
        }
    };
    Grid.prototype.removeRowCss = function (rowId, css) {
        var item = this.data.getItem(rowId);
        var styles = item.$css ? item.$css.replace(css, "") : "";
        item.$css = styles;
        this.paint();
    };
    Grid.prototype.addCellCss = function (rowId, colId, css) {
        var column = this._getColumn(colId);
        if (column) {
            if (column.$cellCss[rowId]) {
                // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
                column.$cellCss[rowId] += column.$cellCss[rowId].match(new RegExp(css, "g")) ? "" : " " + css;
            }
            else if (this.data.getItem(rowId)) {
                column.$cellCss[rowId] = css + " ";
            }
            this.paint();
        }
    };
    Grid.prototype.removeCellCss = function (rowId, colId, css) {
        var column = this._getColumn(colId);
        if (column) {
            if (column.$cellCss[rowId]) {
                column.$cellCss[rowId] = column.$cellCss[rowId].replace(css, "");
                this.paint();
            }
            else if (this.data.getItem(rowId)) {
                column.$cellCss[rowId] = "";
            }
        }
    };
    Grid.prototype.showColumn = function (colId) {
        var column = this._getColumn(colId);
        if (!column || !column.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeColumnShow, [column]))
            return;
        column.hidden = false;
        this.config.$totalWidth += column.$width;
        var filter = this._hiddenFilters && this._hiddenFilters[column.id];
        if (filter) {
            this._activeFilters[column.id] = filter;
            delete this._hiddenFilters[column.id];
        }
        this.paint();
        this._checkFilters();
        this.events.fire(types_1.GridEvents.afterColumnShow, [column]);
    };
    Grid.prototype.hideColumn = function (colId) {
        var column = this._getColumn(colId);
        if (!column || column.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeColumnHide, [column]))
            return;
        column.hidden = true;
        this.config.$totalWidth -= column.$width;
        var filter = this._activeFilters && this._activeFilters[column.id];
        if (filter) {
            if (!this._hiddenFilters) {
                this._hiddenFilters = {};
            }
            this._hiddenFilters[column.id] = filter;
            delete this._activeFilters[column.id];
            this.data.filter();
        }
        this.paint();
        this._checkFilters();
        this.events.fire(types_1.GridEvents.afterColumnHide, [column]);
    };
    Grid.prototype.isColumnHidden = function (colId) {
        var column = this._getColumn(colId);
        if (column) {
            return !!column.hidden;
        }
    };
    Grid.prototype.showRow = function (rowId) {
        if (!core_1.isDefined(rowId)) {
            return;
        }
        var id = rowId.toString();
        var row = this.data.getItem(id);
        if (!row || !row.hidden) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeRowShow, [row]))
            return;
        this.data.update(id, { hidden: false });
        this.data.filter(function (i) { return !i.hidden; });
        this.events.fire(types_1.GridEvents.afterRowShow, [row]);
    };
    Grid.prototype.hideRow = function (rowId) {
        if (!core_1.isDefined(rowId)) {
            return;
        }
        var id = rowId.toString();
        var row = this.data.getItem(id);
        if (!row) {
            return;
        }
        if (!this.events.fire(types_1.GridEvents.beforeRowHide, [row]))
            return;
        this.data.update(id, { hidden: true });
        this.data.filter(function (i) { return !i.hidden; });
        this.events.fire(types_1.GridEvents.afterRowHide, [row]);
    };
    Grid.prototype.isRowHidden = function (rowId) {
        if (!core_1.isDefined(rowId)) {
            return;
        }
        var row = this.data.getItem(rowId.toString());
        if (row) {
            return !!row.hidden;
        }
    };
    Grid.prototype.getScrollState = function () {
        return {
            x: this._scroll.left,
            y: this._scroll.top,
        };
    };
    Grid.prototype.scroll = function (x, y) {
        var gridBody = this.getRootView().refs.grid_body.el;
        gridBody.scrollLeft = typeof x === "number" ? x : gridBody.scrollLeft;
        gridBody.scrollTop = typeof y === "number" ? y : gridBody.scrollTop;
        this.paint();
    };
    Grid.prototype.scrollTo = function (rowId, colId) {
        var selectedCell = this.selection.getCell();
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var colInd = core_1.findIndex(columns, function (_a) {
            var id = _a.id;
            return id == colId;
        });
        var prevCol = selectedCell ? selectedCell.column : this.config.columns[0];
        var prevColInd = core_1.findIndex(columns, function (obj) { return obj.id == prevCol.id; });
        var fixedColsWidth = this.config.leftSplit
            ? main_1.getTotalWidth(columns.slice(0, this.config.leftSplit))
            : 0;
        var x = main_1.getTotalWidth(columns.slice(0, colInd)) - (colInd - prevColInd < 0 ? fixedColsWidth : 0);
        var rows = this.data.getRawData(0, -1);
        var rowInd = core_1.findIndex(rows, function (_a) {
            var id = _a.id;
            return id == rowId;
        });
        var y = main_1.getTotalHeight(rows.slice(0, rowInd));
        var scrollState = this.getScrollState();
        var gridRight = this.config.width + scrollState.x;
        var gridBottom = this.config.height + scrollState.y - this.config.headerRowHeight * this.config.$headerLevel;
        var cellTop = y - scrollState.y - rows[rowInd].$height;
        var cellLeft = x - scrollState.x - columns[colInd].$width;
        var cellBottom = y + rows[rowInd].$height * 2 + 18 - gridBottom;
        var cellRight = x + columns[colInd].$width * 2 + 18 - gridRight;
        var scrollTop = cellTop > 0 && cellBottom < 0 ? 0 : cellTop < 0 ? cellTop : cellBottom;
        var scrollLeft = cellLeft > 0 && cellRight < 0 ? 0 : cellLeft < 0 ? cellLeft : cellRight;
        this.scroll(scrollLeft + scrollState.x, scrollTop + scrollState.y);
    };
    Grid.prototype.adjustColumnWidth = function (colId, adjust) {
        if (adjust === void 0) { adjust = true; }
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var col = columns.filter(function (col) { return col.id === colId; });
        var totalCols = this._adjustColumnsWidth(this.config.data, col, adjust);
        this.config.$totalWidth = columns.reduce(function (totalWidth, column) {
            if (totalCols[column.id]) {
                column.$fixed = true;
                var max = column.maxWidth;
                var min = column.minWidth;
                var width = totalCols[column.id];
                column.$width = width;
                if (max && width > max) {
                    column.$width = max;
                }
                if (min && column.$width < min) {
                    column.$width = min;
                }
            }
            return (totalWidth += column.$width);
        }, 0);
        this.paint();
    };
    Grid.prototype.getCellRect = function (rowId, colId) {
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var rows = this.data.getRawData(0, -1);
        var span = this.getSpan(rowId, colId);
        var colInd = core_1.findIndex(columns, function (obj) { return obj.id == colId; });
        var rowInd = core_1.findIndex(rows, function (obj) { return obj.id == rowId; });
        var x = main_1.getTotalWidth(columns.slice(0, colInd));
        var y = main_1.getTotalHeight(rows.slice(0, rowInd));
        return {
            x: x,
            y: y,
            height: (span === null || span === void 0 ? void 0 : span.rowspan) ? cells_1.getHeight(rows, span.rowspan, rowInd)
                : rows[rowInd]
                    ? rows[rowInd].$height
                    : 0,
            width: (span === null || span === void 0 ? void 0 : span.colspan) ? cells_1.getWidth(columns, span.colspan, colInd)
                : columns[colInd]
                    ? columns[colInd].$width
                    : 0,
        };
    };
    Grid.prototype.getColumn = function (colId) {
        var id = core_1.findIndex(this.config.columns, function (col) { return col.id == colId; });
        if (id >= 0) {
            return this.config.columns[id];
        }
    };
    Grid.prototype.addSpan = function (spanObj) {
        this.config.spans = this.config.spans || [];
        var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row === "" + spanObj.row && "" + span.column === "" + spanObj.column; });
        if (index >= 0) {
            this.config.spans[index] = spanObj;
            return;
        }
        this.config.spans.push(spanObj);
        this.paint();
    };
    Grid.prototype.getSpan = function (rowId, colId) {
        if (this.config.spans) {
            var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row == "" + rowId && "" + span.column == "" + colId; });
            return this.config.spans[index];
        }
    };
    Grid.prototype.removeSpan = function (rowId, colId) {
        if (this.config.spans) {
            var index = core_1.findIndex(this.config.spans, function (span) { return "" + span.row == "" + rowId && "" + span.column == "" + colId; });
            this.config.spans.splice(index, 1);
            this.paint();
        }
    };
    Grid.prototype.editCell = function (rowId, colId, editorType) {
        var _a;
        var row = this.data.getItem(rowId);
        var col = this.getColumn(colId);
        if (!row || !col) {
            ts_data_1.dhxWarning("item not found");
            return;
        }
        var colEditorType = col.editorType;
        if (!editorType) {
            if (col.type === "date") {
                editorType = "datePicker";
            }
            if (col.type === "boolean") {
                editorType = "checkbox";
            }
            if (colEditorType) {
                editorType = colEditorType;
            }
        }
        if (!this.events.fire(types_1.GridEvents.beforeEditStart, [row, col, editorType])) {
            return;
        }
        if (((_a = this.config.$editable) === null || _a === void 0 ? void 0 : _a.editor) ||
            (this.config.$editable &&
                this.config.$editable.row === rowId &&
                this.config.$editable.col === colId &&
                this.config.$editable.editorType === editorType)) {
            return;
        }
        this.config.$editable = {
            row: row.id,
            col: col.id,
            editorType: editorType,
        };
        if (!this.selection.config.disabled) {
            this.selection.setCell(rowId.toString(), colId.toString());
        }
        this.paint();
        this.events.fire(types_1.GridEvents.afterEditStart, [row, col, editorType]);
    };
    Grid.prototype.editEnd = function (withoutSave) {
        if (this.config.$editable && this.config.$editable.editor) {
            this.config.$editable.editor.endEdit(withoutSave);
        }
    };
    Grid.prototype.getSortingState = function () {
        return { dir: this._sortDir, by: this._sortBy };
    };
    Grid.prototype.getHeaderFilter = function (colId) {
        var _this = this;
        var col = this.getColumn(colId);
        if (!col) {
            return;
        }
        var filter = null;
        col.header.forEach(function (cell) {
            if (cell.content) {
                var filterEl = _this.content[cell.content].element[colId];
                filter =
                    cell.content === "comboFilter" ? filterEl : _this.getRootView().refs[colId + "_filter"].el;
            }
        });
        return filter;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Grid.prototype.edit = function (rowId, colId, editorType) {
        this.editCell(rowId, colId, editorType);
    };
    Grid.prototype._createView = function () {
        var _this = this;
        return dom_1.create({
            render: function (vm, obj) {
                return render_1.render(vm, obj, _this._htmlEvents, _this.selection, _this._uid);
            },
        }, this);
    };
    Grid.prototype._parseColumns = function (configChanged) {
        if (configChanged === void 0) { configChanged = false; }
        data_1.normalizeColumns(this.config, configChanged);
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        data_1.countColumns(this.config, columns);
    };
    Grid.prototype._parseData = function () {
        this.config.data = this._prepareData(this.data);
        this._detectColsTypes();
        this._checkFilters();
        this._checkMarks();
        this.data.filter(function (i) { return !i.hidden; });
        this._render();
    };
    Grid.prototype._createCollection = function (prep) {
        this.data = new ts_data_1.DataCollection({ prep: prep }, this.events);
    };
    Grid.prototype._getRowIndex = function (rowId) {
        return this.data.getIndex(rowId);
    };
    Grid.prototype._setEventHandlers = function () {
        var _this = this;
        var updater = function (updateObj) { return function (_a) {
            var source = _a.source, target = _a.target;
            if (source && source instanceof Array && source.length > 1) {
                source.map(function (selectedId) { return _this.data.exists(selectedId) && _this.data.update(selectedId, updateObj); });
                return;
            }
            if (_this.data.exists(target)) {
                _this.data.update(target, updateObj);
            }
        }; };
        this.data.events.on(ts_data_1.DataEvents.load, function () {
            _this.data.filter(function (i) { return i; });
            _this._parseData();
            _this._checkFilters();
        });
        this.data.events.on(ts_data_1.DataEvents.change, function (id, status, obj) {
            if (status === "setPage") {
                dom_1.awaitRedraw().then(function () {
                    _this.scrollTo(_this.data.getId(obj[0]).toString(), _this.config.columns[0].id.toString());
                    _this._render();
                });
                return;
            }
            if (status === "add" || status === "update" || status === "remove") {
                _this.config.data = _this._prepareData(_this.data);
            }
            if (id) {
                _this._filterData = _this.data.map(function (el) { return el; }) || [];
                _this._checkFilters();
            }
            _this._detectColsTypes();
            _this._removeMarks();
            _this._checkMarks();
            if (_this.config.autoEmptyRow && (!_this._activeFilters || core_1.isEmptyObj(_this._activeFilters))) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    if (emptyRow.id === id)
                        return;
                    _this.data.move(emptyRow.id, _this.data.getLength() - 1);
                }
                else {
                    _this._addEmptyRow();
                }
            }
            _this._render();
        });
        this.data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this.config.columns.map(function (col) {
                col.header.map(function (cell) {
                    if (cell.content && (cell.content === "selectFilter" || cell.content === "comboFilter")) {
                        col.$uniqueData = [];
                    }
                });
            });
        });
        this.events.on(ts_data_1.DragEvents.beforeDrag, function (data, events) {
            if (_this.data.getItem(data.start)) {
                return _this.events.fire(types_1.GridEvents.beforeRowDrag, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                return _this.events.fire(types_1.GridEvents.beforeColumnDrag, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragStart, function (data, events) {
            updater({ $dragtarget: true });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowStart, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnStart, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragIn, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowIn, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnIn, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.dragOut, function (data, events) {
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.dragRowOut, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.dragColumnOut, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.canDrop, function (data, events) {
            updater({ $drophere: true });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.canRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.canColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.cancelDrop, function (data, events) {
            updater({ $drophere: undefined });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.cancelRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.cancelColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.beforeDrop, function (data, events) {
            if (_this.config.dragItem === "row" &&
                (_this.config.dragMode === "both" || _this.config.dragMode === "target")) {
                return _this.events.fire(types_1.GridEvents.beforeRowDrop, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                return _this.events.fire(types_1.GridEvents.beforeColumnDrop, [data, events]);
            }
        });
        this.events.on(ts_data_1.DragEvents.afterDrop, function (data, events) {
            var _a;
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.afterRowDrop, [data, events]);
                var item = _this.data.getItem(data.start);
                for (var _i = 0, _b = _this.config.columns; _i < _b.length; _i++) {
                    var col = _b[_i];
                    if (typeof item[col.id] === "undefined") {
                        _this.data.update(item.id, (_a = {}, _a[col.id] = null, _a), true);
                    }
                }
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.afterColumnDrop, [data, events]);
            }
            _this.config.data = _this._prepareData(_this.data.map(function (i) { return i; }));
            _this.data.parse(_this.config.data);
        });
        this.events.on(ts_data_1.DragEvents.afterDrag, function (data, events) {
            updater({ $dragtarget: undefined });
            if (_this.data.getItem(data.start)) {
                _this.events.fire(types_1.GridEvents.afterRowDrag, [data, events]);
            }
            else if (_this.config.dragItem === "column" || _this.config.dragItem === "both") {
                _this.events.fire(types_1.GridEvents.afterColumnDrag, [data, events]);
            }
            _this.config.data = _this._prepareData(_this.data instanceof Array ? _this.data.map(function (i) { return i; }) : _this.data);
            _this.data.parse(_this.config.data);
        });
        // TODO: When introducing touch events, remove system events
        this.events.on(types_1.GridEvents.cellMouseDown, function (row, col, e) {
            if (!e.targetTouches) {
                _this._dragStart(e);
            }
            else {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        if ((col.editable !== false && _this.config.editable) || col.editable) {
                            _this.editCell(row.id, col.id, col.editorType);
                        }
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.cellDblClick, [row, col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this._events.on(types_1.GridSystemEvents.cellTouchMove, function (_row, _col, e) {
            _this._touch.start && e.preventDefault();
            _this._clearTouchTimer();
        });
        this._events.on(types_1.GridSystemEvents.cellTouchEnd, function () {
            _this._touch.start = false;
            _this._clearTouchTimer();
        });
        this.events.on(types_1.GridEvents.filterChange, function (val, colId, filter) {
            val = val !== null && val !== void 0 ? val : "";
            if (_this.config.autoEmptyRow) {
                var emptyRow = _this.data.find({ by: "$emptyRow", match: true });
                if (emptyRow) {
                    _this.data.remove(emptyRow.id);
                }
            }
            if (!_this._activeFilters) {
                _this._activeFilters = {};
            }
            var columnConfig = _this._getColumn(colId);
            if (val !== "") {
                _this._activeFilters[colId] = {
                    by: colId,
                    match: val,
                    compare: _this.content[filter].match,
                    multi: (columnConfig === null || columnConfig === void 0 ? void 0 : columnConfig.editorType) === "multiselect",
                };
            }
            else {
                delete _this._activeFilters[colId];
            }
            _this.data.filter(function (i) { return i; });
            for (var compare in _this._activeFilters) {
                _this.data.filter(_this._activeFilters[compare], { add: true });
            }
        });
        this.events.on(types_1.GridEvents.scroll, function (scrollState) {
            _this._scroll = { top: scrollState.y, left: scrollState.x };
            _this.editEnd();
            _this.paint();
        });
        this.events.on(types_1.GridEvents.cellDblClick, function (row, col) {
            if ((col.editable !== false && _this.config.editable) || col.editable) {
                _this.editCell(row.id, col.id, col.editorType);
            }
        });
        this.events.on(types_1.GridEvents.afterEditEnd, function (value, eRow, eCol) {
            var _a;
            var _b;
            if (((_b = _this.config.$editable) === null || _b === void 0 ? void 0 : _b.editor) &&
                (_this.config.$editable.col !== eCol.id || _this.config.$editable.row !== eRow.id))
                return;
            var row;
            var col;
            if (!_this.config.$editable) {
                row = eRow.id;
                col = eCol.id;
            }
            else {
                row = _this.config.$editable.row;
                col = _this.config.$editable.col;
            }
            var item = _this.data.getItem(row);
            delete item.$emptyRow;
            if (value !== undefined) {
                _this.data.update(row, __assign(__assign({}, item), (_a = {}, _a[col] = value, _a)));
            }
            _this.config.$editable = null;
            _this._checkFilters();
            _this.paint();
        });
        this.events.on(types_1.GridEvents.headerCellMouseDown, function (col, e) {
            var target = e.target;
            var resizedColumn = target.getAttribute("dhx_resized");
            if (resizedColumn && _this.events.fire(types_1.GridEvents.beforeResizeStart, [col, e])) {
                columnsResizer_1.startResize(_this, resizedColumn.toString(), e, function () {
                    _this.paint();
                    _this.config.$resizing = null;
                    _this.events.fire(types_1.GridEvents.afterResizeEnd, [col, e]);
                });
            }
            if (e.targetTouches) {
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.headerCellDblClick, [col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this.events.on(types_1.GridEvents.footerCellDblClick, function (col, e) {
            if (e.targetTouches) {
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var doubleTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (doubleTap) {
                        e.preventDefault();
                        // to simulate on touch devices
                        _this.events.fire(types_1.GridEvents.footerCellDblClick, [col, e]);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            }
        });
        this.events.on(types_1.GridEvents.resize, function () {
            _this._parseColumns();
            _this._checkFilters();
        });
    };
    Grid.prototype._addEmptyRow = function () {
        var id = this.data.getId(this.data.getLength() - 1);
        var lastRow = this.data.getItem(id);
        var columns = this.config.columns.filter(function (col) { return !col.hidden; });
        var isEmpty = main_1.isRowEmpty(lastRow);
        if (!isEmpty) {
            this.data.add(columns.reduce(function (total, col) {
                total[col.id] = "";
                return total;
            }, { $emptyRow: true }));
        }
    };
    Grid.prototype._sort = function (by, dir, sortAs) {
        var _this = this;
        if (!dir) {
            if (this._sortBy === by) {
                this._sortDir = this._sortDir === "asc" ? "desc" : "asc";
            }
            else {
                this._sortDir = "asc";
            }
        }
        else {
            this._sortDir = dir;
        }
        var defaultAs = function (item) {
            var col = _this.getColumn(by);
            if (item && col.type === "date") {
                return typeof item === "string" ? date_1.stringToDate(item, col.format).getTime() : item.getTime();
            }
            return item ? "" + item : "";
        };
        this._sortBy = by;
        this.data.sort({
            by: by,
            dir: this._sortDir,
            as: sortAs !== null && sortAs !== void 0 ? sortAs : defaultAs,
        });
        this.events.fire(types_1.GridEvents.afterSort, [this.getColumn(by), this._sortDir]);
    };
    Grid.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    Grid.prototype._checkFilters = function () {
        var _this = this;
        var data = this._filterData;
        if (!data)
            return;
        this.config.columns.forEach(function (col) {
            col.header.forEach(function (cell) {
                if (cell.content && (cell.content === "selectFilter" || cell.content === "comboFilter")) {
                    var headerWithFilterConfig = col.header.find(function (i) { return i.filterConfig; });
                    var unique = data_1.getUnique(data, col.id, headerWithFilterConfig ? headerWithFilterConfig.filterConfig.multiselection : null);
                    if (col.$uniqueData && col.$uniqueData.length > unique.length) {
                        unique.forEach(function (item) {
                            if (!col.$uniqueData.includes(item)) {
                                col.$uniqueData.push(item);
                            }
                        });
                    }
                    else {
                        col.$uniqueData = unique;
                    }
                }
            });
        });
        var _loop_1 = function (compare) {
            var col = this_1.config.columns.find(function (i) { return i.id === compare; });
            var filter = col.header.find(function (i) { return !!i.content; });
            var exist = false;
            if (Array.isArray(this_1._activeFilters[compare].match)) {
                exist = this_1._activeFilters[compare].match.reduce(function (_, i) {
                    if (col.$uniqueData.find(function (j) { return j.toString() === i; }))
                        return true;
                }, false);
            }
            else {
                exist = col.$uniqueData.find(function (i) { return i.toString() === _this._activeFilters[compare].match; });
            }
            if (filter && (filter.content === "selectFilter" || filter.content === "comboFilter") && !exist) {
                delete this_1._activeFilters[compare];
                this_1.data.filter();
            }
            else {
                this_1.data.filter(this_1._activeFilters[compare], { add: true });
            }
        };
        var this_1 = this;
        for (var compare in this._activeFilters) {
            _loop_1(compare);
        }
    };
    Grid.prototype._adjustColumns = function () {
        var _this = this;
        if (typeof this.config.adjust === "boolean" ||
            this.config.adjust === "data" ||
            this.config.adjust === "header" ||
            this.config.adjust === "footer") {
            var columns = this.config.columns.filter(function (col) { return !col.hidden; });
            if (!columns.length)
                return;
            var data = !this.config.data || !this.config.data.length ? this.data.map(function (row) { return row; }) : this.config.data;
            var totalCols_1 = this._adjustColumnsWidth(data, columns);
            this.config.$totalWidth = columns.reduce(function (totalWidth, column) {
                column.$fixed = true;
                var max = column.maxWidth;
                var min = column.minWidth;
                var width = totalCols_1[column.id];
                column.$width = width;
                if (max && width > max) {
                    column.$width = max;
                }
                if (min && column.$width < min) {
                    column.$width = min;
                }
                return (totalWidth += column.$width);
            }, 0);
        }
        else {
            var columns = this.config.columns.filter(function (col) { return !col.hidden && col.adjust; });
            if (!columns.length)
                return;
            columns.forEach(function (col) {
                _this.adjustColumnWidth(col.id, col.adjust);
            });
        }
    };
    Grid.prototype._prepareData = function (data) {
        var _this = this;
        if (this.config.autoHeight)
            this.config.autoHeight = false;
        this._adjustColumns();
        return data.map(function (row) {
            row.$height = row.height || _this.config.rowHeight;
            return row;
        });
    };
    Grid.prototype._adjustColumnsWidth = function (rows, cols, adjust) {
        var _a, _b, _c;
        if (adjust === void 0) { adjust = this.config.adjust; }
        var columnsWidth = {};
        if (adjust === "header" || adjust === true) {
            var currentCols = cols.filter(function (col) { return col.header; });
            var data = data_1.getMaxColsWidth(this._prepareColumnData(currentCols, "header"), currentCols, {
                font: "bold 14.4px Arial",
            }, "header");
            if (data) {
                for (var _i = 0, _d = Object.entries(data); _i < _d.length; _i++) {
                    var _e = _d[_i], key = _e[0], value = _e[1];
                    columnsWidth = Object.assign(columnsWidth, (_a = {},
                        _a[key] = +value + (main_1.isSortable(this.config, this.getColumn(key)) ? 36 : 16),
                        _a));
                }
            }
        }
        if (adjust === "footer" || adjust === true) {
            var currentCols = cols.filter(function (col) { return col.footer; });
            var data = data_1.getMaxColsWidth(this._prepareColumnData(currentCols, "footer"), currentCols, {
                font: "bold 14.4px Arial",
            }, "footer");
            if (data) {
                for (var _f = 0, _g = Object.entries(data); _f < _g.length; _f++) {
                    var _h = _g[_f], key = _h[0], value = _h[1];
                    if ((columnsWidth[key] && columnsWidth[key] < +value + 16) || !columnsWidth[key]) {
                        columnsWidth = Object.assign(columnsWidth, (_b = {},
                            _b[key] = +value + 16,
                            _b));
                    }
                }
            }
        }
        if (adjust === "data" || adjust === true) {
            var data = data_1.getMaxColsWidth(rows, cols, {
                font: "normal 14.4px Arial",
            }, "data");
            if (data) {
                for (var _j = 0, _k = Object.entries(data); _j < _k.length; _j++) {
                    var _l = _k[_j], key = _l[0], value = _l[1];
                    if ((columnsWidth[key] && columnsWidth[key] < +value + 16) || !columnsWidth[key]) {
                        columnsWidth = Object.assign(columnsWidth, (_c = {},
                            _c[key] = +value + 16,
                            _c));
                    }
                }
            }
        }
        return columnsWidth;
    };
    Grid.prototype._prepareColumnData = function (data, type) {
        var _a;
        var _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var totalRow = [];
        for (var i = 0; i < data.length; i++) {
            var row = [];
            for (var k = 0; k < ((_b = data[k]) === null || _b === void 0 ? void 0 : _b[type].length); k++) {
                var rowData = {};
                if ((_d = (_c = data[i]) === null || _c === void 0 ? void 0 : _c[type][k]) === null || _d === void 0 ? void 0 : _d.text) {
                    rowData[data[i].id] = ((_f = (_e = data[i]) === null || _e === void 0 ? void 0 : _e[type][k]) === null || _f === void 0 ? void 0 : _f.text) || "";
                    row.push(rowData);
                }
                else if ((_h = (_g = data[i]) === null || _g === void 0 ? void 0 : _g[type][k]) === null || _h === void 0 ? void 0 : _h.content) {
                    rowData[data[i].id] =
                        this.content[(_k = (_j = data[i]) === null || _j === void 0 ? void 0 : _j[type][k]) === null || _k === void 0 ? void 0 : _k.content].toHtml(this.getColumn(data[i].id), this.config) || "";
                    row.push(rowData);
                }
            }
            for (var j = 0; j < row.length; j++) {
                for (var _i = 0, _l = Object.entries(row[j]); _i < _l.length; _i++) {
                    var _m = _l[_i], key = _m[0], value = _m[1];
                    totalRow[j] = __assign({}, totalRow[j]) || {};
                    totalRow[j] = Object.assign(totalRow[j], (_a = {}, _a[key] = value, _a));
                }
            }
        }
        return totalRow;
    };
    Grid.prototype._dragStart = function (e) {
        if (this.config.dragMode &&
            (this.config.dragItem === "row" || this.config.dragItem === "both") &&
            !this.config.$editable) {
            var column = this._getColumn(e.target.getAttribute("dhx_col_id"));
            if ((column === null || column === void 0 ? void 0 : column.draggable) === false)
                return;
            var item = html_1.locateNode(e, "dhx_id");
            var itemId = item && item.getAttribute("dhx_id");
            if (e.targetTouches) {
                this._touch.start = true;
            }
            return ts_data_1.dragManager.onMouseDown(e, [itemId]);
        }
    };
    Grid.prototype._getColumn = function (colId) {
        for (var _i = 0, _a = this.config.columns; _i < _a.length; _i++) {
            var col = _a[_i];
            if (col.id == colId) {
                return col;
            }
        }
    };
    Grid.prototype._init = function () {
        this.events = new events_1.EventSystem(this);
        this._events = new events_1.EventSystem(this);
        this._attachDataCollection();
        this.export = new Exporter_1.Exporter(this);
        this._setEventHandlers();
    };
    Grid.prototype._attachDataCollection = function () {
        var _this = this;
        var prep = function (data) {
            if (data.spans) {
                _this.config.spans = data.spans;
                data = data.data;
            }
            return data;
        };
        if (this.config.data instanceof ts_data_1.DataCollection) {
            this.data = this.config.data;
            this.config.data = this.data.serialize();
            return;
        }
        this._createCollection(prep);
    };
    Grid.prototype._setMarks = function (col, func) {
        var colCells = this.data.map(function (row) { return ({
            id: row.id,
            data: row[col.id],
            row: row,
        }); });
        var colCellsData = this.data.map(function (row) { return row[col.id]; });
        var _loop_2 = function (cell) {
            var css = func(cell.data, colCellsData, cell.row, col);
            if (css) {
                col.$cellCss = col.$cellCss || {};
                var cellCss_1 = (col.$cellCss[cell.id] || "").split(" ");
                css.split(" ").map(function (item) {
                    if (!cellCss_1.includes(item)) {
                        cellCss_1.push(item);
                    }
                });
                col.$cellCss[cell.id] = cellCss_1.join(" ");
            }
        };
        for (var _i = 0, colCells_1 = colCells; _i < colCells_1.length; _i++) {
            var cell = colCells_1[_i];
            _loop_2(cell);
        }
    };
    Grid.prototype._checkMarks = function () {
        var _this = this;
        this.config.columns.map(function (col) {
            var mark = col.mark;
            if (mark) {
                if (typeof mark === "function") {
                    _this._setMarks(col, mark);
                }
                else {
                    _this._setMarks(col, function (el, c) {
                        var data = [];
                        c.forEach(function (item) {
                            if (item !== null && item !== undefined && item !== "") {
                                data.push(parseFloat(item));
                            }
                        });
                        var min = core_1.getMinArrayNymber(data);
                        var max = core_1.getMaxArrayNymber(data);
                        if (mark.max && max === parseFloat(el)) {
                            return mark.max;
                        }
                        if (mark.min && min === parseFloat(el)) {
                            return mark.min;
                        }
                        return false;
                    });
                }
            }
        });
    };
    Grid.prototype._removeMarks = function () {
        this.config.columns.forEach(function (col) {
            if (col.mark) {
                col.$cellCss = {};
            }
        });
    };
    // [todo] make more smart type detection
    Grid.prototype._detectColsTypes = function () {
        this.config.columns.forEach(function (col) {
            if (col.type) {
                return col;
            }
            if (col.format) {
                col.type = "number";
                return col;
            }
            if (!col.type) {
                col.type = "string";
            }
        });
    };
    Grid.prototype._destroyContent = function () {
        for (var contentName in this.content) {
            if (contentName === "comboFilter") {
                this.content[contentName].destroy();
            }
        }
    };
    Grid.prototype._render = function () {
        this.paint();
    };
    Grid.prototype._initHotKey = function () {
        var handlers = keys_1.getKeysHandlers(this);
        for (var key in handlers) {
            this.keyManager.addHotKey(key, handlers[key]);
        }
        for (var key in this.config.hotkeys) {
            this.keyManager.addHotKey(key, this.config.hotkeys[key]);
        }
    };
    return Grid;
}(view_1.View));
exports.Grid = Grid;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var html_1 = __webpack_require__(2);
var data_1 = __webpack_require__(17);
var main_1 = __webpack_require__(11);
var Cells_1 = __webpack_require__(39);
var FixedCols_1 = __webpack_require__(128);
var FixedRows_1 = __webpack_require__(70);
var core_1 = __webpack_require__(1);
var BORDERS = 2;
function getRenderConfig(obj, data, wrapperSizes) {
    var config = obj.config;
    var columns = config.columns.filter(function (col) { return !col.hidden; });
    var positions = data_1.calculatePositions(wrapperSizes.width, wrapperSizes.height, obj._scroll, config, data);
    var currentColumns = columns.slice(positions.xStart, positions.xEnd);
    var currentRows = data.slice(positions.yStart, positions.yEnd);
    return __assign(__assign({}, config), { data: data,
        columns: columns, scroll: obj._scroll, $positions: positions, headerHeight: config.$headerLevel * config.headerRowHeight, footerHeight: config.$footerLevel * config.footerRowHeight, firstColId: columns[0] && columns[0].id, events: obj.events, _events: obj._events, currentColumns: currentColumns,
        currentRows: currentRows, sortBy: obj._sortBy, sortDir: obj._sortDir, content: obj.content, gridId: obj._uid });
}
exports.getRenderConfig = getRenderConfig;
function getElementSizes(element) {
    if (!element)
        return;
    if (!element.tagName)
        element = element._parent._container;
    if (!element)
        return;
    var styles = element.currentStyle || window.getComputedStyle(element);
    var paddingsByWidth = parseFloat(styles.paddingLeft) + parseFloat(styles.paddingRight) || 0;
    var paddingsByHeight = parseFloat(styles.paddingTop) + parseFloat(styles.paddingBottom) || 0;
    return {
        width: element.clientWidth - paddingsByWidth,
        height: element.clientHeight - paddingsByHeight,
    };
}
function getGridData(renderConfig, shifts) {
    var content = Cells_1.getCells(renderConfig);
    var contentSpans = Cells_1.getSpans(renderConfig);
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var resizedLine;
    var colums = renderConfig.columns;
    if (renderConfig.$resizing) {
        var colIndex = core_1.findIndex(colums, function (col) { return col.id === renderConfig.$resizing; });
        var firstCellLeft = main_1.getTotalWidth(colums.slice(0, colIndex)) + colums[colIndex].$width;
        resizedLine = dom_1.el(".dhx_grid-resize-line", {
            style: {
                top: 0,
                left: firstCellLeft,
                height: renderConfig.$totalHeight,
            },
        });
    }
    var selection = renderConfig.selection ? renderConfig.selection.toHTML() : null;
    selection =
        typeof selection === "string" ? dom_1.el("div.dhx_selection", { ".innerHTML": selection }) : selection;
    var pos = renderConfig.$positions;
    var events = {};
    function getCellInfo(e) {
        var rowId = html_1.locate(e, "dhx_id");
        var colId = html_1.locate(e, "dhx_col_id");
        var row = renderConfig.currentRows.filter(function (item) { return item.id === rowId; })[0];
        var col = renderConfig.currentColumns.filter(function (item) { return item.id === colId; })[0];
        return {
            row: rowId ? row : {},
            col: colId ? col : {},
        };
    }
    if (renderConfig.eventHandlers) {
        for (var key in renderConfig.eventHandlers) {
            if (renderConfig.eventHandlers.hasOwnProperty(key)) {
                var event_1 = renderConfig.eventHandlers[key];
                events[key] = html_1.eventHandler(function (e) { return getCellInfo(e); }, __assign({}, event_1));
            }
        }
    }
    return dom_1.el(".dhx_data-wrap", __assign({ style: {
            height: renderConfig.$totalHeight,
            width: renderConfig.$totalWidth,
            "padding-left": shifts.x,
            "padding-top": shifts.y,
        }, role: "presentation" }, events), [
        dom_1.el(".dhx_grid_data", __assign(__assign({ _flags: dom_1.KEYED_LIST }, Cells_1.getHandlers(pos.yStart, pos.xStart, renderConfig)), getRowAriaAttrs(renderConfig.data.length)), content),
        dom_1.el(".dhx_span-spans", { role: "presentation" }, contentSpans),
        dom_1.el(".dhx_grid_selection", { _ref: "selection", "aria-hidden": "true" }, [selection, resizedLine]),
    ]);
}
function getContentHeight(renderConfig, isSticky, wrapperSizes) {
    var contentHeight = wrapperSizes.height - BORDERS;
    contentHeight = isSticky ? contentHeight : contentHeight - renderConfig.headerHeight;
    var isFooter = renderConfig.$footer;
    return (contentHeight = isFooter
        ? isSticky
            ? contentHeight
            : contentHeight - renderConfig.footerHeight
        : contentHeight);
}
function applyAutoWidth(config, wrapperSizes, firstApply, resizer, scrollViewConfig) {
    if (firstApply === void 0) { firstApply = true; }
    if (resizer === void 0) { resizer = false; }
    if (scrollViewConfig === void 0) { scrollViewConfig = false; }
    var scrollbarY = !scrollViewConfig && config.$totalHeight >= wrapperSizes.height - config.headerRowHeight
        ? html_1.getScrollbarWidth()
        : 0;
    var newTotalWidth = wrapperSizes.width - BORDERS - scrollbarY;
    var columns = config.columns.filter(function (col) { return !col.hidden; });
    var growingColumns = columns.filter(function (col) { return !col.width && !col.$fixed && main_1.isAutoWidth(config, col); });
    var nonGrowingColumnsWidth = main_1.getTotalWidth(columns.filter(function (col) { return col.width || col.$fixed || !main_1.isAutoWidth(config, col); }));
    var fullGravity = growingColumns.reduce(function (gravity, col) { return gravity + (col.gravity || 1); }, 0);
    if (newTotalWidth < config.$totalWidth) {
        var growingColumnsWidth_1 = growingColumns.reduce(function (width, col) { return width + (col.maxWidth || col.$width); }, 0);
        if (growingColumns.length > 1) {
            growingColumns.forEach(function (col) {
                var newWidth = 0;
                if (firstApply) {
                    newWidth =
                        Math.abs(newTotalWidth - growingColumnsWidth_1) * ((col.gravity || 1) / fullGravity);
                }
                else {
                    newWidth =
                        Math.abs(newTotalWidth - nonGrowingColumnsWidth) * ((col.gravity || 1) / fullGravity);
                }
                var wrongMin = newWidth < col.minWidth;
                var wrongMax = newWidth > col.maxWidth;
                if (!wrongMin && !wrongMax) {
                    col.$width = newWidth;
                }
                else if (wrongMin) {
                    nonGrowingColumnsWidth += col.$width - newWidth;
                    col.$fixed = true;
                }
                else if (wrongMax) {
                    col.$width = col.maxWidth;
                    col.$fixed = true;
                }
            });
        }
    }
    else {
        growingColumns.forEach(function (col) {
            var newWidth = Math.abs(newTotalWidth - nonGrowingColumnsWidth) * ((col.gravity || 1) / fullGravity);
            var wrongMin = newWidth < col.minWidth;
            var wrongMax = newWidth > col.maxWidth;
            if (!wrongMin && !wrongMax) {
                col.$width = newWidth;
            }
            else if (wrongMin) {
                nonGrowingColumnsWidth += col.$width - newWidth;
                if (resizer)
                    col.$fixed = true;
            }
            else if (wrongMax) {
                col.$width = col.maxWidth;
                if (resizer)
                    col.$fixed = true;
            }
            if (!firstApply && col.$fixed) {
                delete col.$fixed;
            }
        });
    }
    if (firstApply) {
        applyAutoWidth(config, wrapperSizes, false, resizer, scrollViewConfig);
    }
}
function render(vm, obj, htmlEvents, selection, uid) {
    if (!obj._container) {
        obj.config.width = 1;
        obj.config.height = 1;
    }
    // if grid placed inside another component, it will fit to its container
    if (vm && vm.node && vm.node.parent && vm.node.parent.el) {
        var parentNode = vm.node.parent.el;
        var parentSizes = getElementSizes(parentNode);
        obj.config.width = parentSizes.width;
        obj.config.height = parentSizes.height;
    }
    var config = obj.config;
    // when grid is destructing and user try to repaint it
    if (!config) {
        return dom_1.el("div");
    }
    if (!config.columns.length) {
        return dom_1.el(".dhx_grid", {
            dhx_root_id: config.rootParent,
        });
    }
    var data = obj.data.getRawData(0, -1, null, 2);
    if (config.columns.reduce(function (check, col) { return (check = !col.hidden ? col.hidden : check); }, true)) {
        config.$totalHeight = 0;
    }
    else {
        config.$totalHeight = data.reduce(function (total, _a) {
            var $height = _a.$height;
            return (total += $height || 0);
        }, 0);
    }
    var sizes = getElementSizes(obj._container);
    var wrapperSizes = {
        width: (config.width ? config.width : sizes && sizes.width) || 0,
        height: (config.height ? config.height : sizes && sizes.height) || 0,
    };
    // TODO: Remove scroll
    if (main_1.isAutoWidth(config)) {
        applyAutoWidth(config, wrapperSizes);
        config.$totalWidth = main_1.getTotalWidth(config.columns.filter(function (col) { return !col.hidden; }));
    }
    config.width = wrapperSizes.width;
    config.height = wrapperSizes.height;
    var renderConfig = getRenderConfig(obj, data, wrapperSizes);
    renderConfig.selection = selection;
    renderConfig.datacollection = obj.data;
    var shifts = Cells_1.getShifts(renderConfig);
    var isSticky = main_1.isCssSupport("position", "sticky");
    var gridBodyHeight = getContentHeight(renderConfig, isSticky, wrapperSizes);
    var layoutState = {
        wrapper: wrapperSizes,
        sticky: isSticky,
        shifts: shifts,
        gridBodyHeight: gridBodyHeight,
    };
    var header = FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "header", position: "top" }));
    var footer = renderConfig.$footer
        ? FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "footer", position: "bottom" }))
        : null;
    var lessByWidth = renderConfig.$totalWidth + BORDERS < wrapperSizes.width ? "dhx_grid-less-width" : "";
    var lessByHeight = renderConfig.$totalHeight + BORDERS < wrapperSizes.height ? "dhx_grid-less-height" : "";
    var getGridAriaAttrs = function (rows, cols, isEditable, isMultiselectable) { return ({
        role: "grid",
        "aria-rowcount": rows.length,
        "aria-colcount": cols.filter(function (col) { return !col.hidden; }).length,
        "aria-readonly": isEditable ? "false" : "true",
        "aria-multiselectable": isMultiselectable ? "true" : "false",
    }); };
    // dirty: but work. Change checking of rendering Grid
    if (!vm.node) {
        var _a = obj.getScrollState(), x_1 = _a.x, y_1 = _a.y;
        dom_1.awaitRedraw().then(function () {
            obj.scroll(x_1, y_1);
        });
    }
    return dom_1.el(".dhx_grid.dhx_widget", __assign({ class: (renderConfig.css || "") +
            (!isSticky ? " dhx_grid_border" : "") +
            (config.multiselection ? " dhx_no-select--pointer" : ""), dhx_widget_id: uid, dhx_root_id: config.rootParent }, getGridAriaAttrs(renderConfig.data, config.columns, renderConfig.editable, renderConfig.multiselection)), [
        dom_1.resizer(function (changeWith) {
            if (main_1.isAutoWidth(obj.config) && !!changeWith) {
                config.$totalWidth = 0;
                applyAutoWidth(config, wrapperSizes, true, true);
            }
            return obj.paint();
        }),
        dom_1.el(".dhx_grid-content", {
            style: __assign({}, wrapperSizes),
            onclick: htmlEvents.onclick,
            onmouseover: htmlEvents.onmouseover,
            class: (lessByWidth + " " + lessByHeight).trim(),
            role: "presentation",
        }, [
            isSticky ? null : header,
            dom_1.el(".dhx_grid-body", {
                style: {
                    height: gridBodyHeight,
                    width: wrapperSizes.width - BORDERS,
                },
                onscroll: htmlEvents.onscroll,
                _ref: "grid_body",
                role: "presentation",
            }, [
                dom_1.el("div", {}, [
                    isSticky ? header : null,
                    getGridData(renderConfig, shifts),
                    isSticky ? footer : null,
                ]),
            ]),
            FixedCols_1.getFixedColsHeader(renderConfig, layoutState),
            FixedCols_1.getFixedCols(renderConfig, layoutState),
            isSticky ? null : footer,
        ]),
    ]);
}
exports.render = render;
function proRender(vm, obj, htmlEvents, selection, uid) {
    if (!obj._container) {
        obj.config.width = 1;
        obj.config.height = 1;
    }
    // if grid placed inside another component, it will fit to its container
    if (vm && vm.node && vm.node.parent && vm.node.parent.el) {
        var parentNode = vm.node.parent.el;
        var parentSizes = getElementSizes(parentNode);
        obj.config.width = parentSizes.width;
        obj.config.height = parentSizes.height;
    }
    var config = obj.config;
    // when grid is destructing and user try to repaint it
    if (!config) {
        return dom_1.el("div");
    }
    if (!config.columns.length) {
        return dom_1.el(".dhx_grid", {
            dhx_root_id: config.rootParent,
        });
    }
    var data = obj.data.getRawData(0, -1, null, 2);
    if (config.columns.reduce(function (check, col) { return (check = !col.hidden ? col.hidden : check); }, true)) {
        config.$totalHeight = 0;
    }
    else {
        config.$totalHeight = data.reduce(function (total, _a) {
            var $height = _a.$height;
            return (total += $height || 0);
        }, 0);
    }
    var sizes = getElementSizes(obj._container);
    var wrapperSizes = {
        width: (config.width ? config.width : sizes && sizes.width) || 0,
        height: (config.height ? config.height : sizes && sizes.height) || 0,
    };
    // TODO: Remove scroll
    if (main_1.isAutoWidth(config)) {
        applyAutoWidth(config, wrapperSizes, true, false, obj.scrollView && obj.scrollView.config.enable);
        config.$totalWidth = main_1.getTotalWidth(config.columns.filter(function (col) { return !col.hidden; }));
    }
    config.width = wrapperSizes.width;
    config.height = wrapperSizes.height;
    var renderConfig = getRenderConfig(obj, data, wrapperSizes);
    renderConfig.selection = selection;
    renderConfig.datacollection = obj.data;
    var shifts = Cells_1.getShifts(renderConfig);
    var isSticky = main_1.isCssSupport("position", "sticky");
    var gridBodyHeight = getContentHeight(renderConfig, isSticky, wrapperSizes);
    var layoutState = {
        wrapper: wrapperSizes,
        sticky: isSticky,
        shifts: shifts,
        gridBodyHeight: gridBodyHeight,
    };
    var header = FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "header", position: "top" }));
    var footer = renderConfig.$footer
        ? FixedRows_1.getFixedRows(renderConfig, __assign(__assign({}, layoutState), { name: "footer", position: "bottom" }))
        : null;
    var lessByWidth = renderConfig.$totalWidth + BORDERS < wrapperSizes.width ? "dhx_grid-less-width" : "";
    var lessByHeight = renderConfig.$totalHeight + BORDERS < wrapperSizes.height ? "dhx_grid-less-height" : "";
    // dirty: but work. Change checking of rendering Grid
    if (!vm.node) {
        var _a = obj.getScrollState(), x_2 = _a.x, y_2 = _a.y;
        dom_1.awaitRedraw().then(function () {
            obj.scroll(x_2, y_2);
        });
    }
    var gridContent = dom_1.el("div", {}, [
        isSticky ? header : null,
        getGridData(renderConfig, shifts),
        isSticky ? footer : null,
    ]);
    return dom_1.el(".dhx_grid.dhx_widget", {
        class: (renderConfig.css || "") +
            (!isSticky ? " dhx_grid_border" : "") +
            (config.multiselection ? " dhx_no-select--pointer" : ""),
        dhx_widget_id: uid,
        dhx_root_id: config.rootParent,
        role: "grid",
        "aria-rowcount": renderConfig.data.length,
        "aria-colcount": config.columns.filter(function (col) { return !col.hidden; }).length,
    }, [
        dom_1.resizer(function (changeWith) {
            if (main_1.isAutoWidth(obj.config) && !!changeWith) {
                config.$totalWidth = 0;
                applyAutoWidth(config, wrapperSizes, true, true);
            }
            return obj.paint();
        }),
        dom_1.el(".dhx_grid-content", {
            style: __assign({}, wrapperSizes),
            onclick: htmlEvents.onclick,
            onmouseover: htmlEvents.onmouseover,
            class: (lessByWidth + " " + lessByHeight).trim(),
            role: "presentation",
        }, [
            isSticky ? null : header,
            dom_1.el(".dhx_grid-body", {
                style: {
                    height: gridBodyHeight,
                    width: wrapperSizes.width - BORDERS,
                },
                onscroll: htmlEvents.onscroll,
                _ref: "grid_body",
                role: "presentation",
            }, [
                obj.scrollView && obj.scrollView.config.enable
                    ? obj.scrollView.render([gridContent])
                    : gridContent,
            ]),
            FixedCols_1.getFixedColsHeader(renderConfig, layoutState),
            FixedCols_1.getFixedCols(renderConfig, layoutState),
            isSticky ? null : footer,
        ]),
    ]);
}
exports.proRender = proRender;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(41);
var Cell_1 = __webpack_require__(58);
var dom_1 = __webpack_require__(0);
var Layout = /** @class */ (function (_super) {
    __extends(Layout, _super);
    function Layout(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        // root layout
        _this._root = _this.config.parent || _this;
        _this._all = {};
        _this._parseConfig();
        if (_this.config.activeTab) {
            _this.config.activeView = _this.config.activeTab;
        }
        // Need replace to tabbar
        if (_this.config.views) {
            _this.config.activeView = _this.config.activeView || _this._cells[0].id;
            _this._isViewLayout = true;
        }
        if (!config.parent) {
            var view = dom_1.create({ render: function () { return _this.toVDOM(); } }, _this);
            _this.mount(parent, view);
        }
        return _this;
    }
    Layout.prototype.destructor = function () {
        for (var key in this._all) {
            if (Object.prototype.hasOwnProperty.call(this._all, key)) {
                var cell = this._all[key];
                if (cell.getWidget() && typeof cell.getWidget().destructor === "function") {
                    cell.getWidget().destructor();
                }
                cell.destructor();
            }
        }
        this.config = this._cells = this._root = this._xLayout = this._isViewLayout = null;
        this._all = {};
        this.unmount();
    };
    Layout.prototype.toVDOM = function () {
        if (this._isViewLayout) {
            var roots = [this.getCell(this.config.activeView).toVDOM()];
            return _super.prototype.toVDOM.call(this, roots);
        }
        var nodes = [];
        this._inheritTypes();
        this._cells.forEach(function (cell) {
            var node = cell.toVDOM();
            if (Array.isArray(node)) {
                nodes = nodes.concat(node);
            }
            else {
                nodes.push(node);
            }
        });
        return _super.prototype.toVDOM.call(this, nodes);
    };
    Layout.prototype.removeCell = function (id) {
        if (!this.events.fire(types_1.LayoutEvents.beforeRemove, [id])) {
            return;
        }
        var root = this.config.parent || this;
        if (root !== this) {
            return root.removeCell(id);
        }
        // this === root layout
        var view = this.getCell(id);
        if (view) {
            var parent_1 = view.getParent();
            delete this._all[id];
            parent_1._cells = parent_1._cells.filter(function (cell) { return cell.id != id; });
            parent_1.paint();
        }
        this.events.fire(types_1.LayoutEvents.afterRemove, [id]);
    };
    Layout.prototype.addCell = function (config, index) {
        if (index === void 0) { index = -1; }
        if (!this.events.fire(types_1.LayoutEvents.beforeAdd, [config.id])) {
            return;
        }
        var view = this._createCell(config);
        if (index < 0) {
            index = this._cells.length + index + 1;
        }
        this._cells.splice(index, 0, view);
        this.paint();
        if (!this.events.fire(types_1.LayoutEvents.afterAdd, [config.id])) {
            return;
        }
    };
    Layout.prototype.getId = function (index) {
        if (index < 0) {
            index = this._cells.length + index;
        }
        return this._cells[index] ? this._cells[index].id : undefined;
    };
    Layout.prototype.getRefs = function (name) {
        return this._root.getRootView().refs[name];
    };
    Layout.prototype.getCell = function (id) {
        return this._root._all[id];
    };
    Layout.prototype.forEach = function (callback, parent, level) {
        if (level === void 0) { level = Infinity; }
        if (!this._haveCells(parent) || level < 1) {
            return;
        }
        var array;
        if (parent) {
            array = this._root._all[parent]._cells;
        }
        else {
            array = this._root._cells;
        }
        for (var index = 0; index < array.length; index++) {
            var cell = array[index];
            callback.call(this, cell, index, array);
            if (this._haveCells(cell.id)) {
                cell.forEach(callback, cell.id, --level);
            }
        }
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Layout.prototype.cell = function (id) {
        return this.getCell(id);
    };
    Layout.prototype._getCss = function (content) {
        var layoutCss = this._xLayout ? "dhx_layout-columns" : "dhx_layout-rows";
        var directionCss = this.config.align ? " " + layoutCss + "--" + this.config.align : "";
        if (content) {
            return (layoutCss +
                " dhx_layout-cell" +
                (this.config.align ? " dhx_layout-cell--" + this.config.align : ""));
        }
        else {
            var cellCss = this.config.parent ? _super.prototype._getCss.call(this) : "dhx_widget dhx_layout";
            var fullModeCss = this.config.parent ? "" : " dhx_layout-cell";
            return cellCss + (this.config.full ? fullModeCss : " " + layoutCss) + directionCss;
        }
    };
    Layout.prototype._parseConfig = function () {
        var _this = this;
        var config = this.config;
        var cells = config.rows || config.cols || config.views || [];
        this._xLayout = !config.rows;
        this._cells = cells.map(function (a) { return _this._createCell(a); });
    };
    Layout.prototype._createCell = function (cell) {
        var view;
        if (cell.rows || cell.cols || cell.views) {
            cell.parent = this._root;
            view = new Layout(this, cell);
        }
        else {
            view = new Cell_1.Cell(this, cell);
        }
        // FIxME
        this._root._all[view.id] = view;
        if (cell.init) {
            cell.init(view, cell);
        }
        return view;
    };
    Layout.prototype._haveCells = function (id) {
        if (id) {
            var array = this._root._all[id];
            return array._cells && array._cells.length > 0;
        }
        return Object.keys(this._all).length > 0;
    };
    Layout.prototype._inheritTypes = function (obj) {
        var _this = this;
        if (obj === void 0) { obj = this._cells; }
        if (Array.isArray(obj)) {
            obj.forEach(function (cell) { return _this._inheritTypes(cell); });
        }
        else {
            var cellConfig = obj.config;
            if (cellConfig.rows || cellConfig.cols) {
                var viewParent = obj.getParent();
                if (!cellConfig.type && viewParent) {
                    if (viewParent.config.type) {
                        cellConfig.type = viewParent.config.type;
                    }
                    else {
                        this._inheritTypes(viewParent);
                    }
                }
            }
        }
    };
    return Layout;
}(Cell_1.Cell));
exports.Layout = Layout;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var view_1 = __webpack_require__(7);
var types_1 = __webpack_require__(41);
var helpers_1 = __webpack_require__(110);
var events_1 = __webpack_require__(5);
var ts_grid_1 = __webpack_require__(24);
var Cell = /** @class */ (function (_super) {
    __extends(Cell, _super);
    function Cell(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        _this._disabled = [];
        var p = parent;
        if (p && p.isVisible) {
            _this._parent = p;
        }
        if (_this._parent && _this._parent.events) {
            _this.events = _this._parent.events;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
        }
        _this.config.full =
            _this.config.full === undefined
                ? Boolean(_this.config.header ||
                    _this.config.collapsable ||
                    _this.config.headerHeight ||
                    _this.config.headerIcon ||
                    _this.config.headerImage)
                : _this.config.full;
        _this._initHandlers();
        _this.id = _this.config.id || core_1.uid();
        return _this;
    }
    Cell.prototype.paint = function () {
        if (this.isVisible()) {
            var view = this.getRootView();
            if (view) {
                view.redraw();
            }
            else {
                this._parent.paint();
            }
        }
    };
    Cell.prototype.isVisible = function () {
        // top level node
        if (!this._parent) {
            if (this._container && this._container.tagName) {
                return true;
            }
            return Boolean(this.getRootNode());
        }
        // check active view in case of multiview
        var active = this._parent.config.activeView;
        if (active && active !== this.id) {
            return false;
        }
        // check that all parents of the cell are visible as well
        return !this.config.hidden && (!this._parent || this._parent.isVisible());
    };
    Cell.prototype.hide = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeHide, [this.id])) {
            return;
        }
        this.config.hidden = true;
        if (this._parent && this._parent.paint) {
            this._parent.paint();
        }
        this.events.fire(types_1.LayoutEvents.afterHide, [this.id]);
    };
    Cell.prototype.show = function () {
        var _this = this;
        if (!this.events.fire(types_1.LayoutEvents.beforeShow, [this.id])) {
            return;
        }
        if (this._parent && this._parent.config && this._parent.config.activeView !== undefined) {
            this._parent.config.activeView = this.id;
        }
        else {
            this.config.hidden = false;
        }
        if (this._parent && !this._parent.isVisible()) {
            this._parent.show();
        }
        this.paint();
        // [dirty]
        if (this._ui instanceof ts_grid_1.Grid && this._ui.config.keyNavigation) {
            dom_1.awaitRedraw().then(function () {
                _this._ui.setColumns(_this._ui.config.columns);
            });
        }
        this.events.fire(types_1.LayoutEvents.afterShow, [this.id]);
    };
    Cell.prototype.expand = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeExpand, [this.id])) {
            return;
        }
        this.config.collapsed = false;
        this.events.fire(types_1.LayoutEvents.afterExpand, [this.id]);
        this.paint();
    };
    Cell.prototype.collapse = function () {
        if (!this.events.fire(types_1.LayoutEvents.beforeCollapse, [this.id])) {
            return;
        }
        this.config.collapsed = true;
        this.events.fire(types_1.LayoutEvents.afterCollapse, [this.id]);
        this.paint();
    };
    Cell.prototype.toggle = function () {
        if (this.config.collapsed) {
            this.expand();
        }
        else {
            this.collapse();
        }
    };
    Cell.prototype.getParent = function () {
        return this._parent;
    };
    Cell.prototype.destructor = function () {
        this.events && this.events.clear();
        this.config = this.events = this.id = null;
        this._parent = this._handlers = this._uid = this._disabled = this._resizerHandlers = null;
        this.unmount();
    };
    Cell.prototype.getWidget = function () {
        return this._ui;
    };
    Cell.prototype.getCellView = function () {
        return this._parent && this._parent.getRefs(this._uid);
    };
    Cell.prototype.attach = function (name, config) {
        var _this = this;
        this.config.html = null;
        if (typeof name === "object") {
            this._ui = name;
        }
        else if (typeof name === "string") {
            this._ui = new window.dhx[name](null, config);
        }
        else if (typeof name === "function") {
            if (name.prototype instanceof view_1.View) {
                this._ui = new name(null, config);
            }
            else {
                this._ui = {
                    getRootView: function () {
                        return name(config);
                    },
                };
            }
        }
        this.paint();
        // [dirty]
        if (this._ui instanceof ts_grid_1.Grid && this._ui.config.keyNavigation) {
            dom_1.awaitRedraw().then(function () {
                _this._ui.setColumns(_this._ui.config.columns);
            });
        }
        return this._ui;
    };
    Cell.prototype.attachHTML = function (html) {
        this.config.html = html;
        this.paint();
    };
    Cell.prototype.toVDOM = function (nodes) {
        var _a;
        if (this.config === null) {
            this.config = {};
        }
        if (this.config.hidden) {
            return;
        }
        var style = this._calculateStyle();
        var stylePadding = core_1.isDefined(this.config.padding)
            ? !isNaN(Number(this.config.padding))
                ? { padding: this.config.padding + "px" }
                : { padding: this.config.padding }
            : "";
        var fullStyle = this.config.full || this.config.html ? style : __assign(__assign({}, style), stylePadding);
        var kids;
        if (!this.config.html) {
            if (this._ui) {
                var view = this._ui.getRootView();
                if (view.render) {
                    view = dom_1.inject(view);
                }
                kids = [view];
            }
            else {
                kids = nodes || null;
            }
        }
        var resizer = this.config.resizable && !this._isLastCell() && !this.config.collapsed
            ? dom_1.el(".dhx_layout-resizer." +
                (this._isXDirection() ? "dhx_layout-resizer--x" : "dhx_layout-resizer--y"), __assign(__assign({}, this._resizerHandlers), { _ref: "resizer_" + this._uid, tabindex: 0 }), [
                dom_1.el("span.dhx_layout-resizer__icon", {
                    class: "dxi " +
                        (this._isXDirection() ? "dxi-dots-vertical" : "dxi-dots-horizontal"),
                }),
            ])
            : null;
        var handlers = {};
        if (this.config.on) {
            for (var key in this.config.on) {
                handlers["on" + key] = this.config.on[key];
            }
        }
        var typeClass = "";
        var isParent = this.config.cols || this.config.rows;
        if (this.config.type && isParent) {
            switch (this.config.type) {
                case "line":
                    typeClass = " dhx_layout-line";
                    break;
                case "wide":
                    typeClass = " dhx_layout-wide";
                    break;
                case "space":
                    typeClass = " dhx_layout-space";
                    break;
                default:
                    break;
            }
        }
        var cell = dom_1.el("div", __assign(__assign((_a = { _key: this._uid, _ref: this._uid }, _a["aria-label"] = this.config.id ? "tab-content-" + this.config.id : null, _a), handlers), { class: this._getCss(false) +
                (this.config.css ? " " + this.config.css : "") +
                (this.config.collapsed ? " dhx_layout-cell--collapsed" : "") +
                (this.config.resizable ? " dhx_layout-cell--resizable" : "") +
                (this.config.type && !this.config.full ? typeClass : ""), style: fullStyle }), this.config.full
            ? [
                dom_1.el("div", {
                    tabindex: this.config.collapsable ? "0" : "-1",
                    role: this.config.collapsable ? "button" : null,
                    "aria-label": this.config.collapsable
                        ? "click to " + (this.config.collapsed ? "expand" : "collapse")
                        : null,
                    class: "dhx_layout-cell-header" +
                        (this._isXDirection()
                            ? " dhx_layout-cell-header--col"
                            : " dhx_layout-cell-header--row") +
                        (this.config.collapsable ? " dhx_layout-cell-header--collapseble" : "") +
                        (this.config.collapsed ? " dhx_layout-cell-header--collapsed" : "") +
                        (((this.getParent() || {}).config || {}).isAccordion
                            ? " dhx_layout-cell-header--accordion"
                            : ""),
                    style: {
                        height: this.config.headerHeight,
                    },
                    onclick: this._handlers.toggle,
                    onkeydown: this._handlers.enterCollapse,
                }, [
                    this.config.headerIcon &&
                        dom_1.el("span.dhx_layout-cell-header__icon", {
                            class: this.config.headerIcon,
                        }),
                    this.config.headerImage &&
                        dom_1.el(".dhx_layout-cell-header__image-wrapper", [
                            dom_1.el("img", {
                                src: this.config.headerImage,
                                class: "dhx_layout-cell-header__image",
                            }),
                        ]),
                    this.config.header &&
                        dom_1.el("h3.dhx_layout-cell-header__title", this.config.header),
                    this.config.collapsable
                        ? dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: this._getCollapseIcon(),
                        })
                        : dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: "dxi dxi-empty",
                        }),
                ]),
                !this.config.collapsed
                    ? dom_1.el("div", {
                        style: __assign(__assign({}, stylePadding), { height: "calc(100% - " + (this.config.headerHeight || 37) + "px)" }),
                        ".innerHTML": this.config.html,
                        class: this._getCss(true) +
                            " dhx_layout-cell-content" +
                            (this.config.type ? typeClass : ""),
                    }, kids)
                    : null,
            ]
            : this.config.html &&
                !(this.config.rows &&
                    this.config.cols &&
                    this.config.views)
                ? [
                    !this.config.collapsed
                        ? dom_1.el(".dhx_layout-cell-content", {
                            ".innerHTML": this.config.html,
                            style: stylePadding,
                        })
                        : null,
                ]
                : kids);
        return resizer ? [cell, resizer] : cell;
    };
    Cell.prototype._getCss = function (_content) {
        return "dhx_layout-cell";
    };
    Cell.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            enterCollapse: function (e) {
                if (e.keyCode === 13) {
                    _this._handlers.toggle();
                }
            },
            collapse: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.collapse();
            },
            expand: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.expand();
            },
            toggle: function () {
                if (!_this.config.collapsable) {
                    return;
                }
                _this.toggle();
            },
        };
        var blockOpts = {
            left: null,
            top: null,
            isActive: false,
            range: null,
            xLayout: null,
            nextCell: null,
            size: null,
            resizerLength: null,
            margin: null,
        };
        var resizeMove = function (event) {
            if (!blockOpts.isActive) {
                return;
            }
            var clientX = event.targetTouches ? event.targetTouches[0].clientX : event.clientX;
            var clientY = event.targetTouches ? event.targetTouches[0].clientY : event.clientY;
            var newValue = blockOpts.xLayout
                ? clientX - blockOpts.range.min + window.pageXOffset
                : clientY - blockOpts.range.min + window.pageYOffset;
            var prop = blockOpts.xLayout ? "width" : "height";
            if (newValue < 0) {
                newValue = blockOpts.resizerLength / 2;
            }
            else if (newValue > blockOpts.size) {
                newValue = blockOpts.size - blockOpts.resizerLength;
            }
            _this.config[prop] = newValue - blockOpts.resizerLength / 2 + "px";
            blockOpts.nextCell.config[prop] = blockOpts.size - newValue - blockOpts.resizerLength / 2 + "px";
            _this.paint();
            _this.events.fire(types_1.LayoutEvents.resize, [_this.id]);
        };
        var resizeEnd = function (event) {
            blockOpts.isActive = false;
            document.body.classList.remove("dhx_no-select--resize");
            if (!event.targetTouches) {
                document.removeEventListener("mouseup", resizeEnd);
                document.removeEventListener("mousemove", resizeMove);
            }
            else {
                document.removeEventListener("touchend", resizeEnd);
                document.removeEventListener("touchmove", resizeMove);
            }
            _this.events.fire(types_1.LayoutEvents.afterResizeEnd, [_this.id]);
        };
        var resizeStart = function (event) {
            event.targetTouches && event.preventDefault();
            if (event.which === 3) {
                return;
            }
            if (blockOpts.isActive) {
                resizeEnd(event);
            }
            if (!_this.events.fire(types_1.LayoutEvents.beforeResizeStart, [_this.id])) {
                return;
            }
            document.body.classList.add("dhx_no-select--resize");
            var block = _this.getCellView();
            var nextCell = _this._getNextCell();
            var nextBlock = nextCell.getCellView();
            var resizerBlock = _this._getResizerView();
            var blockOffsets = block.el.getBoundingClientRect();
            var resizerOffsets = resizerBlock.el.getBoundingClientRect();
            var nextBlockOffsets = nextBlock.el.getBoundingClientRect();
            blockOpts.xLayout = _this._isXDirection();
            blockOpts.left = blockOffsets.left + window.pageXOffset;
            blockOpts.top = blockOffsets.top + window.pageYOffset;
            blockOpts.margin = helpers_1.getMarginSize(_this.getParent().config, blockOpts.xLayout);
            blockOpts.range = helpers_1.getBlockRange(blockOffsets, nextBlockOffsets, blockOpts.xLayout);
            blockOpts.size = blockOpts.range.max - blockOpts.range.min - blockOpts.margin;
            blockOpts.isActive = true;
            blockOpts.nextCell = nextCell;
            blockOpts.resizerLength = blockOpts.xLayout ? resizerOffsets.width : resizerOffsets.height;
        };
        this._resizerHandlers = {
            onmousedown: function (e) {
                resizeStart(e);
                document.addEventListener("mouseup", resizeEnd);
                document.addEventListener("mousemove", resizeMove);
            },
            ontouchstart: function (e) {
                resizeStart(e);
                document.addEventListener("touchend", resizeEnd);
                document.addEventListener("touchmove", resizeMove);
            },
            ondragstart: function (e) { return e.preventDefault(); },
        };
    };
    Cell.prototype._getCollapseIcon = function () {
        if (this._isXDirection() && this.config.collapsed) {
            return "dxi dxi-chevron-right";
        }
        if (this._isXDirection() && !this.config.collapsed) {
            return "dxi dxi-chevron-left";
        }
        if (!this._isXDirection() && this.config.collapsed) {
            return "dxi dxi-chevron-up";
        }
        if (!this._isXDirection() && !this.config.collapsed) {
            return "dxi dxi-chevron-down";
        }
    };
    Cell.prototype._isLastCell = function () {
        var parent = this._parent;
        return parent && parent._cells.indexOf(this) === parent._cells.length - 1;
    };
    Cell.prototype._getNextCell = function () {
        var parent = this._parent;
        var index = parent._cells.indexOf(this);
        if (parent._cells[index + 1].config.hidden) {
            return parent._cells[index + 1]._getNextCell();
        }
        else
            return parent._cells[index + 1];
    };
    Cell.prototype._getResizerView = function () {
        return this._parent.getRefs("resizer_" + this._uid);
    };
    Cell.prototype._isXDirection = function () {
        return this._parent && this._parent._xLayout;
    };
    Cell.prototype._calculateStyle = function () {
        var config = this.config;
        if (!config) {
            return;
        }
        var style = {};
        var autoWidth = false;
        var autoHeight = false;
        if (!isNaN(Number(config.width)))
            config.width = config.width + "px";
        if (!isNaN(Number(config.height)))
            config.height = config.height + "px";
        if (!isNaN(Number(config.minWidth)))
            config.minWidth = config.minWidth + "px";
        if (!isNaN(Number(config.minHeight)))
            config.minHeight = config.minHeight + "px";
        if (!isNaN(Number(config.maxWidth)))
            config.maxWidth = config.maxWidth + "px";
        if (!isNaN(Number(config.maxHeight)))
            config.maxHeight = config.maxHeight + "px";
        if (config.width === "content")
            autoWidth = true;
        if (config.height === "content")
            autoHeight = true;
        var _a = config, width = _a.width, height = _a.height, cols = _a.cols, rows = _a.rows, minWidth = _a.minWidth, minHeight = _a.minHeight, maxWidth = _a.maxWidth, maxHeight = _a.maxHeight, gravity = _a.gravity, collapsed = _a.collapsed, $fixed = _a.$fixed;
        var gravityNumber = Math.sign(gravity) === -1 ? 0 : gravity;
        if (typeof gravity === "boolean") {
            gravityNumber = gravity ? 1 : 0;
        }
        var fixed = typeof gravity === "boolean" ? !gravity : Math.sign(gravity) === -1;
        if (this._isXDirection()) {
            if ($fixed || width || (gravity === undefined && (minWidth || maxWidth))) {
                fixed = true;
            }
        }
        else {
            if ($fixed || height || (gravity === undefined && (minHeight || maxHeight))) {
                fixed = true;
            }
        }
        var grow = fixed ? 0 : gravityNumber || 1;
        var fillSpace = this._isXDirection() ? "x" : "y";
        if (minWidth !== undefined)
            style.minWidth = minWidth;
        if (minHeight !== undefined)
            style.minHeight = minHeight;
        if (maxWidth !== undefined)
            style.maxWidth = maxWidth;
        if (maxHeight !== undefined)
            style.maxHeight = maxHeight;
        if (this._parent === undefined && !fillSpace !== undefined) {
            fillSpace = true;
        }
        if (width !== undefined && width !== "content") {
            style.width = width;
        }
        else {
            if (fillSpace === true) {
                style.width = "100%";
            }
            else if (fillSpace === "x") {
                if (autoWidth) {
                    style.flex = "0 0 auto";
                }
                else {
                    var isAuto = this._isXDirection() ? "1px" : "auto";
                    style.flex = grow + " " + (cols || rows ? "0 " + isAuto : "1 auto");
                }
            }
        }
        if (height !== undefined && height !== "content") {
            style.height = height;
        }
        else {
            if (fillSpace === true) {
                style.height = "100%";
            }
            else if (fillSpace === "y") {
                if (autoHeight) {
                    style.flex = "0 0 auto";
                }
                else {
                    var isAuto = !this._isXDirection() ? "1px" : "auto";
                    style.flex = grow + " " + (cols || rows ? "0 " + isAuto : "1 auto");
                }
            }
        }
        if (fillSpace === true && config.width === undefined && config.height === undefined) {
            style.flex = grow + " 1 auto";
        }
        if (collapsed) {
            if (this._isXDirection()) {
                style.width = "auto";
            }
            else {
                style.height = "auto";
            }
            style.flex = "0 0 auto";
        }
        return style;
    };
    return Cell;
}(view_1.View));
exports.Cell = Cell;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var PopupEvents;
(function (PopupEvents) {
    PopupEvents["beforeHide"] = "beforeHide";
    PopupEvents["beforeShow"] = "beforeShow";
    PopupEvents["afterHide"] = "afterHide";
    PopupEvents["afterShow"] = "afterShow";
    PopupEvents["click"] = "click";
})(PopupEvents = exports.PopupEvents || (exports.PopupEvents = {}));


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var SliderEvents;
(function (SliderEvents) {
    SliderEvents["change"] = "change";
    SliderEvents["focus"] = "focus";
    SliderEvents["blur"] = "blur";
    SliderEvents["keydown"] = "keydown";
    SliderEvents["mousedown"] = "mousedown";
    SliderEvents["mouseup"] = "mouseup";
})(SliderEvents = exports.SliderEvents || (exports.SliderEvents = {}));


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var TimepickerEvents;
(function (TimepickerEvents) {
    TimepickerEvents["change"] = "change";
    TimepickerEvents["beforeApply"] = "beforeApply";
    TimepickerEvents["afterApply"] = "afterApply";
    TimepickerEvents["beforeClose"] = "beforeClose";
    TimepickerEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["apply"] = "apply";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["close"] = "close";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    TimepickerEvents["save"] = "save";
})(TimepickerEvents = exports.TimepickerEvents || (exports.TimepickerEvents = {}));


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CalendarEvents;
(function (CalendarEvents) {
    CalendarEvents["change"] = "change";
    CalendarEvents["beforeChange"] = "beforechange";
    CalendarEvents["modeChange"] = "modeChange";
    CalendarEvents["monthSelected"] = "monthSelected";
    CalendarEvents["yearSelected"] = "yearSelected";
    CalendarEvents["cancelClick"] = "cancelClick";
    CalendarEvents["dateMouseOver"] = "dateMouseOver";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    CalendarEvents["dateHover"] = "dateHover";
})(CalendarEvents = exports.CalendarEvents || (exports.CalendarEvents = {}));


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(64));
__export(__webpack_require__(126));
__export(__webpack_require__(69));


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var html_1 = __webpack_require__(2);
var keycodes_1 = __webpack_require__(121);
var view_1 = __webpack_require__(7);
var ts_data_1 = __webpack_require__(8);
var ts_layout_1 = __webpack_require__(21);
var ts_list_1 = __webpack_require__(42);
var ts_popup_1 = __webpack_require__(18);
var keyListener_1 = __webpack_require__(125);
var en_1 = __webpack_require__(67);
var types_1 = __webpack_require__(30);
var helper_1 = __webpack_require__(68);
var types_2 = __webpack_require__(69);
function itemsCountTemplate(count, templateFN) {
    if (typeof templateFN === "function") {
        return templateFN(count);
    }
    else {
        return count + " " + en_1.default.selectedItems;
    }
}
var template = function (item) {
    if (item.icon) {
        return "<span class=\"" + item.icon + " dhx_combobox-options__icon\"></span> <span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
    }
    if (item.src) {
        return "<img src=\"" + item.src + "\" class=\"dhx_combobox-options__image\" alt=" + item.value + "></img> <span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
    }
    return "<span class=\"dhx_combobox-options__value\">" + item.value + "</span>";
};
var Combobox = /** @class */ (function (_super) {
    __extends(Combobox, _super);
    function Combobox(element, config) {
        var _this = _super.call(this, element, core_1.extend({
            template: template,
            listHeight: 224,
            itemHeight: 36,
            disabled: false,
            readOnly: false,
        }, config)) || this;
        _this.config.itemsCount = _this.config.itemsCount || _this.config.showItemsCount; // TODO: remove suite_7.0
        _this.config.helpMessage = _this.config.helpMessage || _this.config.help; // TODO: remove suite_7.0
        if (_this.config.cellHeight && _this.config.itemHeight === 36) {
            _this.config.itemHeight = _this.config.cellHeight; // TODO: remove suite_7.0
        }
        if (_this.config.labelInline) {
            _this.config.labelPosition = "left"; // TODO: remove suite_7.0
        }
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({});
            _this.data.parse(_this.config.data);
        }
        else if (_this.config.data) {
            _this.data = _this.config.data;
            _this.events = new events_1.EventSystem(_this);
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.DataCollection({});
        }
        _this.popup = new ts_popup_1.Popup();
        _this.popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            _this.paint();
        });
        _this.popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            if (_this.config.multiselection) {
                _this._state.value = "";
            }
            _this.paint();
        });
        _this.popup.events.on(ts_popup_1.PopupEvents.beforeHide, function (fromOuterClick) {
            fromOuterClick && _this._hideOptions();
        });
        if (_this.config.readonly || _this.config.readOnly) {
            _this.config.readOnly = _this.config.readOnly || _this.config.readonly;
            _this._keyListener = new keyListener_1.KeyListener();
        }
        _this._state = {
            value: "",
            ignoreNext: false,
            canDelete: false,
            unselectActive: false,
            currentState: types_2.ComboState.default,
        };
        _this._initHandlers();
        _this._createLayout();
        if (_this.config.value) {
            _this._setValue(_this.config.value, true);
        }
        _this._initEvents();
        var vnode = dom_1.create({
            render: function () { return _this._draw(); },
            hooks: {
                didRedraw: function () {
                    if (_this.popup.isVisible()) {
                        _this.focus();
                        _this._configurePopup();
                    }
                },
            },
        });
        // const container = toNode(element);
        _this.mount(element, vnode);
        return _this;
    }
    Combobox.prototype.focus = function () {
        if (this.config.disabled)
            return false;
        var rootView = this.getRootView();
        rootView.refs.input.el.focus();
    };
    Combobox.prototype.blur = function () {
        if (this.config.disabled)
            return false;
        var rootView = this.getRootView();
        rootView.refs.input.el.blur();
        this.popup.hide();
    };
    Combobox.prototype.enable = function () {
        this.config.disabled = false;
        this.paint();
    };
    Combobox.prototype.disable = function () {
        this.config.disabled = true;
        this.paint();
    };
    Combobox.prototype.isDisabled = function () {
        return this.config.disabled;
    };
    Combobox.prototype.clear = function () {
        if (this.config.disabled) {
            return false;
        }
        this.list.selection.remove();
        this._state.value = "";
        this._filter();
        this.paint();
    };
    Combobox.prototype.getValue = function (asArray) {
        var ids = this.list.selection.getId();
        if (asArray) {
            return core_1.wrapBox(ids);
        }
        return Array.isArray(ids) ? ids.join(",") : ids;
    };
    Combobox.prototype.setValue = function (ids) {
        return this._setValue(ids);
    };
    Combobox.prototype.destructor = function () {
        this.popup && this.popup.destructor();
        this.events && this.events.clear();
        this.list && this.list.destructor();
        this._helper && this._helper.destructor();
        this._layout && this._layout.destructor();
        this.config = this.events = this.list = this.popup = null;
        this._helper = this._keyListener = this._handlers = this._state = this._uid = this._isPopupConfiqureted = null;
        this.unmount();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Combobox.prototype.setState = function (state) {
        switch (state) {
            case "success":
                this._state.currentState = types_2.ComboState.success;
                break;
            case "error":
                this._state.currentState = types_2.ComboState.error;
                break;
            default:
                this._state.currentState = types_2.ComboState.default;
                break;
        }
        this.paint();
    };
    Combobox.prototype._setValue = function (ids, silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        if (this.config.disabled || !this._exsistId(ids)) {
            return false;
        }
        this._filter();
        if (!this.config.multiselection) {
            this.list.selection.remove();
            this._state.value = "";
        }
        if (this.config.multiselection) {
            if (typeof ids === "string") {
                ids = ids.split(",");
            }
            if (typeof ids === "number") {
                ids = [ids];
            }
            ids.forEach(function (id) {
                _this.list.selection.add(id, false, false, silent);
            });
        }
        else {
            var id = core_1.unwrapBox(ids);
            this.list.selection.add(id, false, false, silent);
            var item = this.data.getItem(id);
            if (item) {
                this._state.value = this._getItemText(item);
            }
        }
        this.paint();
    };
    Combobox.prototype._createLayout = function () {
        var list = (this.list = new ts_list_1.List(null, {
            template: this.config.template,
            virtual: this.config.virtual,
            keyNavigation: false,
            multiselection: this.config.multiselection,
            itemHeight: this.config.itemHeight,
            height: this.config.listHeight,
            data: this.data,
        }));
        var layout = (this._layout = new ts_layout_1.Layout(this.popup.getContainer(), {
            css: "dhx_combobox-options dhx_combobox__options",
            rows: [
                {
                    id: "select-unselect-all",
                    hidden: !this.config.multiselection || !this.config.selectAllButton,
                },
                { id: "list", height: "content" },
                {
                    id: "not-found",
                    hidden: true,
                },
            ],
            on: {
                click: {
                    ".dhx_combobox__action-select-all": this._handlers.selectAll,
                },
            },
        }));
        layout.getCell("list").attach(list);
        if (this.config.multiselection && this.config.selectAllButton) {
            layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
        }
    };
    Combobox.prototype._initHandlers = function () {
        var _this = this;
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target, {
                    mode: _this.config.labelPosition === "left" ? "bottom" : "right",
                });
            },
            selectAll: function () {
                if (_this._state.unselectActive) {
                    _this.list.selection.remove();
                    if (_this.config.selectAllButton) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                        _this._state.unselectActive = false;
                    }
                }
                else {
                    _this.data.filter();
                    _this.list.selection.add();
                    if (_this.config.selectAllButton) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.unselectAllView);
                        _this._state.unselectActive = true;
                    }
                }
                _this._changePopupPosition();
                _this.paint();
            },
            onkeydown: function (e) {
                if (e.key === "Tab" && _this.popup.isVisible()) {
                    _this._hideOptions();
                }
                else {
                    if (!_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.DOWN_ARROW) {
                        _this._showOptions();
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.RIGHT_ARROW) {
                        if (_this.config.readOnly && !_this.config.multiselection) {
                            _this.list.moveFocus(ts_list_1.MOVE_DOWN);
                            e.preventDefault();
                        }
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.LEFT_ARROW) {
                        if (_this.config.readOnly && !_this.config.multiselection) {
                            _this.list.moveFocus(ts_list_1.MOVE_UP);
                            e.preventDefault();
                        }
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.DOWN_ARROW) {
                        _this.list.moveFocus(ts_list_1.MOVE_DOWN);
                        e.preventDefault();
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.UP_ARROW) {
                        _this.list.moveFocus(ts_list_1.MOVE_UP);
                        e.preventDefault();
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.ESC) {
                        _this._hideOptions();
                    }
                    if (_this.popup.isVisible() && e.which === keycodes_1.KEY_CODES.ENTER) {
                        _this.setValue(_this.list.getFocus());
                        if (!_this.config.multiselection)
                            _this._hideOptions();
                    }
                }
                _this.events.fire(types_2.ComboboxEvents.keydown, [e, _this.popup.isVisible() && _this.list.getFocus()]);
            },
            onkeyup: function (e) {
                if (!_this.config.multiselection || _this.config.itemsCount) {
                    return;
                }
                if (_this._state.ignoreNext) {
                    _this._state.ignoreNext = false;
                    return;
                }
                if (e.which === keycodes_1.KEY_CODES.BACKSPACE &&
                    !_this._state.value &&
                    _this.config.multiselection &&
                    _this.list.selection.getId().length) {
                    var selected = _this.list.selection.getId();
                    var id = selected[selected.length - 1];
                    _this.list.selection.remove(id);
                    _this._changePopupPosition();
                    _this.paint();
                }
            },
            oninput: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                var input = e.target;
                var value = input.value;
                _this.events.fire(types_2.ComboboxEvents.input, [value]);
                _this._state.value = value;
                _this._filter();
                if (!value.length) {
                    _this._state.ignoreNext = true;
                    _this._state.canDelete = true;
                }
                else {
                    _this._state.canDelete = false;
                }
                if (!_this.config.multiselection) {
                    _this.list.selection.remove();
                    _this.paint();
                }
                if (!_this.popup.isVisible()) {
                    _this._showOptions();
                }
                _this._updatePopup();
            },
            oninputclick: function (e) {
                if (_this.config.disabled) {
                    return;
                }
                _this.focus();
                if (e.target.classList.contains("dhx_combobox__action-remove")) {
                    var id = html_1.locate(e);
                    if (!id) {
                        return;
                    }
                    _this.list.selection.remove(id);
                    _this._changePopupPosition();
                    _this.paint();
                    return;
                }
                if (e.target.classList.contains("dhx_combobox__action-clear-all")) {
                    _this.list.selection.getId().forEach(function (id) { return _this.list.selection.remove(id); });
                    if (_this.config.selectAllButton && _this._state.unselectActive) {
                        _this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                        _this._state.unselectActive = false;
                    }
                    _this.paint();
                    return;
                }
                e.preventDefault();
                if (!_this.popup.isVisible()) {
                    _this._showOptions();
                    return;
                }
                _this.focus();
            },
            toggleIcon: function () {
                _this.focus();
                if (_this.popup.isVisible()) {
                    _this._hideOptions();
                }
                else {
                    _this._showOptions();
                }
            },
            onfocus: function () { var _a; return (_a = _this.events) === null || _a === void 0 ? void 0 : _a.fire(types_2.ComboboxEvents.focus, []); },
            onblur: function () { var _a; return (_a = _this.events) === null || _a === void 0 ? void 0 : _a.fire(types_2.ComboboxEvents.blur, []); },
        };
    };
    Combobox.prototype._initEvents = function () {
        var _this = this;
        this.data.events.on(ts_data_1.DataEvents.load, function () {
            if (_this.config.value) {
                _this._setValue(_this.config.value, true);
            }
        });
        this.list.events.on(ts_list_1.ListEvents.click, function () {
            if (!_this.config.multiselection) {
                _this._hideOptions();
            }
            _this._changePopupPosition();
        });
        this.list.selection.events.on(types_1.SelectionEvents.afterSelect, function () {
            var value = _this.getValue(_this.config.multiselection);
            _this.events.fire(types_2.ComboboxEvents.change, [value]);
            _this._updateSelectedItem(value);
        });
        this.list.selection.events.on(types_1.SelectionEvents.afterUnSelect, function () {
            var multi = _this.config.multiselection;
            if (_this.config.readOnly && !multi)
                return;
            var value = _this.getValue(multi);
            _this.events.fire(types_2.ComboboxEvents.change, [value]);
            if (multi)
                _this._updateSelectedItem(value);
        });
        this.popup.events.on(ts_popup_1.PopupEvents.beforeShow, function () {
            if (!_this.popup.isVisible() && !_this._isPopupConfiqureted) {
                _this._configurePopup();
                return false;
            }
        });
        if (this.config.readOnly) {
            this.popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
                if (_this._state.value) {
                    var id = _this.list.selection.getId();
                    _this.list.setFocus(id);
                }
                else {
                    _this.list.setFocus(_this.data.getId(0));
                }
                _this._keyListener.startNewListen(function (val) { return _this._findBest(val); });
            });
        }
    };
    Combobox.prototype._showOptions = function () {
        if (!this.events.fire(types_2.ComboboxEvents.beforeOpen)) {
            return;
        }
        if (this._state.value.length) {
            this._state.canDelete = true;
        }
        this._filter();
        if (this._configurePopup()) {
            this.events.fire(types_2.ComboboxEvents.open);
            this.events.fire(types_2.ComboboxEvents.afterOpen);
        }
    };
    Combobox.prototype._configurePopup = function () {
        this._isPopupConfiqureted = true;
        var rootView = this.getRootView();
        if (!rootView || !rootView.refs || !rootView.refs.holder) {
            return false;
        }
        if (!this.popup.isVisible()) {
            this._updatePopup();
        }
        return true;
    };
    Combobox.prototype._hideOptions = function () {
        var _this = this;
        if (!this.events.fire(types_2.ComboboxEvents.beforeClose)) {
            return;
        }
        if (this.config.readOnly) {
            this._keyListener.endListen();
        }
        this.list.setFocus(this.data.getId(0));
        if (!this.config.multiselection && !this.config.readOnly && !this.list.selection.contains()) {
            this._state.value = "";
        }
        dom_1.awaitRedraw().then(function () { return _this.popup.isVisible() && _this.popup.hide(); });
        this.events.fire(types_2.ComboboxEvents.afterClose);
        this.events.fire(types_2.ComboboxEvents.close); // TODO: remove suite_7.0
        this._filter();
        this.paint();
    };
    Combobox.prototype._filter = function () {
        var _this = this;
        if (this.config.readOnly) {
            return;
        }
        this.data.filter(function (item) {
            return _this.config.filter
                ? _this.config.filter(item, _this._state.value)
                : core_1.isEqualString(_this._state.value, _this._getItemText(item));
        });
        if (this.config.multiselection) {
            this.list.setFocus(this.data.getId(0));
        }
        else {
            var index = this.data.getIndex(this.list.selection.getId());
            this.list.setFocus(this.data.getId(index > -1 ? index : 0));
        }
        if (this.data.getLength() === 0) {
            if (this.config.multiselection && this.config.selectAllButton) {
                this._layout.getCell("select-unselect-all").hide();
            }
            this._layout.getCell("list").hide();
            this._layout.getCell("not-found").attach(helper_1.emptyListView);
            this._layout.getCell("not-found").show();
        }
        else {
            if (this.config.multiselection && this.config.selectAllButton) {
                this._layout.getCell("select-unselect-all").show();
            }
            if (this._layout.getCell("not-found").isVisible()) {
                this._layout.getCell("list").show();
                this._layout.getCell("not-found").hide();
            }
        }
    };
    Combobox.prototype._findBest = function (value) {
        var _this = this;
        var best = this.data.find(function (item) { return core_1.isEqualString(value, _this._getItemText(item)); });
        if (!best) {
            return;
        }
        if (this.list.selection.getId() === best.id) {
            return;
        }
        this.list.setFocus(best.id);
        this.paint();
    };
    Combobox.prototype._exsistId = function (id) {
        var _this = this;
        if (id instanceof Array) {
            return id.every(function (i) { return _this.data.exists(i); });
        }
        return this.data.exists(id);
    };
    Combobox.prototype._draw = function () {
        if (!this.config)
            return dom_1.el("div");
        var _a = this.config, multiselection = _a.multiselection, labelPosition = _a.labelPosition, hiddenLabel = _a.hiddenLabel, required = _a.required, disabled = _a.disabled, css = _a.css, helpMessage = _a.helpMessage, readOnly = _a.readOnly, placeholder = _a.placeholder;
        var item = multiselection ? null : this.data.getItem(this.list.selection.getId());
        var showPlaceholder = !this.list.selection.getId() ||
            (typeof this.list.selection.getId() === "object" &&
                this.list.selection.getId().length === 0);
        var labelStyle = html_1.getLabelStyle(this.config);
        return dom_1.el("div", {
            dhx_widget_id: this._uid,
            onkeydown: this._handlers.onkeydown,
            onkeyup: this._handlers.onkeyup,
            class: "dhx_widget dhx_combobox" +
                (labelPosition === "left" ? " dhx_combobox--label-inline" : "") +
                (hiddenLabel ? " dhx_combobox--sr_only" : "") +
                (required ? " dhx_combobox--required" : "") +
                (disabled ? " dhx_combobox--disabled" : "") +
                (css ? " " + css : ""),
        }, [
            labelStyle
                ? dom_1.el("label.dhx_label.dhx_combobox__label", {
                    style: labelStyle.style,
                    class: helpMessage ? "dhx_label--with-help" : "",
                    onclick: this._handlers.oninputclick,
                }, helpMessage
                    ? [
                        (labelStyle.label || required) &&
                            dom_1.el("span.dhx_label__holder", labelStyle.label),
                        dom_1.el("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                            id: "dhx_label__help_" + this._uid,
                        }),
                    ]
                    : labelStyle.label)
                : null,
            dom_1.el("div.dhx_combobox-input-box" +
                // (this.popup.isVisible() ? ".dhx_combobox-input-box" : "") +
                (disabled ? ".dhx_combobox-input-box--disabled" : "") +
                (readOnly ? ".dhx_combobox-input-box--readonly" : "") +
                (this._state.currentState === types_2.ComboState.error
                    ? ".dhx_combobox-input-box--state_error"
                    : "") +
                (this._state.currentState === types_2.ComboState.success
                    ? ".dhx_combobox-input-box--state_success"
                    : ""), {
                _ref: "holder",
            }, [
                dom_1.el("div.dhx_combobox-input__icon", {
                    onclick: this._handlers.toggleIcon,
                }, [
                    dom_1.el("span" +
                        (this.popup.isVisible() ? ".dxi.dxi-menu-up" : ".dxi.dxi-menu-down")),
                ]),
                dom_1.el("div.dhx_combobox-input-list-wrapper", {
                    onclick: this._handlers.oninputclick,
                }, [
                    dom_1.el("ul.dhx_combobox-input-list", __spreadArrays(this._drawSelectedItems(), [
                        dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-input-list__item--input", [
                            dom_1.el("input.dhx_combobox-input", {
                                oninput: this._handlers.oninput,
                                onfocus: this._handlers.onfocus,
                                onblur: this._handlers.onblur,
                                _ref: "input",
                                _key: this._uid,
                                type: "text",
                                placeHolder: showPlaceholder && placeholder ? placeholder : undefined,
                                value: readOnly && item
                                    ? this._getItemText(item)
                                    : this._state.value,
                                readOnly: readOnly || disabled,
                                required: required,
                                "aria-label": readOnly
                                    ? "Select value"
                                    : "Type or select value",
                                "aria-describedby": helpMessage
                                    ? "dhx_label__help_" + this._uid
                                    : null,
                                "aria-expanded": true,
                            }),
                        ]),
                    ])),
                ]),
            ]),
        ]);
    };
    Combobox.prototype._drawSelectedItems = function () {
        var _this = this;
        if (!this.config.multiselection) {
            return [];
        }
        if (this.config.itemsCount) {
            var count = this.list.selection.getId().length;
            return count
                ? [
                    dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-tag", [
                        dom_1.el("span.dhx_combobox-tag__value", itemsCountTemplate(count, this.config.itemsCount)),
                        dom_1.el("button.dhx_button.dhx_combobox-tag__action.dhx_combobox__action-clear-all", { "aria-label": "clear all" }, [dom_1.el("span.dhx_button__icon.dxi.dxi-close-circle")]),
                    ]),
                ]
                : [];
        }
        return this.list.selection.getId().map(function (id) {
            var item = _this.data.getItem(id);
            if (!item) {
                return null;
            }
            return dom_1.el("li.dhx_combobox-input-list__item.dhx_combobox-tag", { dhx_id: id }, [
                _this._drawImageOrIcon(item),
                dom_1.el("span.dhx_combobox-tag__value", _this._getItemText(item)),
                dom_1.el("button.dhx_button.dhx_button--icon.dhx_combobox-tag__action.dhx_combobox__action-remove", {
                    type: "button",
                    "aria-label": "remove",
                }, [dom_1.el("span.dhx_button__icon.dxi.dxi-close-circle")]),
            ]);
        });
    };
    Combobox.prototype._drawImageOrIcon = function (item) {
        if (item.src) {
            return dom_1.el("img.dhx_combobox-tag__image", { src: item.src, alt: "" });
        }
        else if (item.icon) {
            return dom_1.el("span.dhx_combobox-tag__icon", { class: item.icon });
        }
        return null;
    };
    Combobox.prototype._getItemText = function (item) {
        if (!item) {
            return null;
        }
        return item.value;
    };
    Combobox.prototype._updateSelectedItem = function (id) {
        var _a;
        if (this.config.multiselection) {
            if (this.config.selectAllButton &&
                !this._state.unselectActive &&
                this.data.getLength() === id.length) {
                this._layout.getCell("select-unselect-all").attach(helper_1.unselectAllView);
                this._state.unselectActive = true;
            }
            else if (this.config.selectAllButton && this._state.unselectActive) {
                this._layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
                this._state.unselectActive = false;
            }
            if (this._state.value) {
                this._state.value = "";
                this._state.canDelete = id.length === 0;
                this._filter();
            }
        }
        else {
            this._state.value = (_a = this._getItemText(this.data.getItem(id))) !== null && _a !== void 0 ? _a : "";
        }
        this.paint();
    };
    Combobox.prototype._changePopupPosition = function () {
        var _this = this;
        if (this.config.multiselection) {
            dom_1.awaitRedraw().then(function () {
                _this._updatePopup();
            });
        }
    };
    Combobox.prototype._updatePopup = function () {
        var holderNode = this.getRootView().refs.holder.el;
        this.popup.getContainer().style.width = holderNode.offsetWidth + "px";
        var itemsHeight = this.data.getLength() * (this.config.itemHeight || 36);
        if (typeof this.config.listHeight === "string" && this.config.listHeight.includes("px")) {
            this.config.listHeight = this.config.listHeight.replace("px", "");
        }
        var listHeight = itemsHeight < this.config.listHeight ? itemsHeight : this.config.listHeight;
        this.popup.getContainer().style.height =
            (this.config.selectAllButton && this.config.multiselection
                ? listHeight + 33
                : listHeight) + "px";
        this.popup.show(holderNode, { mode: "bottom" });
    };
    return Combobox;
}(view_1.View));
exports.Combobox = Combobox;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var ts_data_1 = __webpack_require__(8);
var dom_1 = __webpack_require__(0);
var KeyManager_1 = __webpack_require__(20);
var types_1 = __webpack_require__(30);
var view_1 = __webpack_require__(7);
var Selection_1 = __webpack_require__(66);
var html_1 = __webpack_require__(2);
var types_2 = __webpack_require__(43);
var editors_1 = __webpack_require__(122);
exports.MOVE_UP = 1;
exports.MOVE_DOWN = 2;
var List = /** @class */ (function (_super) {
    __extends(List, _super);
    function List(node, config) {
        if (config === void 0) { config = {}; }
        var _this = this;
        var itemHeight = config.itemHeight || (config.virtual ? 37 : null);
        if (itemHeight && typeof itemHeight === "number") {
            itemHeight = itemHeight.toString() + "px";
        }
        _this = _super.call(this, node, core_1.extend({
            itemHeight: itemHeight,
            keyNavigation: true,
            editable: false,
            selection: true,
        }, config)) || this;
        _this._touch = {
            duration: 350,
            dblDuration: 300,
            timer: null,
            start: false,
            timeStamp: null,
        };
        // init data colleciton and link events between widget and data
        var data = _this.config.data;
        if (!(data instanceof ts_data_1.DataCollection)) {
            _this.data = new ts_data_1.DataCollection({});
            _this.events = _this.data.events;
            if (data)
                _this.data.parse(data);
        }
        else {
            // [TODO] deprecate in favor of raw data input
            _this.data = data;
            _this.events = data.events;
        }
        _this.selection = new Selection_1.Selection({
            disabled: !_this.config.selection,
            multiselection: _this.config.multiselection,
        }, _this.data, _this.events);
        if (_this.config.keyNavigation) {
            _this.keyManager = new KeyManager_1.KeyManager(function (e, focusId) {
                return focusId == _this._uid && (!_this._edited || (_this._edited && e.key !== "escape"));
            });
            _this._initHotKey();
        }
        _this.events.on(ts_data_1.DataEvents.change, function (_, status, item) {
            if (status === "setPage") {
                _this.showItem(_this.data.getId(item[0]));
            }
            _this.paint();
        });
        _this.events.on(types_1.SelectionEvents.afterUnSelect, function () { return _this.paint(); });
        _this.events.on(types_1.SelectionEvents.afterSelect, function (id) {
            if (id && _this.config.selection)
                _this._focus = id;
            _this.paint();
        });
        _this.events.on(types_2.ListEvents.afterEditEnd, _this.editEnd.bind(_this));
        var drop = function (value) { return function (info) {
            _this.data.setMeta(_this.data.getItem(info.target), "drop", value);
            _this.paint();
        }; };
        _this.events.on(ts_data_1.DragEvents.canDrop, drop(true));
        _this.events.on(ts_data_1.DragEvents.cancelDrop, drop(false));
        var drag = function (value) { return function (info) {
            info.source.map(function (id) { return _this.data.setMeta(_this.data.getItem(id), "drag", value); });
            _this.paint();
        }; };
        _this.events.on(ts_data_1.DragEvents.dragStart, drag(true));
        _this.events.on(ts_data_1.DragEvents.afterDrag, drag(false));
        _this._handlers = {
            onmousedown: function (e) {
                _this._dragStart(e);
            },
            ontouchstart: function (e) {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStart(e);
                }, _this._touch.duration);
                if (!_this._touch.timeStamp) {
                    _this._touch.timeStamp = +e.timeStamp.toFixed();
                }
                else {
                    var dblTap = _this._touch.dblDuration >= _this._touch.timeStamp - +e.timeStamp.toFixed();
                    if (dblTap) {
                        e.preventDefault();
                        _this._dblClick(e);
                    }
                    _this._touch.timeStamp = null;
                }
                setTimeout(function () {
                    _this._touch.timeStamp = null;
                }, _this._touch.dblDuration);
            },
            ontouchmove: function (e) {
                _this._touch.start && e.preventDefault();
                _this._clearTouchTimer();
            },
            ontouchend: function () {
                _this._touch.start = false;
                _this._clearTouchTimer();
            },
            ondragstart: function () { return (_this.config.dragMode && !_this._edited ? false : null); },
            oncontextmenu: function (e) {
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                _this.events.fire(types_2.ListEvents.itemRightClick, [id, e]);
            },
            onclick: function (e) {
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                _this.selection.add(id, e.ctrlKey || e.metaKey, e.shiftKey);
                _this._focus = id;
                _this.events.fire(types_2.ListEvents.click, [id, e]);
                _this.paint();
            },
            ondblclick: function (e) {
                _this._dblClick(e);
            },
            onscroll: function (e) {
                if (_this.config.virtual) {
                    _this._topOffset = e.target.scrollTop;
                    _this._visibleHeight = e.target.offsetHeight;
                    _this.paint();
                }
            },
            onmouseover: function (e) {
                var id = html_1.locate(e);
                if (!id) {
                    return;
                }
                var prevId = html_1.locate(e.relatedTarget);
                if (id !== prevId)
                    _this.events.fire(types_2.ListEvents.itemMouseOver, [id, e]);
            },
        };
        var evs = _this.config.eventHandlers;
        if (evs) {
            for (var _i = 0, _a = Object.entries(evs); _i < _a.length; _i++) {
                var _b = _a[_i], event_name = _b[0], events = _b[1];
                _this._handlers[event_name] = html_1.eventHandler(function (e) { return html_1.locate(e); }, events, _this._handlers[event_name]);
            }
        }
        if (_this.config.dragMode) {
            ts_data_1.dragManager.setItem(_this._uid, _this);
        }
        // defaults for virtual rendering
        _this._topOffset = _this._visibleHeight = 0;
        var view = dom_1.create({
            render: function () { return _this._renderList(); },
            hooks: {
                didMount: function (vm) {
                    if (_this.config.virtual)
                        _this._visibleHeight = vm.node.el.offsetHeight;
                },
                didRedraw: function (vm) { return _this._didRedraw(vm); },
            },
        });
        _this.mount(node, view);
        return _this;
    }
    List.prototype._didRedraw = function (vm) {
        // do nothing
    };
    List.prototype._dblClick = function (e) {
        var id = html_1.locate(e);
        if (!id) {
            return;
        }
        id = this.data.getItem(id).id;
        if (this.config.editable) {
            this.editItem(id);
        }
        this.events.fire(types_2.ListEvents.doubleClick, [id, e]);
    };
    List.prototype._clearTouchTimer = function () {
        if (this._touch.timer) {
            clearTimeout(this._touch.timer);
            this._touch.timer = null;
        }
    };
    List.prototype._dragStart = function (e) {
        var _this = this;
        this._touch.start = true;
        var itemsForGhost = [];
        var item = html_1.locateNode(e, "dhx_id");
        var itemId = item && item.getAttribute("dhx_id");
        var selectionIds = this.selection.getId();
        if (this.config.multiselection && selectionIds instanceof Array) {
            selectionIds.map(function (id) {
                if (id !== itemId && _this.getRootView().refs[id]) {
                    itemsForGhost.push(_this.getRootView().refs[id].el);
                }
            });
            selectionIds = __spreadArrays(selectionIds);
        }
        if (typeof selectionIds === "string") {
            selectionIds = [selectionIds];
        }
        return this.config.dragMode && !this._edited
            ? ts_data_1.dragManager.onMouseDown(e, selectionIds || [itemId], itemsForGhost)
            : null;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.disableSelection = function () {
        this.selection.disable();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    List.prototype.enableSelection = function () {
        this.selection.enable();
    };
    List.prototype.editItem = function (id) {
        this._edited = id;
        if (!this.data.getItem(this._edited) || !this.events.fire(types_2.ListEvents.beforeEditStart, [id])) {
            this._edited = null;
            return;
        }
        this._getHotkeys();
        this.paint();
        this.events.fire(types_2.ListEvents.afterEditStart, [id]);
    };
    // [TODO] maybe better name
    List.prototype.editEnd = function (value, id) {
        if (this._edited) {
            if (value !== null) {
                var item = this.data.getItem(id);
                this.data.update(id, __assign(__assign({}, item), { value: value }));
            }
            this._edited = null;
            this.paint();
        }
    };
    /*
        Focus API allows to mark item as active one, but not selected yet
        Used by keyboard navigation
    */
    List.prototype.getFocusItem = function () {
        return this.data.getItem(this._focus);
    };
    List.prototype.setFocus = function (id) {
        if (this._focus != id && this.data.exists(id)) {
            this._focus = id;
            this.showItem(id);
            this.events.fire(types_2.ListEvents.focusChange, [this.data.getIndex(this._focus), this._focus]);
            this.paint();
        }
    };
    List.prototype.getFocus = function () {
        return this._focus;
    };
    List.prototype.destructor = function () {
        this.events && this.events.clear();
        this.keyManager && this.keyManager.destructor();
        this.selection && this.selection.destructor();
        this.config = this.events = this.selection = this.keyManager = null;
        this._handlers = this._focus = this._edited = this._events = this._topOffset = this._visibleHeight = this._touch = null;
        this.unmount();
    };
    List.prototype.showItem = function (id) {
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el || typeof id === "undefined") {
            return;
        }
        var listEl = this.getRootNode();
        if (!listEl) {
            return;
        }
        var virtual = this.config.virtual;
        var index = this.data.getIndex(id);
        var currentPage = Math.floor(index / listEl.children.length) || 0;
        var el = listEl.children[index - listEl.children.length * currentPage];
        if (!virtual && !el)
            return;
        var height = virtual ? parseInt(this.config.itemHeight) : el.clientHeight;
        var top = virtual ? index * height : el.offsetTop;
        if (top >= listEl.scrollTop + listEl.clientHeight - height) {
            listEl.scrollTo(0, top - listEl.clientHeight + height);
        }
        else if (top < listEl.scrollTop) {
            listEl.scrollTo(0, top);
        }
    };
    List.prototype._renderItem = function (item, index) {
        var itemHeight = this.config.itemHeight;
        if (item.$empty) {
            return dom_1.el("li", {
                class: "dhx_list-item",
                style: {
                    height: itemHeight,
                },
            });
        }
        var html = (this.config.template && this.config.template(item)) || item.html;
        var focus = item.id == this._focus;
        if (item.id == this._edited) {
            var editor = editors_1.getEditor(item, this);
            return editor.toHTML();
        }
        var mx = this.data.getMetaMap(item);
        var node = __assign(__assign(__assign(__assign({}, this._events), { class: "dhx_list-item" +
                (mx && mx.selected ? " dhx_list-item--selected" : "") +
                (focus ? " dhx_list-item--focus" : "") +
                (mx && mx.drop && !this._edited ? " dhx_list-item--drophere" : "") +
                (mx && mx.drag && !this._edited ? " dhx_list-item--dragtarget" : "") +
                (this.config.dragMode && !this._edited ? " dhx_list-item--drag" : "") +
                (item.css ? " " + item.css : ""), dhx_id: item.id, _ref: item.id.toString(), style: {
                height: itemHeight,
            }, _key: item.id, ".innerHTML": html }), this.getItemAriaAttrs(this, item)), { tabindex: focus ? 0 : -1 });
        if (html) {
            node[".innerHTML"] = html;
            return dom_1.el("li", node);
        }
        else {
            node.class += " dhx_list-item--text";
            return dom_1.el("li", node, item.text || item.value);
        }
    };
    List.prototype._renderList = function () {
        var _this = this;
        var range = this._getRange();
        // mapRange
        var data = this.data.getRawData(range[0], range[1]);
        var kids = data.map(function (obj, index) { return _this._renderItem(obj, index); });
        if (this.config.virtual) {
            kids = __spreadArrays([
                dom_1.el(".div", { style: { height: range[2] + "px" } })
            ], kids, [
                dom_1.el(".div", { style: { height: range[3] + "px" } }),
            ]);
        }
        return dom_1.el("ul.dhx_widget.dhx_list", __assign(__assign({ style: {
                "max-height": this.config.height,
                position: "relative",
            }, tabindex: 0, class: (this.config.css ? this.config.css : "") +
                (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : ""), dhx_widget_id: this._uid }, this._handlers), this._getListAriaAttrs(this.config, this.data.getLength())), kids);
    };
    List.prototype.moveFocus = function (mode, step) {
        var length = this.data.getLength();
        if (!length) {
            return;
        }
        var id = this._focus;
        var index = id ? this.data.getIndex(id) : -1;
        step = step || 1;
        if (mode === exports.MOVE_DOWN) {
            id = this.data.getId(Math.min(index + step, length - 1));
        }
        else if (mode === exports.MOVE_UP) {
            id = this.data.getId(Math.max(index - step, 0));
        }
        this.setFocus(id);
    };
    List.prototype._getRange = function () {
        if (this.config.virtual) {
            var overscanCount = 5;
            var visibleHeight = this._visibleHeight || parseInt(this.config.height);
            var itemHeight = parseInt(this.config.itemHeight);
            var total = this.data.getLength();
            var totalHeight = this.data.getLength() * itemHeight;
            var position = this._topOffset;
            // correct value to be in [0, total-visible] range
            position = Math.max(0, Math.min(position, totalHeight - visibleHeight));
            var index = Math.floor(position / itemHeight);
            var count = Math.min(total - index, Math.floor(visibleHeight / itemHeight) + overscanCount);
            this._topOffset = position;
            return [index, count + index, index * itemHeight, totalHeight - itemHeight * (count + index)];
        }
        else {
            return [0, -1, 0, 0];
        }
    };
    List.prototype._getHotkeys = function () {
        var _this = this;
        return {
            arrowDown: function (e) {
                _this.moveFocus(exports.MOVE_DOWN);
                e.preventDefault();
            },
            arrowUp: function (e) {
                _this.moveFocus(exports.MOVE_UP);
                e.preventDefault();
            },
            escape: function () {
                _this.editEnd(null);
            },
            enter: function (e) {
                _this.selection.add(_this._focus);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "shift+enter": function (e) {
                _this.selection.add(_this._focus, false, true);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "ctrl+enter": function (e) {
                _this.selection.add(_this._focus, true, false);
                _this.events.fire(types_2.ListEvents.click, [_this._focus, e]);
            },
            "ctrl+a": function (e) {
                if (_this.config.multiselection) {
                    e.preventDefault();
                    _this.selection.remove();
                    var ids = _this.data.map(function (i) { return i.id; });
                    ids.forEach(function (id) {
                        if (_this.config.multiselection === "ctrlClick") {
                            _this.selection.add(id, true);
                        }
                        else {
                            _this.selection.add(id);
                        }
                    });
                }
            },
        };
    };
    List.prototype._initHotKey = function () {
        var handlers = this._getHotkeys();
        for (var key in handlers) {
            this.keyManager.addHotKey(key, handlers[key]);
        }
        for (var key in this.config.hotkeys) {
            this.keyManager.addHotKey(key, this.config.hotkeys[key]);
        }
    };
    List.prototype.getItemAriaAttrs = function (context, item) {
        var getAriaGrabbed = function (context, item) {
            return context.config.dragMode && !context._edited
                ? { "aria-grabbed": Boolean(item.$dragtarget && !context._edited).toString() }
                : {};
        };
        var getAriaRoleDescription = function (context) {
            return context.config.editable
                ? {
                    "aria-roledescription": "" + (context._edited ? "Press Enter to stop editing" : "Double click to edit content"),
                }
                : {};
        };
        return __assign(__assign({ role: "option", "aria-selected": item.$selected ? "true" : "false" }, getAriaGrabbed(context, item)), getAriaRoleDescription(context));
    };
    List.prototype._getListAriaAttrs = function (config, dataLength) {
        return {
            role: "listbox",
            "aria-label": "Listbox " + (config.title || "") + ", count of options = " + dataLength + "." + (config.editable ? " Content is editable." : ""),
            "aria-multiselectable": config.selection && config.multiselection ? "true" : "false",
            "aria-readonly": config.editable ? "false" : "true",
        };
    };
    return List;
}(view_1.View));
exports.List = List;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(30);
var ts_data_1 = __webpack_require__(8);
var Selection = /** @class */ (function () {
    function Selection(config, data, events) {
        var _this = this;
        this.config = config;
        this.events = events;
        this._data = data;
        this._selected = [];
        this._data.events.on(ts_data_1.DataEvents.removeAll, function () {
            _this._selected = [];
        });
        if (typeof this.config.multiselection === "string") {
            var types = ["click", "ctrlClick"];
            if (!types.includes(this.config.multiselection)) {
                this.config.multiselection = false;
            }
        }
        this._data.events.on(ts_data_1.DataEvents.beforeRemove, function (obj) {
            _this._nextSelection = null;
            if (_this._selected.length === 1) {
                var next = _this._data.getIndex(obj.id);
                var count = _this._data.getLength();
                if (count > 1) {
                    var lastIndex = count == next - 1 ? next - 1 : next + 1;
                    _this._nextSelection = _this._data.getId(lastIndex);
                }
            }
        });
        this._data.events.on(ts_data_1.DataEvents.afterRemove, function (obj) {
            var hasIndex = _this._selected.indexOf(obj.id);
            if (hasIndex !== -1) {
                _this._selected.splice(hasIndex, 1);
            }
            if (_this._nextSelection) {
                _this.add(_this._nextSelection);
                _this._nextSelection = null;
            }
        });
    }
    Selection.prototype.enable = function () {
        this.config.disabled = false;
    };
    Selection.prototype.disable = function () {
        this.remove();
        this.config.disabled = true;
    };
    Selection.prototype.getId = function () {
        if (this.config.multiselection) {
            return this._selected;
        }
        return this._selected[0];
    };
    Selection.prototype.getItem = function () {
        var _this = this;
        if (this.config.multiselection) {
            return this._selected.map(function (id) { return _this._data.getItem(id); });
        }
        return this._selected.length ? this._data.getItem(this._selected[0]) : null;
    };
    Selection.prototype.contains = function (id) {
        if (id) {
            return this._selected.includes(id);
        }
        return this._selected.length > 0;
    };
    Selection.prototype.remove = function (id) {
        var _this = this;
        if (id) {
            this._unselectItem(id);
        }
        else {
            this._selected.forEach(function (selectedId) { return _this._unselectItem(selectedId); });
            this._selected = [];
        }
    };
    Selection.prototype.add = function (id, isCtrl, isShift, silent) {
        var _this = this;
        if (this.config.disabled) {
            return;
        }
        if (typeof id === "undefined") {
            var unSelected = this._data.serialize().filter(function (_a) {
                var id = _a.id;
                return !_this._selected.includes(id);
            });
            unSelected.forEach(function (_a) {
                var id = _a.id;
                _this._addMulti(id, silent);
            });
            return;
        }
        var multi = this.config.multiselection;
        if (isShift && this._selected.length && multi) {
            this._addMulti(id, silent);
        }
        else {
            this._addSingle(id, multi && (multi !== "ctrlClick" || isCtrl), silent);
        }
    };
    Selection.prototype.destructor = function () {
        var _this = this;
        this._selected.forEach(function (selectedId) { return _this._unselectItem(selectedId, true); });
    };
    Selection.prototype._addMulti = function (id, silent) {
        var _a;
        var last = this._selected[this._selected.length - 1];
        var i1 = this._data.getIndex(last);
        var i2 = this._data.getIndex(id);
        if (i1 > i2) {
            _a = [i2, i1], i1 = _a[0], i2 = _a[1];
        }
        for (i1; i1 <= i2; i1++) {
            var id_1 = this._data.getId(i1);
            this._selectItem(id_1, silent);
        }
    };
    Selection.prototype._addSingle = function (id, isCtrl, silent) {
        var _this = this;
        if (!isCtrl) {
            this._selected.forEach(function (selectedId) {
                if (selectedId != id)
                    _this._unselectItem(selectedId);
            });
        }
        if (isCtrl && this._selected.includes(id)) {
            this._unselectItem(id, silent);
        }
        else {
            this._selectItem(id, silent);
        }
    };
    Selection.prototype._selectItem = function (id, silent) {
        var item = this._data.getItem(id);
        if (!item || this._data.getMeta(item, "selected"))
            return;
        if (!silent && !this.events.fire(types_1.SelectionEvents.beforeSelect, [id]))
            return;
        this._selected.push(id);
        this._data.setMeta(item, "selected", true);
        if (!silent)
            this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
    };
    Selection.prototype._unselectItem = function (id, silent) {
        if (!silent && !this.events.fire(types_1.SelectionEvents.beforeUnSelect, [id]))
            return;
        this._selected = this._selected.filter(function (selectedId) { return selectedId !== id; });
        this._data.setMeta(this._data.getItem(id), "selected", false);
        if (!silent)
            this.events.fire(types_1.SelectionEvents.afterUnSelect, [id]);
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    notFound: "Not Found",
    selectAll: "Select All",
    unselectAll: "Unselect All",
    selectedItems: "selected items",
};


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var en_1 = __webpack_require__(67);
function selectAllView() {
    return dom_1.el(".dhx_list-item.dhx_combobox-options__item.dhx_combobox-options__item--select-all.dhx_combobox__action-select-all", en_1.default.selectAll);
}
exports.selectAllView = selectAllView;
function unselectAllView() {
    return dom_1.el(".dhx_list-item.dhx_combobox-options__item.dhx_combobox-options__item--select-all.dhx_combobox__action-select-all", en_1.default.unselectAll);
}
exports.unselectAllView = unselectAllView;
function emptyListView() {
    return dom_1.el("ul.dhx_list", [dom_1.el("li.dhx_list-item.dhx_combobox-options__item", {}, en_1.default.notFound)]);
}
exports.emptyListView = emptyListView;


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ComboboxEvents;
(function (ComboboxEvents) {
    ComboboxEvents["change"] = "change";
    ComboboxEvents["focus"] = "focus";
    ComboboxEvents["blur"] = "blur";
    ComboboxEvents["keydown"] = "keydown";
    ComboboxEvents["input"] = "input";
    ComboboxEvents["beforeOpen"] = "beforeOpen";
    ComboboxEvents["afterOpen"] = "afterOpen";
    ComboboxEvents["beforeClose"] = "beforeClose";
    ComboboxEvents["afterClose"] = "afterClose";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ComboboxEvents["open"] = "open";
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    ComboboxEvents["close"] = "close";
})(ComboboxEvents = exports.ComboboxEvents || (exports.ComboboxEvents = {}));
var ComboState;
(function (ComboState) {
    ComboState[ComboState["default"] = 0] = "default";
    ComboState[ComboState["error"] = 1] = "error";
    ComboState[ComboState["success"] = 2] = "success";
})(ComboState = exports.ComboState || (exports.ComboState = {}));


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var cells_1 = __webpack_require__(28);
var main_1 = __webpack_require__(11);
var types_1 = __webpack_require__(4);
var BORDERS = 2;
function handleMouse(col, config, type, e) {
    if (!type)
        return;
    var systemEvent = type.toLocaleLowerCase().includes("touch");
    if (systemEvent) {
        config._events.fire(type, [col, e]);
    }
    else {
        config.events.fire(type, [col, e]);
    }
}
function getHandlers(column, rowName, config) {
    return {
        onclick: [handleMouse, column, config, types_1.GridEvents[rowName + "CellClick"]],
        onmouseover: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseOver"]],
        onmousedown: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseDown"]],
        ontouchstart: [handleMouse, column, config, types_1.GridEvents[rowName + "CellMouseDown"]],
        ondblclick: [handleMouse, column, config, types_1.GridEvents[rowName + "CellDblClick"]],
        oncontextmenu: [handleMouse, column, config, types_1.GridEvents[rowName + "CellRightClick"]],
        ontouchmove: [handleMouse, column, config, types_1.GridSystemEvents[rowName + "CellTouchMove"]],
        ontouchend: [handleMouse, column, config, types_1.GridSystemEvents[rowName + "CelltouchEnd"]],
    };
}
function buildRows(columns, name) {
    var header = columns.map(function (col) { return col[name] || [{}]; });
    return main_1.transpose(header);
}
function getCustomContentCell(cell, column, config, rowName, css, colIndex, rowIndex) {
    if (css === void 0) { css = ""; }
    var type = column.type ? "dhx_" + column.type + "-cell" : "dhx_string-cell";
    // TODO: over with index of filter inside of header or footer
    var content = config.content[cell.content] && config.content[cell.content].toHtml(column, config);
    var cellRow = {};
    config.columns.forEach(function (col) {
        var hasContent = !!config.content[col[rowName][rowIndex].content];
        cellRow[col.id] =
            (hasContent && config.content[col[rowName][rowIndex].content].toHtml(col, config)) ||
                col[rowName][rowIndex].text;
    });
    return dom_1.el("." + type, {
        style: {
            class: css.trim(),
            padding: 0,
        },
    }, [
        content &&
            (typeof content === "string" || typeof content === "number"
                ? dom_1.el("div", {
                    class: "dhx_grid-footer-cell-text",
                    role: "presentation",
                    ".innerHTML": column.template && typeof content === "string"
                        ? column.template(content, cellRow, column)
                        : content,
                })
                : content),
    ]);
}
function getRows(config, rowsConfig) {
    if (!config.data || !config.columns) {
        return [];
    }
    var getRowAriaAttrs = function (ind) { return ({
        role: "row",
        "aria-rowindex": ind + 1,
    }); };
    var pos = config.$positions;
    var rowName = rowsConfig.name;
    var columns = config.currentColumns;
    var rowHeight = config[rowName + "RowHeight"] || 40;
    var rows = buildRows(columns, rowName);
    return rows.map(function (row, j) {
        return dom_1.el(".dhx_" + rowName + "-row", __assign({ style: {
                height: rowHeight,
            } }, getRowAriaAttrs(j)), row.map(function (cell, i) {
            var css = cell.css || "";
            var column = columns[i];
            var colIndex = pos.xStart + i + 1;
            var sortIconCss = "dxi dxi-sort-variant dhx_grid-sort-icon";
            var ariaSort = "none";
            if (config.sortBy && "" + column.id === config.sortBy && !cell.content) {
                var dir = config.sortDir || "asc";
                sortIconCss += " dhx_grid-sort-icon--" + dir;
                css += " dhx_grid-" + rowName + "-cell--sorted ";
                ariaSort = dir === "asc" ? "ascending" : "descending";
            }
            var sortIconVisible = main_1.isSortable(config, column) &&
                cell.text &&
                rowName !== "footer" &&
                cell.headerSort !== false;
            if (sortIconVisible) {
                css += " dhx_grid-header-cell--sortable";
            }
            var isFirstCol = i === 0 ? "dhx_first-column-cell" : "";
            var isLastCol = i === columns.length - 1 ? "dhx_last-column-cell" : "";
            if (!cell.content) {
                if (cell.align) {
                    css += " dhx_grid-header-cell--align_" + cell.align + " ";
                }
                else {
                    css += " dhx_grid-header-cell--" + (column.type === "number" || column.type === "percent" || column.type === "date"
                        ? "align_right"
                        : "align_left") + " ";
                }
            }
            css += isFirstCol + " " + isLastCol;
            var resizable = column.resizable !== undefined ? column.resizable : config.resizable;
            if (resizable) {
                resizable = dom_1.el("div", {
                    class: "dhx_resizer_grip_wrap",
                    "aria-hidden": "true",
                }, [
                    dom_1.el("div", {
                        class: "dhx_resizer_grip",
                        dhx_resized: column.id,
                        style: {
                            height: rows.length * 100 + "%",
                        },
                    }, [dom_1.el("div", { class: "dhx_resizer_grip_line" })]),
                ]);
                if (rowName === "footer" || j > 0) {
                    resizable = null;
                }
            }
            if (cell.align) {
                css += " dhx_align-" + cell.align;
            }
            var getCellAriaAttrs = function (rowName, colIndex, ariaSort) {
                var attrs = {
                    "aria-colindex": colIndex,
                };
                if (!sortIconVisible) {
                    // if cell is sortable - set tabindex on button (getInnerCellAriaAttrs),
                    // else - on cell
                    // attrs["tabindex"] = 0;
                    // TODO: after sort AND if first cell is not visible: selection.setCell(first cell) -> scrollTo
                    // TODO: use arrows to navigate, set tabindex for first cell only
                }
                if (rowName === "footer" || cell.content) {
                    attrs["role"] = "gridcell";
                }
                else {
                    attrs["role"] = "columnheader";
                    attrs["aria-sort"] = ariaSort;
                    // attrs["aria-label"] = title;
                }
                return attrs;
            };
            if (cell.content) {
                return dom_1.el(".dhx_grid-" + rowName + "-cell.dhx_grid-custom-content-cell", __assign(__assign({ class: css.trim(), dhx_id: column.id, _key: i, style: {
                        width: column.$width,
                        height: rowName === "footer" ? rowHeight + BORDERS / 2 + "px" : rowHeight + "px",
                    } }, getHandlers(column, rowName, config)), getCellAriaAttrs(rowName, colIndex, ariaSort)), [
                    getCustomContentCell(cell, column, config, rowName, "", colIndex, j),
                    resizable || null,
                ]);
            }
            var getInnerCellAriaAttrs = function (rowName, text) {
                return sortIconVisible
                    ? {
                        role: "button",
                        "aria-label": "Sort by " + text,
                    }
                    : {};
            };
            var cellCss = "dhx_grid-header-cell-text_content";
            if (config.autoHeight)
                cellCss += " dhx_grid-header-cell-text_content-auto-height";
            return dom_1.el(".dhx_grid-" + rowName + "-cell", __assign(__assign({ class: css.trim(), dhx_id: column.id, _key: i, style: {
                    width: column.$width,
                    height: rowName === "footer" ? rowHeight + BORDERS / 2 + "px" : rowHeight + "px",
                } }, getHandlers(column, rowName, config)), getCellAriaAttrs(rowName, colIndex, ariaSort)), [
                dom_1.el("div.dhx_grid-header-cell-text", {
                    role: "presentation",
                }, [
                    dom_1.el("span", __assign(__assign({ class: cellCss }, getInnerCellAriaAttrs(rowName, cell.text)), { style: { lineHeight: rowHeight + "px" }, ".innerHTML": cell.text })),
                    resizable || null,
                ]),
                sortIconVisible && dom_1.el("div", { class: sortIconCss, "aria-hidden": "true" }),
            ]);
        }));
    });
}
exports.getRows = getRows;
function getFixedSpans(config, rowsConfig) {
    var cols = config.columns;
    var rows = main_1.transpose(cols.map(function (col) { return col[rowsConfig.name] || []; }));
    var height = config[rowsConfig.name + "RowHeight"] || 40;
    var rowName = rowsConfig.name;
    var pos = config.$positions;
    var leftShift = 0;
    return rows.map(function (row, i) {
        leftShift = 0;
        return dom_1.el(".dhx_span-row", {
            style: { top: height * i + "px", height: height },
            class: "dhx_header-row",
            "aria-hidden": "true",
        }, row
            .map(function (cell, cellIdx) {
            var col = cols[cellIdx];
            var colIndex = pos.xStart + cellIdx + 1;
            leftShift += col.hidden ? 0 : col.$width;
            var isFirstCol = cellIdx === 0 ? "dhx_first-column-cell" : "";
            var isLastCol = cellIdx === cols.length - 1 || (cell.colspan || 0) + (cellIdx - 1) >= cols.length - 1
                ? "dhx_last-column-cell"
                : "";
            var spanHeight = height;
            if (cell.rowspan) {
                spanHeight = spanHeight * cell.rowspan - 1;
            }
            var sortIconVisible = main_1.isSortable(config, col) && cell.rowspan && cell.text && rowsConfig.name !== "footer";
            var sortIconCss = "dxi dxi-sort-variant dhx_grid-sort-icon";
            if (config.sortBy && "" + col.id === config.sortBy && !cell.content) {
                sortIconCss += " dhx_grid-sort-icon--" + (config.sortDir || "asc");
            }
            var cellAlign = col.align
                ? "dhx_align-" + col.align
                : (col.type === "number" || col.type === "percent" || col.type === "date") &&
                    !cell.colspan
                    ? "dhx_align-right"
                    : "dhx_align-left";
            var css = "dhx_grid-header-cell " + isFirstCol + " " + isLastCol + " " + (cell.rowspan ? "dhx_span-cell__rowspan" : "") + " " + (cell.align ? "dhx_align-" + cell.align : cellAlign) + " " + (cell.css ? cell.css : "");
            if (sortIconVisible) {
                css += " dhx_grid-header-cell--sortable";
            }
            if (!cell.content) {
                if (cell.align) {
                    css += " dhx_grid-header-cell--align_" + cell.align + " ";
                }
                else {
                    css += " dhx_grid-header-cell--" + (col.type === "number" || col.type === "percent" || col.type === "date"
                        ? "align_right"
                        : "align_left") + " ";
                }
            }
            var content = null;
            if (cell.content) {
                content = getCustomContentCell(cell, col, config, rowName, css, colIndex, i);
                content.attrs.style = __assign(__assign({}, content.attrs.style), { width: "100%", borderRight: "0" });
            }
            var borderLeft = "";
            if (leftShift - col.$width > 0) {
                borderLeft = "1px solid #e4e4e4";
            }
            var cellCss = "dhx_grid-header-cell-text_content";
            if (config.autoHeight)
                cellCss += " dhx_grid-header-cell-text_content-auto-height";
            return cell.colspan || cell.rowspan
                ? dom_1.el(".dhx_span-cell", __assign({ style: {
                        width: cells_1.getWidth(cols, cell.colspan, cellIdx),
                        height: rowName === "footer" ? spanHeight + BORDERS / 2 : spanHeight,
                        left: leftShift - col.$width,
                        borderLeft: borderLeft,
                        top: height * i,
                    }, class: css.trim(), dhx_id: col.id }, getHandlers(col, rowName, config)), [
                    content || cell.rowspan
                        ? dom_1.el("div.dhx_grid-header-cell-text", {
                            role: "presentation",
                        }, [
                            dom_1.el("span", {
                                class: cellCss,
                                ".innerHTML": cell.text,
                            }),
                        ])
                        : dom_1.el("span", {
                            class: cellCss,
                            ".innerHTML": cell.text,
                        }),
                    sortIconVisible && dom_1.el("div", { class: sortIconCss }),
                ])
                : null;
        })
            .filter(function (cell) { return cell; }));
    });
}
exports.getFixedSpans = getFixedSpans;
function getFixedRows(config, rowsConfig) {
    var _a;
    var rows = getRows(config, rowsConfig);
    var spans = getFixedSpans(config, rowsConfig);
    var getRowAriaAttrs = function (rowCount) { return ({
        role: "rowgroup",
        "aria-rowcount": rowCount,
    }); };
    var fixedCols = null;
    if (rowsConfig.name === "footer" && !rowsConfig.sticky) {
        fixedCols =
            config.leftSplit >= 0 &&
                getRows(__assign(__assign({}, config), { currentColumns: config.columns.slice(0, config.leftSplit), $positions: __assign(__assign({}, config.$positions), { xStart: 0, xEnd: config.leftSplit }) }), rowsConfig);
    }
    var styles = (_a = {
            position: "sticky"
        },
        _a[rowsConfig.position] = 0,
        _a);
    var left;
    if (!rowsConfig.sticky) {
        styles.left = -config.scroll.left;
        left = -config.scroll.left;
        styles.position = "relative";
    }
    return dom_1.el(".dhx_" + rowsConfig.name + "-wrapper", {
        class: rowsConfig.sticky ? "" : "dhx_compatible-" + rowsConfig.name,
        style: __assign(__assign({}, styles), { left: rowsConfig.sticky ? left : 0, height: rowsConfig.name === "footer"
                ? config[rowsConfig.name + "Height"] + BORDERS / 2
                : config[rowsConfig.name + "Height"], width: rowsConfig.sticky ? config.$totalWidth : rowsConfig.wrapper.width - BORDERS }),
        role: "presentation",
    }, [
        dom_1.el(".dhx_grid-" + rowsConfig.name, {
            style: {
                height: rowsConfig.name === "footer"
                    ? config[rowsConfig.name + "Height"] + BORDERS / 2
                    : config[rowsConfig.name + "Height"],
                left: left,
                paddingLeft: rowsConfig.shifts.x,
                width: config.$totalWidth,
            },
            role: "presentation",
        }, [
            dom_1.el(".dhx_" + rowsConfig.name + "-rows", __assign({}, getRowAriaAttrs(__spreadArrays(rows).length)), __spreadArrays(rows)),
            dom_1.el(".dhx_" + rowsConfig.name + "-spans", {
                style: {
                    marginLeft: -rowsConfig.shifts.x,
                },
                class: "dhx_" + rowsConfig.name + "-rows",
                role: "presentation",
            }, spans),
            fixedCols &&
                dom_1.el(".dhx_" + rowsConfig.name + "-fixed-cols", {
                    style: {
                        position: "absolute",
                        top: 0,
                        left: config.scroll.left + "px",
                        height: "100%",
                    },
                }, fixedCols),
        ]),
        dom_1.el("div", { style: { width: config.$totalWidth }, role: "presentation" }),
    ]);
}
exports.getFixedRows = getFixedRows;


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var html_1 = __webpack_require__(2);
var ts_message_1 = __webpack_require__(19);
var ts_navbar_1 = __webpack_require__(22);
var Toolbar = /** @class */ (function (_super) {
    __extends(Toolbar, _super);
    function Toolbar(element, config) {
        var _this = _super.call(this, element, core_1.extend({
            navigationType: "click",
        }, config)) || this;
        _this._currentRoot = null;
        var render = function () { return _this._draw(element); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    Toolbar.prototype.getState = function (id) {
        if (core_1.isDefined(id) && !this.data.getItem(id)) {
            return;
        }
        var state = {};
        this.data.eachChild(this.data.getRoot(), function (item) {
            if (item.twoState && !item.group) {
                state[item.id] = item.active;
            }
            else if (item.type === "input" || item.type === "selectButton") {
                state[item.id] = item.value;
            }
        }, false);
        for (var key in this._groups) {
            if (this._groups[key].active) {
                state[key] = this._groups[key].active;
            }
        }
        if (id) {
            return state[id];
        }
        return state;
    };
    Toolbar.prototype.setState = function (state) {
        for (var key in state) {
            if (this._groups && this._groups[key]) {
                if (this._groups[key].active) {
                    this.data.update(this._groups[key].active, { active: false });
                    this._groups[key].active = state[key];
                    this.data.update(state[key], { active: true });
                }
            }
            else {
                var item = this.data.getItem(key);
                if (item.type === "input" || item.type === "selectButton") {
                    this.data.update(key, { value: state[key] });
                }
                else {
                    this.data.update(key, { active: state[key] });
                }
            }
        }
    };
    Toolbar.prototype._customHandlers = function () {
        var _this = this;
        return {
            input: function (e) {
                var id = html_1.locate(e);
                _this.data.update(id, { value: e.target.value });
            },
            tooltip: function (e) {
                var elem = html_1.locateNode(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (item.tooltip) {
                    ts_message_1.tooltip(item.tooltip, {
                        node: elem,
                        position: ts_message_1.Position.bottom,
                    });
                }
            },
        };
    };
    Toolbar.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "navItem",
            allowedTypes: [
                "button",
                "imageButton",
                "selectButton",
                "navItem",
                "menuItem",
                "separator",
                "spacer",
                "title",
                "input",
                "customHTML",
                "datePicker",
                "customHTMLButton",
            ],
            widgetName: "toolbar",
        });
    };
    Toolbar.prototype._draw = function (element) {
        var _this = this;
        var getAriaAttrs = function (element) { return ({
            role: "toolbar",
            "aria-label": element || "",
        }); };
        var toolbarHeight = this.data.getLength()
            ? this.data.reduce(function (result, item) {
                switch (item.type) {
                    case "title":
                        return !result ? 20 : result;
                    case "button":
                        return item.size === "small" && (!result || result <= 28) ? 28 : result || 32;
                    default:
                        return 32;
                }
            }, 0) + 24
            : null;
        return dom_1.el("nav.dhx_widget.dhx_toolbar", {
            style: { height: toolbarHeight },
            class: this.config.css ? this.config.css : "",
        }, [
            dom_1.el("ul.dhx_navbar.dhx_navbar--horizontal", __assign(__assign({ dhx_widget_id: this._uid, tabindex: 0 }, getAriaAttrs(element)), { onclick: this._handlers.onclick, onmousedown: this._handlers.onmousedown, oninput: this._handlers.input, onmouseover: this._handlers.tooltip, _hooks: {
                    didInsert: function (node) {
                        node.el.addEventListener("keyup", function (e) {
                            if (e.which !== 9) {
                                return;
                            }
                            var elem = html_1.locateNode(document.activeElement);
                            if (!elem) {
                                return;
                            }
                            var id = elem.getAttribute("dhx_id");
                            var item = _this.data.getItem(id);
                            if (item.tooltip) {
                                ts_message_1.tooltip(item.tooltip, {
                                    node: elem,
                                    position: ts_message_1.Position.bottom,
                                    force: true,
                                });
                            }
                        }, true);
                    },
                } }), this.data.map(function (item) { return _this._factory(item); }, this.data.getRoot(), false)),
        ]);
    };
    Toolbar.prototype._getMode = function (item, root) {
        return item.id === root ? "bottom" : "right";
    };
    Toolbar.prototype._close = function (e) {
        this._activePosition = null;
        this._currentRoot = null;
        _super.prototype._close.call(this, e);
    };
    Toolbar.prototype._setRoot = function (id) {
        if (this.data.getParent(id) === this.data.getRoot()) {
            this._currentRoot = id;
        }
    };
    return Toolbar;
}(ts_navbar_1.Navbar));
exports.Toolbar = Toolbar;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var format_1 = __webpack_require__(13);
var main_1 = __webpack_require__(3);
var date_1 = __webpack_require__(27);
function getCellsDiff(firstCell, lastCell) {
    var firstCellIndex = main_1.getCellIndex(firstCell);
    var lastCellIndex = main_1.getCellIndex(lastCell);
    var x = lastCellIndex.col - firstCellIndex.col;
    var y = lastCellIndex.row - firstCellIndex.row;
    return {
        x: x,
        y: y,
        isLargerByX: Math.abs(x) > Math.abs(y),
    };
}
exports.getCellsDiff = getCellsDiff;
function getLastCopyingCell(firstCell, lastCell) {
    var isRange = main_1.isRangeId(firstCell);
    if (isRange) {
        firstCell = firstCell.split(":")[1];
    }
    var firstCellIndex = main_1.getCellIndex(firstCell);
    var _a = getCellsDiff(firstCell, lastCell), x = _a.x, y = _a.y, isLargerByX = _a.isLargerByX;
    var nextY = firstCellIndex.row + y;
    var nextX = firstCellIndex.col + x;
    var col = isLargerByX ? nextX : firstCellIndex.col;
    var row = isLargerByX ? firstCellIndex.row : nextY;
    return main_1.getCellNameByIndex(row, col);
}
exports.getLastCopyingCell = getLastCopyingCell;
function getProgressionStep(progression) {
    var items = progression.map(function (item) { return parseFloat(item); });
    var sum = items.reduce(function (total, elem) { return total + elem; }, 0);
    var len = items.length;
    return (2 * (sum / len) - 2 * items[0]) / (len - 1);
}
exports.getProgressionStep = getProgressionStep;
function getDateStep(dates) {
    var diff = date_1.dateDiff(dates[0], dates[1]);
    for (var i = 1; i < dates.length - 1; i++) {
        if (date_1.dateDiff(dates[i], dates[i + 1]) !== diff) {
            diff = 0;
            i = dates.length;
        }
    }
    return diff;
}
exports.getDateStep = getDateStep;
function getAutoFilledCells(values, focused, selected, math) {
    var numbers = values.filter(function (item) { return format_1.isNumeric(item.value) && item.format.id !== "date"; }).map(function (i) { return i.value; });
    var dates = values.filter(function (item) { return format_1.isNumeric(item.value) && item.format.id === "date"; }).map(function (i) { return date_1.excelDateToJSDate(i.value); });
    if (numbers.length === 1) {
        numbers.push(+numbers[0] + 1);
    }
    var dateStep = dates.length < 2 ? 1 : getDateStep(dates);
    var focusedCellsArr = main_1.getCellsArray(focused);
    var step = getProgressionStep(numbers);
    var isCellGreater = function (a, b) {
        var aa = main_1.getCellIndex(a);
        var bb = main_1.getCellIndex(b);
        if (aa.row === bb.row) {
            return aa.col > bb.col;
        }
        else {
            return aa.row > bb.row;
        }
    };
    var last = parseFloat(numbers[numbers.length - 1]);
    var lastDate = dates[dates.length - 1];
    var current = 0;
    var _a = focused.split(":"), focusedFirst = _a[0], focusedLast = _a[1];
    var selectedFirst = selected.split(":")[0];
    var largerByX = getCellsDiff(focusedFirst === selectedFirst && focusedLast ? focusedLast : focusedFirst, selectedFirst)
        .isLargerByX;
    var negativeDir = isCellGreater(focusedFirst, selectedFirst);
    if (negativeDir) {
        dateStep = -dateStep;
        lastDate = dates[0];
        step = getProgressionStep(__spreadArrays(numbers.reverse()));
        last = parseFloat(numbers[numbers.length - 1]);
    }
    var targetCells = main_1.getCellsArray(selected).filter(function (c) { return !focusedCellsArr.includes(c); });
    if (negativeDir) {
        targetCells = targetCells.reverse();
        values = values.reverse();
    }
    var res = targetCells.map(function (el, index) {
        var newVal;
        var isMath;
        isMath = values[current].value.toString().startsWith("=");
        newVal = values[current].value;
        if (isMath) {
            var row = 0;
            var col = 0;
            var pos = negativeDir
                ? (index + current + focusedCellsArr.length + 1) * -1
                : index - current + focusedCellsArr.length;
            if (largerByX) {
                col = pos;
            }
            else {
                row = pos;
            }
            newVal = math.transposeMath(newVal, row, col);
        }
        if (format_1.isNumeric(newVal) && values[current].format.id === "date") {
            lastDate = date_1.addDay(lastDate, dateStep);
            newVal = date_1.getExcelDateFromJs(lastDate);
        }
        else if (format_1.isNumeric(newVal)) {
            last = last + step;
            newVal = last.toFixed(5);
        }
        current = values[current + 1] !== undefined ? current + 1 : 0;
        return newVal;
    });
    if (negativeDir) {
        res = res.reverse();
    }
    return {
        cells: targetCells[0] + ":" + targetCells[targetCells.length - 1],
        value: res,
    };
}
exports.getAutoFilledCells = getAutoFilledCells;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var KeyManager_1 = __webpack_require__(20);
var FocusManager_1 = __webpack_require__(10);
var ts_layout_1 = __webpack_require__(21);
var ts_toolbar_1 = __webpack_require__(44);
var helpers_1 = __webpack_require__(186);
var types_1 = __webpack_require__(45);
var WindowController_1 = __webpack_require__(187);
var ts_navbar_1 = __webpack_require__(22);
var Window = /** @class */ (function () {
    function Window(config) {
        var _this = this;
        this.config = core_1.extend({
            movable: false,
            resizable: false,
            closable: config.modal,
        }, config);
        if (this.config.node && typeof this.config.node === "string") {
            this.config.node = document.getElementById(this.config.node);
        }
        else if (!this.config.node) {
            this.config.node = document.body;
        }
        this._uid = core_1.uid();
        this.events = new events_1.EventSystem(this);
        var popup = (this._popup = document.createElement("div"));
        popup.tabIndex = 1;
        popup.setAttribute("role", "dialog");
        popup.setAttribute("aria-modal", "" + (this.config.modal || false));
        if (!this.config.modal) {
            WindowController_1.default.add(this._uid, this._popup);
        }
        this._fullScreen = false;
        this._isActive = false;
        this._keyManager = new KeyManager_1.KeyManager(function (_, focusId) { return focusId === _this._uid; });
        this._initHandlers();
        this._initUI();
        if (this.config.html) {
            this.attachHTML(this.config.html);
        }
    }
    Window.prototype.paint = function () {
        this._layout.paint();
    };
    Window.prototype.isFullScreen = function () {
        return this._fullScreen;
    };
    Window.prototype.setFullScreen = function () {
        if (!this._fullScreen) {
            this._fullScreen = true;
            this.setSize(window.innerWidth, window.innerHeight);
            this.setPosition(window.pageXOffset, window.pageYOffset);
        }
    };
    Window.prototype.unsetFullScreen = function () {
        if (this._fullScreen) {
            this._fullScreen = false;
            this.setSize(this._oldSizes.width, this._oldSizes.height);
            this.setPosition(this._oldPosition.left, this._oldPosition.top);
        }
    };
    Window.prototype.setSize = function (width, height) {
        this._oldSizes = {
            width: this._popup.offsetWidth,
            height: this._popup.offsetHeight,
        };
        var size = {
            width: this._oldSizes.width,
            height: this._oldSizes.height,
        };
        if (core_1.isDefined(width)) {
            this.config.width = size.width = width;
        }
        if (core_1.isDefined(height)) {
            this.config.height = size.height = height;
        }
        this._popup.style.width = size.width + "px";
        this._popup.style.height = size.height + "px";
        this.events.fire(types_1.WindowEvents.resize, [
            size,
            this._oldSizes,
            { left: true, top: true, bottom: true, right: true },
        ]);
    };
    Window.prototype.getSize = function () {
        return {
            width: this._popup.offsetWidth,
            height: this._popup.offsetHeight,
        };
    };
    Window.prototype.setPosition = function (left, top) {
        this._oldPosition = {
            left: this._popup.offsetLeft,
            top: this._popup.offsetTop,
        };
        var position = {
            left: this._oldPosition.left,
            top: this._oldPosition.top,
        };
        if (core_1.isDefined(left)) {
            this.config.left = position.left = left;
        }
        if (core_1.isDefined(top)) {
            this.config.top = position.top = top;
        }
        this._popup.style.left = position.left + "px";
        this._popup.style.top = position.top + "px";
        this.events.fire(types_1.WindowEvents.resize, [
            position,
            this._oldPosition,
            { left: true, top: true, bottom: true, right: true },
        ]);
    };
    Window.prototype.getPosition = function () {
        return {
            left: this._popup.offsetLeft,
            top: this._popup.offsetTop,
        };
    };
    Window.prototype.show = function (left, top) {
        if (left === void 0) { left = this.config.left; }
        if (top === void 0) { top = this.config.top; }
        if (!this.events.fire(types_1.WindowEvents.beforeShow, [{ left: left, top: top }])) {
            return;
        }
        if (this.isVisible()) {
            this.hide();
        }
        WindowController_1.default.setActive(this._uid);
        this._popup.className +=
            " dhx_popup dhx_widget" +
                (this.config.modal ? " dhx_popup--window_modal" : " dhx_popup--window") +
                (this.config.css ? " " + this.config.css : "");
        this._popup.style.position = this.config.modal ? "fixed" : "absolute";
        this._popup.setAttribute("dhx_widget_id", this._uid);
        var _a = this._getContainerParams(), containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight, containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset;
        var width = (this.config.width =
            this.config.width || this.config.minWidth || containerInnerWidth / 2);
        var height = (this.config.height =
            this.config.height || this.config.minHeight || containerInnerHeight / 2);
        this.config.left = left = core_1.isDefined(left)
            ? left
            : (containerInnerWidth - width) / (this.config.modal ? 2 : 2 + containerXOffset);
        this.config.top = top = core_1.isDefined(top)
            ? top
            : (containerInnerHeight - height) / (this.config.modal ? 2 : 2 + containerYOffset);
        if (this._isActive) {
            this._popup.style.left = left + "px";
            this._popup.style.top = top + "px";
            return;
        }
        if (this.config.viewportOverflow) {
            WindowController_1.default.openFreeWindow(this.config.node);
        }
        if (this.config.modal) {
            this._blockScreen();
        }
        this._popup.style.width = width + "px";
        this._popup.style.height = height + "px";
        this._popup.style.left = left + "px";
        this._popup.style.top = top + "px";
        this.config.node.appendChild(this._popup);
        this._popup.focus();
        this._isActive = true;
        this.events.fire(types_1.WindowEvents.afterShow, [{ left: left, top: top }]);
        FocusManager_1.focusManager.setFocusId(this._uid);
    };
    Window.prototype.hide = function () {
        this._hide();
    };
    Window.prototype._hide = function (e) {
        if (!this._isActive ||
            !this.events.fire(types_1.WindowEvents.beforeHide, [{ left: this.config.left, top: this.config.top }, e])) {
            return;
        }
        if (this.config.viewportOverflow) {
            WindowController_1.default.closeFreeWindow(this.config.node);
        }
        if (this._blocker) {
            this.config.node.removeChild(this._blocker);
            if (this.config.closable) {
                this._keyManager.removeHotKey(null, this);
            }
            this._blocker = null;
        }
        this.config.node.removeChild(this._popup);
        this._isActive = false;
        this.events.fire(types_1.WindowEvents.afterHide, [{ left: this.config.left, top: this.config.top }, e]);
    };
    Window.prototype.isVisible = function () {
        return this._isActive;
    };
    Window.prototype.getWidget = function () {
        return this._layout.getCell("content").getWidget();
    };
    Window.prototype.getContainer = function () {
        return this.getRootView().data._container;
    };
    Window.prototype.attach = function (name, config) {
        this._layout.getCell("content").attach(name, config);
    };
    Window.prototype.attachHTML = function (html) {
        this._layout.getCell("content").attachHTML(html);
    };
    Window.prototype.getRootView = function () {
        return this._layout.getRootView();
    };
    Window.prototype.destructor = function () {
        this._isActive && this.hide();
        this.header && this.header.destructor();
        this.footer && this.footer.destructor();
        this.events && this.events.clear();
        this._keyManager && this._keyManager.destructor();
        this._layout && this._layout.destructor();
        this.config = this.header = this.footer = this.events = null;
        this._popup = this._uid = this._handlers = this._isActive = this._keyManager = this._fullScreen = this._oldSizes = this._oldPosition = null;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Window.prototype.fullScreen = function () {
        this.setFullScreen();
    };
    Window.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            headerDblClick: function (e) { return _this.events.fire(types_1.WindowEvents.headerDoubleClick, [e]); },
            move: function (e) {
                if (e.which === 3) {
                    return;
                }
                e.preventDefault();
                WindowController_1.default.setActive(_this._uid);
                helpers_1.detectDrag(e).then(function (pos) {
                    if (pos) {
                        _this._startDrag(pos.x, pos.y);
                    }
                });
            },
            resize: {
                ".dhx_window-resizer": function (e) {
                    if (e.which === 3) {
                        return;
                    }
                    e.preventDefault();
                    WindowController_1.default.setActive(_this._uid);
                    helpers_1.detectDrag(e).then(function (pos) {
                        if (pos) {
                            var classList = e.target.classList;
                            if (classList.contains("dhx_window-resizer--left")) {
                                _this._startResize({ left: true });
                            }
                            else if (classList.contains("dhx_window-resizer--right")) {
                                _this._startResize({ right: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top")) {
                                _this._startResize({ top: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom")) {
                                _this._startResize({ bottom: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom_left")) {
                                _this._startResize({ left: true, bottom: true });
                            }
                            else if (classList.contains("dhx_window-resizer--bottom_right")) {
                                _this._startResize({ bottom: true, right: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top_left")) {
                                _this._startResize({ top: true, left: true });
                            }
                            else if (classList.contains("dhx_window-resizer--top_right")) {
                                _this._startResize({ top: true, right: true });
                            }
                        }
                    });
                },
            },
            setActive: function () {
                WindowController_1.default.setActive(_this._uid);
            },
        };
    };
    Window.prototype._initUI = function () {
        var _this = this;
        var rows = [];
        var isHeader = (this.config.header || this.config.title || this.config.closable || this.config.movable) &&
            this.config.header !== false;
        if (isHeader) {
            rows.push({
                id: "header",
                height: "content",
                css: "dhx_window-header " + (this.config.movable ? "dhx_window-header--movable" : ""),
                on: {
                    mousedown: this.config.movable && this._handlers.move,
                    dblclick: this._handlers.headerDblClick,
                },
            });
        }
        rows.push({
            id: "content",
            css: isHeader ? "dhx_window-content" : "dhx_window-content-without-header",
        });
        if (this.config.footer) {
            rows.push({ id: "footer", height: "content", css: "dhx_window-footer" });
        }
        if (this.config.resizable) {
            rows.push({ id: "resizers", height: "content", css: "resizers" });
        }
        var layout = (this._layout = new ts_layout_1.Layout(this._popup, {
            css: "dhx_window" + (this.config.modal ? " dhx_window--modal" : ""),
            rows: rows,
            on: {
                click: this._handlers.setActive,
            },
            id: this._uid,
        }));
        if (isHeader) {
            var header = (this.header = new ts_toolbar_1.Toolbar());
            if (this.config.title) {
                this.header.data.add({
                    type: "title",
                    value: this.config.title,
                    id: "title",
                    css: "title_max",
                });
                this._popup.setAttribute("aria-label", this.config.title);
            }
            if (this.config.closable) {
                this.header.data.add({
                    type: "spacer",
                });
                this.header.data.add({
                    id: "close",
                    type: "button",
                    view: "link",
                    size: "medium",
                    color: "secondary",
                    circle: true,
                    icon: "dxi dxi-close",
                });
                header.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
                    if (id === "close") {
                        _this._hide(e);
                    }
                });
            }
            layout.getCell("header").attach(header);
        }
        if (this.config.footer) {
            var footer = (this.footer = new ts_toolbar_1.Toolbar());
            layout.getCell("footer").attach(footer);
        }
        if (this.config.resizable) {
            layout.getCell("resizers").attach(function () { return _this._drawResizers(); });
        }
    };
    Window.prototype._drawResizers = function () {
        return dom_1.el(".dhx-resizers", {
            onmousedown: this._handlers.resize,
        }, [
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--left", { _ref: "left" }),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--right", { _ref: "right" }),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--bottom", { _ref: "bottom" }),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--top", { _ref: "top" }),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--bottom_right", { _ref: "bottomRight" }),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--bottom_left", { _ref: "bottomLeft" }),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--top_right", { _ref: "topRight" }),
            dom_1.el(".dhx_window-resizer.dhx_window-resizer--top_left", { _ref: "topLeft" }),
        ]);
    };
    Window.prototype._startDrag = function (x, y) {
        var _this = this;
        this.config.node.classList.add("dhx_window--stop_selection");
        var deltaX = x - this._popup.offsetLeft;
        var deltaY = y - this._popup.offsetTop;
        var width = this._popup.offsetWidth;
        var height = this._popup.offsetHeight;
        var mousemove = function (e) {
            var oldposition = {
                left: _this._popup.offsetLeft,
                top: _this._popup.offsetTop,
            };
            var newX = e.pageX - deltaX;
            var newY = e.pageY - deltaY;
            if (!_this.config.viewportOverflow) {
                var _a = _this._getContainerParams(), containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset, containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight;
                if (newX < containerXOffset) {
                    newX = containerXOffset;
                }
                else if (newX > containerXOffset + containerInnerWidth - width) {
                    newX = containerXOffset + containerInnerWidth - width;
                }
                if (newY < containerYOffset) {
                    newY = containerYOffset;
                }
                else if (newY > containerYOffset + containerInnerHeight - height) {
                    newY = containerYOffset + containerInnerHeight - height;
                }
            }
            _this.config.left = newX;
            _this.config.top = newY;
            _this._popup.style.left = newX + "px";
            _this._popup.style.top = newY + "px";
            var position = { left: newX, top: newY };
            _this.events.fire(types_1.WindowEvents.move, [
                position,
                oldposition,
                { left: true, top: true, bottom: true, right: true },
            ]);
        };
        var mouseup = function () {
            document.removeEventListener("mouseup", mouseup);
            document.removeEventListener("mousemove", mousemove);
            _this.config.node.classList.remove("dhx_window--stop_selection");
        };
        document.addEventListener("mouseup", mouseup);
        document.addEventListener("mousemove", mousemove);
    };
    Window.prototype._startResize = function (resizeConfig) {
        var _this = this;
        var minWidth = this.config.minWidth | 100;
        var minHeight = this.config.minHeight | 100;
        var left = this._popup.offsetLeft;
        var top = this._popup.offsetTop;
        var width = this._popup.offsetWidth;
        var height = this._popup.offsetHeight;
        var root = this.getRootView().refs;
        var resizer;
        var resizeClassName;
        switch (true) {
            case resizeConfig.bottom && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--bottom_left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.bottom && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--bottom_right";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.top && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--top_left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.top && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--top-right";
                resizer = root.right;
                break;
            case resizeConfig.top:
                resizeClassName = "dhx_window-body-pointer--top";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.bottom:
                resizeClassName = "dhx_window-body-pointer--bottom";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--right";
                resizer = root.right;
                break;
        }
        resizer.el.classList.add("dhx_window-resizer--active");
        this.config.node.classList.add("dhx_window--stop_selection");
        this.config.node.classList.add(resizeClassName);
        var mousemove = function (e) {
            var _a = _this._getContainerParams(), containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight, containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset;
            var size = {
                width: _this._notInNode() ? e.pageX - left : e.pageX - _this.config.node.offsetLeft - left,
                height: _this._notInNode() ? e.pageY - top : e.pageY - _this.config.node.offsetTop - top,
                left: _this._notInNode() ? e.pageX : e.pageX - _this.config.node.offsetLeft,
                top: _this._notInNode() ? e.pageY : e.pageY - _this.config.node.offsetTop,
            };
            if (resizeConfig.right) {
                if (size.width < minWidth) {
                    size.width = minWidth;
                }
                else if (size.width > containerXOffset + containerInnerWidth - left) {
                    size.width = containerXOffset + containerInnerWidth - left;
                }
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.bottom) {
                if (size.height < minHeight) {
                    size.height = minHeight;
                }
                else if (size.height > containerYOffset + containerInnerHeight - top) {
                    size.height = containerYOffset + containerInnerHeight - top;
                }
                _this._popup.style.height = size.height + "px";
            }
            if (resizeConfig.left) {
                if (left + width - size.left < minWidth) {
                    size.left = left + width - minWidth;
                }
                size.width = left + width - size.left;
                _this.config.left = size.left;
                _this._popup.style.left = size.left + "px";
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.top) {
                if (size.top < containerYOffset) {
                    size.top = containerYOffset;
                }
                else if (top + height - size.top < minHeight) {
                    size.top = top + height - minHeight;
                }
                size.height = top + height - size.top;
                _this.config.top = size.top;
                _this._popup.style.top = size.top + "px";
                _this._popup.style.height = size.height + "px";
            }
            _this.config.width = _this._popup.offsetWidth;
            _this.config.height = _this._popup.offsetHeight;
            _this.events.fire(types_1.WindowEvents.resize, [size, { left: left, top: top, height: height, width: width }, resizeConfig]);
        };
        var mouseup = function () {
            document.removeEventListener("mouseup", mouseup);
            document.removeEventListener("mousemove", mousemove);
            _this.config.node.classList.remove("dhx_window--stop_selection");
            _this.config.node.classList.remove(resizeClassName);
            resizer.el.classList.remove("dhx_window-resizer--active");
        };
        document.addEventListener("mouseup", mouseup);
        document.addEventListener("mousemove", mousemove);
    };
    Window.prototype._blockScreen = function () {
        var _this = this;
        var blocker = document.createElement("div");
        blocker.className = "dhx_window__overlay";
        this.config.node.appendChild(blocker);
        this._blocker = blocker;
        if (this.config.closable) {
            blocker.addEventListener("click", function (e) { return _this._hide(e); });
            this._keyManager.addHotKey("escape", function (e) {
                var collection1 = Array.prototype.slice.call(document.querySelectorAll(".dhx_popup--window_modal"));
                var collection2 = Array.prototype.slice.call(document.querySelectorAll(".dhx_popup--window"));
                var mainCollection = collection1.concat(collection2);
                if (mainCollection.length === 1) {
                    _this._hide(e);
                    return;
                }
                mainCollection.sort(function (a, b) {
                    return +window.getComputedStyle(b).zIndex - +window.getComputedStyle(a).zIndex;
                });
                if (mainCollection[mainCollection.length - 1] === _this._popup) {
                    _this._hide(e);
                }
                return;
            });
        }
    };
    Window.prototype._notInNode = function () {
        return this.config.node === document.body || this.config.modal;
    };
    Window.prototype._getContainerParams = function () {
        var notInNode = this._notInNode();
        return {
            containerInnerWidth: notInNode ? window.innerWidth : this.config.node.offsetWidth,
            containerInnerHeight: notInNode ? window.innerHeight : this.config.node.offsetHeight,
            containerXOffset: notInNode ? window.pageXOffset : this.config.node.scrollLeft,
            containerYOffset: notInNode ? window.pageYOffset : this.config.node.scrollTop,
        };
    };
    return Window;
}());
exports.Window = Window;


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(75);
__webpack_require__(76);
__webpack_require__(77);
__webpack_require__(78);
__webpack_require__(79);
module.exports = __webpack_require__(80);


/***/ }),
/* 75 */
/***/ (function(module, exports) {

Object.values = Object.values
    ? Object.values
    : function (obj) {
        var allowedTypes = [
            "[object String]",
            "[object Object]",
            "[object Array]",
            "[object Function]",
        ];
        var objType = Object.prototype.toString.call(obj);
        if (obj === null || typeof obj === "undefined") {
            throw new TypeError("Cannot convert undefined or null to object");
        }
        else if (!~allowedTypes.indexOf(objType)) {
            return [];
        }
        else {
            // if ES6 is supported
            if (Object.keys) {
                return Object.keys(obj).map(function (key) {
                    return obj[key];
                });
            }
            var result = [];
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    result.push(obj[prop]);
                }
            }
            return result;
        }
    };
if (!Object.assign) {
    Object.defineProperty(Object, "assign", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (target) {
            "use strict";
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (target === undefined || target === null) {
                throw new TypeError("Cannot convert first argument to object");
            }
            var to = Object(target);
            for (var i = 0; i < args.length; i++) {
                var nextSource = args[i];
                if (nextSource === undefined || nextSource === null) {
                    continue;
                }
                var keysArray = Object.keys(Object(nextSource));
                for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
                    var nextKey = keysArray[nextIndex];
                    var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
                    if (desc !== undefined && desc.enumerable) {
                        to[nextKey] = nextSource[nextKey];
                    }
                }
            }
            return to;
        },
    });
}


/***/ }),
/* 76 */
/***/ (function(module, exports) {

/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/unbound-method */
// eslint-disable-next-line @typescript-eslint/unbound-method
if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, "includes", {
        value: function (searchElement, fromIndex) {
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            // 1. Let O be ? ToObject(this value).
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If len is 0, return false.
            if (len === 0) {
                return false;
            }
            // 4. Let n be ? ToInteger(fromIndex).
            //    (If fromIndex is undefined, this step produces the value 0.)
            var n = fromIndex | 0;
            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
            function sameValueZero(x, y) {
                return x === y || (typeof x === "number" && typeof y === "number" && isNaN(x) && isNaN(y));
            }
            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                if (sameValueZero(o[k], searchElement)) {
                    return true;
                }
                // c. Increase k by 1.
                k++;
            }
            // 8. Return false
            return false;
        },
        configurable: true,
        writable: true,
    });
}
// https://tc39.github.io/ecma262/#sec-array.prototype.find
if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, "find", {
        value: function (predicate) {
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If IsCallable(predicate) is false, throw a TypeError exception.
            if (typeof predicate !== "function") {
                throw new TypeError("predicate must be a function");
            }
            // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
            var thisArg = arguments[1];
            // 5. Let k be 0.
            var k = 0;
            // 6. Repeat, while k < len
            while (k < len) {
                // a. Let Pk be ! ToString(k).
                // b. Let kValue be ? Get(O, Pk).
                // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
                // d. If testResult is true, return kValue.
                var kValue = o[k];
                if (predicate.call(thisArg, kValue, k, o)) {
                    return kValue;
                }
                // e. Increase k by 1.
                k++;
            }
            // 7. Return undefined.
            return undefined;
        },
        configurable: true,
        writable: true,
    });
}
if (!Array.prototype.findIndex) {
    Array.prototype.findIndex = function (predicate) {
        if (this == null) {
            throw new TypeError("Array.prototype.findIndex called on null or undefined");
        }
        if (typeof predicate !== "function") {
            throw new TypeError("predicate must be a function");
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;
        for (var i = 0; i < length; i++) {
            value = list[i];
            if (predicate.call(thisArg, value, i, list)) {
                return i;
            }
        }
        return -1;
    };
}


/***/ }),
/* 77 */
/***/ (function(module, exports) {

if (!String.prototype.includes) {
    String.prototype.includes = function (search, start) {
        "use strict";
        if (typeof start !== "number") {
            start = 0;
        }
        if (start + search.length > this.length) {
            return false;
        }
        else {
            return this.indexOf(search, start) !== -1;
        }
    };
}
if (!String.prototype.endsWith) {
    Object.defineProperty(String.prototype, "endsWith", {
        value: function (searchString, position) {
            var subjectString = this.toString();
            if (position === undefined || position > subjectString.length) {
                position = subjectString.length;
            }
            position -= searchString.length;
            var lastIndex = subjectString.indexOf(searchString, position);
            return lastIndex !== -1 && lastIndex === position;
        },
    });
}
if (!String.prototype.startsWith) {
    Object.defineProperty(String.prototype, "startsWith", {
        enumerable: false,
        configurable: true,
        writable: true,
        value: function (searchString, position) {
            position = position || 0;
            return this.indexOf(searchString, position) === position;
        },
    });
}
if (!String.prototype.padStart) {
    String.prototype.padStart = function padStart(targetLength, padString) {
        targetLength = targetLength >> 0;
        padString = String(padString || " ");
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength - this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length);
            }
            return padString.slice(0, targetLength) + String(this);
        }
    };
}
if (!String.prototype.padEnd) {
    String.prototype.padEnd = function padEnd(targetLength, padString) {
        targetLength = targetLength >> 0;
        padString = String(padString || " ");
        if (this.length > targetLength) {
            return String(this);
        }
        else {
            targetLength = targetLength - this.length;
            if (targetLength > padString.length) {
                padString += padString.repeat(targetLength / padString.length);
            }
            return String(this) + padString.slice(0, targetLength);
        }
    };
}


/***/ }),
/* 78 */
/***/ (function(module, exports) {

/* eslint-disable @typescript-eslint/no-this-alias */
/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/unbound-method */
if (Element && !Element.prototype.matches) {
    var proto = Element.prototype;
    proto.matches =
        proto.matchesSelector ||
            proto.mozMatchesSelector ||
            proto.msMatchesSelector ||
            proto.oMatchesSelector ||
            proto.webkitMatchesSelector;
}
// Source: https://github.com/naminho/svg-classlist-polyfill/blob/master/polyfill.js
if (!("classList" in SVGElement.prototype)) {
    Object.defineProperty(SVGElement.prototype, "classList", {
        get: function get() {
            var _this = this;
            return {
                contains: function contains(className) {
                    return _this.className.baseVal.split(" ").indexOf(className) !== -1;
                },
                add: function add(className) {
                    return _this.setAttribute("class", _this.getAttribute("class") + " " + className);
                },
                remove: function remove(className) {
                    var removedClass = _this
                        .getAttribute("class")
                        .replace(new RegExp("(\\s|^)".concat(className, "(\\s|$)"), "g"), "$2");
                    if (_this.classList.contains(className)) {
                        _this.setAttribute("class", removedClass);
                    }
                },
                toggle: function toggle(className) {
                    if (this.contains(className)) {
                        this.remove(className);
                    }
                    else {
                        this.add(className);
                    }
                },
            };
        },
        configurable: true,
    });
}
// Source: https://github.com/tc39/proposal-object-values-entries/blob/master/polyfill.js
if (!Object.entries) {
    var reduce_1 = Function.bind.call(Function.call, Array.prototype.reduce);
    var isEnumerable_1 = Function.bind.call(Function.call, Object.prototype.propertyIsEnumerable);
    var concat_1 = Function.bind.call(Function.call, Array.prototype.concat);
    Object.entries = function entries(O) {
        return reduce_1(Object.keys(O), function (e, k) { return concat_1(e, typeof k === "string" && isEnumerable_1(O, k) ? [[k, O[k]]] : []); }, []);
    };
}
// Source: https://gist.github.com/rockinghelvetica/00b9f7b5c97a16d3de75ba99192ff05c
if (!Event.prototype.composedPath) {
    Event.prototype.composedPath = function () {
        if (this.path) {
            return this.path;
        }
        var target = this.target;
        this.path = [];
        while (target.parentNode !== null) {
            this.path.push(target);
            target = target.parentNode;
        }
        this.path.push(document, window);
        return this.path;
    };
}


/***/ }),
/* 79 */
/***/ (function(module, exports) {

Math.sign =
    Math.sign ||
        function (x) {
            x = +x;
            if (x === 0 || isNaN(x)) {
                return x;
            }
            return x > 0 ? 1 : -1;
        };


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CssManager_1 = __webpack_require__(81);
exports.css = CssManager_1.cssManager;
var en_1 = __webpack_require__(14);
__webpack_require__(82);
var ts_message_1 = __webpack_require__(19);
exports.message = ts_message_1.message;
var d = (window.dhx = window.dhx || {});
exports.i18n = d.i18n || {};
exports.i18n.setLocale = function (component, value) {
    var target = exports.i18n[component];
    for (var key in value) {
        target[key] = value[key];
    }
};
exports.i18n.spreadsheet = exports.i18n.spreadsheet || en_1.default;
d.css = d.css || CssManager_1.cssManager;
var Spreadsheet_1 = __webpack_require__(89);
exports.Spreadsheet = Spreadsheet_1.Spreadsheet;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var CssManager = /** @class */ (function () {
    function CssManager() {
        this._classes = {};
        var styles = document.createElement("style");
        styles.id = "dhx_generated_styles";
        this._styleCont = document.head.appendChild(styles);
    }
    CssManager.prototype.update = function () {
        if (this._styleCont.innerHTML !== this._generateCss()) {
            document.head.appendChild(this._styleCont);
            this._styleCont.innerHTML = this._generateCss();
        }
    };
    CssManager.prototype.remove = function (className) {
        delete this._classes[className];
        this.update();
    };
    CssManager.prototype.add = function (cssList, customId, silent) {
        if (silent === void 0) { silent = false; }
        var cssString = this._toCssString(cssList);
        var id = this._findSameClassId(cssString);
        if (id && customId && customId !== id) {
            this._classes[customId] = this._classes[id];
            return customId;
        }
        if (id) {
            return id;
        }
        return this._addNewClass(cssString, customId, silent);
    };
    CssManager.prototype.get = function (className) {
        if (this._classes[className]) {
            var props = {};
            var css = this._classes[className].split(";");
            for (var _i = 0, css_1 = css; _i < css_1.length; _i++) {
                var item = css_1[_i];
                if (item) {
                    var prop = item.split(":");
                    props[prop[0]] = prop[1];
                }
            }
            return props;
        }
        return null;
    };
    CssManager.prototype.destructor = function () {
        this._classes = this._styleCont = null;
    };
    CssManager.prototype._findSameClassId = function (cssString) {
        for (var key in this._classes) {
            if (cssString === this._classes[key]) {
                return key;
            }
        }
        return null;
    };
    CssManager.prototype._addNewClass = function (cssString, customId, silent) {
        var id = customId || "dhx_generated_class_" + core_1.uid();
        this._classes[id] = cssString;
        if (!silent) {
            this.update();
        }
        return id;
    };
    CssManager.prototype._toCssString = function (cssList) {
        var cssString = "";
        for (var key in cssList) {
            var prop = cssList[key];
            var name_1 = key.replace(/[A-Z]{1}/g, function (letter) { return "-" + letter.toLowerCase(); });
            cssString += name_1 + ":" + prop + ";";
        }
        return cssString;
    };
    CssManager.prototype._generateCss = function () {
        var result = "";
        for (var key in this._classes) {
            var cssProps = this._classes[key];
            result += "." + key + "{" + cssProps + "}\n";
        }
        return result;
    };
    return CssManager;
}());
exports.CssManager = CssManager;
exports.cssManager = new CssManager();


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var html_1 = __webpack_require__(2);
var types_1 = __webpack_require__(34);
var nodeTimeout = new WeakMap();
var containers = new Map();
function createMessageContainer(parent, position) {
    var messageContainer = document.createElement("div");
    messageContainer.setAttribute("data-position", position);
    messageContainer.className =
        "dhx_message-container " +
            "dhx_message-container--" +
            position +
            (parent === document.body ? " dhx_message-container--in-body" : "");
    return messageContainer;
}
function onExpire(node, fromClick) {
    if (fromClick) {
        clearTimeout(nodeTimeout.get(node));
    }
    var container = node.parentNode;
    var position = container.getAttribute("data-position");
    var parent = container.parentNode;
    var messageContainerInfo = containers.get(parent);
    if (!messageContainerInfo) {
        return;
    }
    var positionInfo = messageContainerInfo[position];
    if (!positionInfo) {
        return;
    }
    var stack = positionInfo.stack;
    var index = stack.indexOf(node);
    if (index !== -1) {
        container.removeChild(node);
        stack.splice(index, 1);
        if (stack.length === 0) {
            parent.removeChild(container);
        }
        return;
    }
}
function message(props) {
    var _a;
    if (typeof props === "string") {
        props = { text: props };
    }
    props.position = props.position || types_1.MessageContainerPosition.topRight;
    var messageBox = document.createElement("div");
    messageBox.className = "dhx_widget dhx_message " + (props.css || "");
    messageBox.setAttribute("role", "alert");
    var textId = props.text && core_1.uid();
    textId && messageBox.setAttribute("aria-describedby", textId);
    if (props.html) {
        messageBox.innerHTML = props.html;
    }
    else {
        messageBox.innerHTML = "<span class=\"dhx_message__text\" id=" + textId + ">" + props.text + "</span>\n\t\t" + (props.icon ? "<span class=\"dhx_message__icon dxi " + props.icon + "\"></span>" : "");
    }
    var parent = props.node ? html_1.toNode(props.node) : document.body;
    var position = getComputedStyle(parent).position;
    if (position === "static") {
        parent.style.position = "relative";
    }
    var messageContainerInfo = containers.get(parent);
    if (!messageContainerInfo) {
        containers.set(parent, (_a = {},
            _a[props.position] = {
                stack: [],
                container: createMessageContainer(parent, props.position),
            },
            _a));
    }
    else if (!messageContainerInfo[props.position]) {
        messageContainerInfo[props.position] = {
            stack: [],
            container: createMessageContainer(parent, props.position),
        };
    }
    var _b = containers.get(parent)[props.position], stack = _b.stack, container = _b.container;
    if (stack.length === 0) {
        parent.appendChild(container);
    }
    stack.push(messageBox);
    container.appendChild(messageBox);
    if (props.expire) {
        var timeout = setTimeout(function () { return onExpire(messageBox); }, props.expire);
        nodeTimeout.set(messageBox, timeout);
    }
    messageBox.onclick = function () { return onExpire(messageBox, true); };
}
exports.message = message;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(46);
var common_1 = __webpack_require__(47);
var core_1 = __webpack_require__(1);
function alert(props) {
    var apply = props.buttons && props.buttons[0] ? props.buttons[0] : en_1.default.apply;
    var unblock = common_1.blockScreen(props.blockerCss);
    return new Promise(function (res) {
        var contentId = "dhx_alert__" + core_1.uid() + "_content";
        var headerId = "dhx_alert__" + core_1.uid() + "_header";
        var alertBox = document.createElement("div");
        alertBox.setAttribute("role", "alert");
        alertBox.setAttribute("aria-modal", "true");
        props.text && alertBox.setAttribute("aria-describedby", contentId);
        props.header && alertBox.setAttribute("aria-labelledby", headerId);
        alertBox.className = "dhx_widget dhx_alert " + (props.css || "");
        var closeAlert = function (e) {
            if (e.key === "Escape" || e.key === "Esc") {
                // eslint-disable-next-line @typescript-eslint/no-use-before-define
                close(e);
                res(false);
            }
        };
        function close(e) {
            e.preventDefault();
            unblock();
            document.body.removeChild(alertBox);
            document.removeEventListener("keydown", closeAlert);
        }
        alertBox.innerHTML = "\n\t\t\t" + (props.header ? "<div id=" + headerId + " class=\"dhx_alert__header\"> " + props.header + " </div>" : "") + "\n\t\t\t" + (props.text ? "<div id=" + contentId + " class=\"dhx_alert__content\">" + props.text + "</div>" : "") + "\n\t\t\t<div class=\"dhx_alert__footer " + (props.buttonsAlignment ? "dhx_alert__footer--" + props.buttonsAlignment : "") + "\">\n\t\t\t\t<button type=\"button\" aria-label=\"confirm\" class=\"dhx_alert__apply-button dhx_button dhx_button--view_flat dhx_button--color_primary dhx_button--size_medium\">" + apply + "</button>\n\t\t\t</div>";
        document.body.appendChild(alertBox);
        alertBox.querySelector(".dhx_alert__apply-button").focus();
        alertBox.querySelector("button").addEventListener("click", function (e) {
            close(e);
            res(true);
        });
        document.addEventListener("keydown", closeAlert);
    });
}
exports.alert = alert;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
            (typeof self !== "undefined" && self) ||
            window;
var apply = Function.prototype.apply;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) {
  if (timeout) {
    timeout.close();
  }
};

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(scope, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// setimmediate attaches itself to the global object
__webpack_require__(86);
// On some exotic environments, it's not clear which object `setimmediate` was
// able to install onto.  Search each possibility in the same order as the
// `setimmediate` library.
exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
                       (typeof global !== "undefined" && global.setImmediate) ||
                       (this && this.setImmediate);
exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
                         (typeof global !== "undefined" && global.clearImmediate) ||
                         (this && this.clearImmediate);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(35)))

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var registerImmediate;

    function setImmediate(callback) {
      // Callback can either be a function or a string
      if (typeof callback !== "function") {
        callback = new Function("" + callback);
      }
      // Copy function arguments
      var args = new Array(arguments.length - 1);
      for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i + 1];
      }
      // Store and register the task
      var task = { callback: callback, args: args };
      tasksByHandle[nextHandle] = task;
      registerImmediate(nextHandle);
      return nextHandle++;
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function run(task) {
        var callback = task.callback;
        var args = task.args;
        switch (args.length) {
        case 0:
            callback();
            break;
        case 1:
            callback(args[0]);
            break;
        case 2:
            callback(args[0], args[1]);
            break;
        case 3:
            callback(args[0], args[1], args[2]);
            break;
        default:
            callback.apply(undefined, args);
            break;
        }
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(runIfPresent, 0, handle);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    run(task);
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function installNextTickImplementation() {
        registerImmediate = function(handle) {
            process.nextTick(function () { runIfPresent(handle); });
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        registerImmediate = function(handle) {
            global.postMessage(messagePrefix + handle, "*");
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        registerImmediate = function(handle) {
            channel.port2.postMessage(handle);
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        registerImmediate = function(handle) {
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
        };
    }

    function installSetTimeoutImplementation() {
        registerImmediate = function(handle) {
            setTimeout(runIfPresent, 0, handle);
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6–8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(35), __webpack_require__(87)))

/***/ }),
/* 87 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(46);
var common_1 = __webpack_require__(47);
var core_1 = __webpack_require__(1);
function confirm(props) {
    props.buttonsAlignment = props.buttonsAlignment || "right";
    var apply = props.buttons && props.buttons[1] ? props.buttons[1] : en_1.default.apply;
    var reject = props.buttons && props.buttons[0] ? props.buttons[0] : en_1.default.reject;
    var unblock = common_1.blockScreen(props.blockerCss);
    return new Promise(function (res) {
        var confirmBox = document.createElement("div");
        confirmBox.setAttribute("role", "alertdialog");
        confirmBox.setAttribute("aria-modal", "true");
        var headerId = props.header && core_1.uid();
        var textId = props.header && core_1.uid();
        textId && confirmBox.setAttribute("aria-describedby", textId);
        headerId && confirmBox.setAttribute("aria-labelledby", headerId);
        var focusItem;
        var answer = function (val) {
            unblock();
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            confirmBox.removeEventListener("click", clickHandler);
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            document.removeEventListener("keydown", closeConfirm);
            document.body.removeChild(confirmBox);
            res(val);
        };
        var clickHandler = function (e) {
            if (e.target.tagName === "BUTTON") {
                answer(e.target.classList.contains("dhx_alert__confirm-aply"));
            }
        };
        var closeConfirm = function (e) {
            if (e.key === "Escape" || e.key === "Esc") {
                confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
                answer(e.target.classList.contains("dhx_alert__confirm-reject"));
            }
            else if (e.key === "Tab") {
                if (focusItem === "aply") {
                    focusItem = "reject";
                    confirmBox.querySelector(".dhx_alert__confirm-reject").focus();
                }
                else {
                    focusItem = "aply";
                    confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
                }
                e.preventDefault();
            }
        };
        confirmBox.className = "dhx_widget dhx_alert dhx_alert--confirm" + (props.css ? " " + props.css : "");
        confirmBox.innerHTML = "\n\t\t" + (props.header ? "<div class=\"dhx_alert__header\" id=" + headerId + "> " + props.header + " </div>" : "") + "\n\t\t" + (props.text ? "<div class=\"dhx_alert__content\" id=" + textId + ">" + props.text + "</div>" : "") + "\n\t\t\t<div class=\"dhx_alert__footer " + (props.buttonsAlignment ? "dhx_alert__footer--" + props.buttonsAlignment : "") + "\">\n\t\t\t\t<button type=\"button\" aria-label=\"reject\" class=\"dhx_alert__confirm-reject dhx_button dhx_button--view_link dhx_button--color_primary dhx_button--size_medium\">" + reject + "</button>\n\t\t\t\t<button type=\"button\"  aria-label=\"aply\"class=\"dhx_alert__confirm-aply dhx_button dhx_button--view_flat dhx_button--color_primary dhx_button--size_medium\">" + apply + "</button>\n\t\t\t</div>";
        document.body.appendChild(confirmBox);
        focusItem = "aply";
        confirmBox.querySelector(".dhx_alert__confirm-aply").focus();
        confirmBox.addEventListener("click", clickHandler);
        document.addEventListener("keydown", closeConfirm);
    });
}
exports.confirm = confirm;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_colorpicker_1 = __webpack_require__(90);
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var html_1 = __webpack_require__(2);
var view_1 = __webpack_require__(7);
var ts_data_1 = __webpack_require__(8);
var ts_grid_1 = __webpack_require__(24);
var ts_layout_1 = __webpack_require__(21);
var ts_toolbar_1 = __webpack_require__(44);
var ts_menu_1 = __webpack_require__(149);
var ActionsManager_1 = __webpack_require__(32);
var context_1 = __webpack_require__(169);
var menu_1 = __webpack_require__(170);
var toolbar_1 = __webpack_require__(171);
var EditLine_1 = __webpack_require__(172);
var actions_1 = __webpack_require__(174);
var buffer_1 = __webpack_require__(175);
var CustomCsvDriver_1 = __webpack_require__(176);
var format_1 = __webpack_require__(13);
var main_1 = __webpack_require__(3);
var selection_1 = __webpack_require__(72);
var toolbar_2 = __webpack_require__(33);
var newKeyManager_1 = __webpack_require__(177);
var en_1 = __webpack_require__(14);
var Selection_1 = __webpack_require__(178);
var DateEditor_1 = __webpack_require__(180);
var types_1 = __webpack_require__(6);
var ts_popup_1 = __webpack_require__(18);
var ts_navbar_1 = __webpack_require__(22);
var core_1 = __webpack_require__(1);
var Exporter_1 = __webpack_require__(181);
var XlsxDriver_1 = __webpack_require__(182);
var XlsxProxy_1 = __webpack_require__(183);
var math_1 = __webpack_require__(184);
var muon_1 = __webpack_require__(26);
var types_2 = __webpack_require__(45);
var ts_window_1 = __webpack_require__(185);
var hotkeys_1 = __webpack_require__(189);
var FocusManager_1 = __webpack_require__(10);
var date_1 = __webpack_require__(27);
var date_2 = __webpack_require__(12);
var Spreadsheet = /** @class */ (function (_super) {
    __extends(Spreadsheet, _super);
    function Spreadsheet(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this.container = container === null ? container : html_1.toNode(container);
        _this._sizes = {
            rowsCount: 1000,
            colsCount: 200,
        };
        _this._editors = {};
        _this.config = main_1.extendConfig({
            rowsCount: { validate: function (val) { return val >= 0; }, default: 1000 },
            colsCount: { validate: function (val) { return val >= 0; }, default: 25 },
            menu: { validate: function (val) { return typeof val === "boolean"; }, default: false },
            editLine: {
                validate: function (val) { return typeof val === "boolean"; },
                default: true,
            },
            readonly: {
                validate: function (val) { return typeof val === "boolean"; },
                default: false,
            },
            autoFormat: {
                validate: function (val) { return typeof val === "boolean"; },
                default: true,
            },
            importModulePath: {
                validate: function (val) { return typeof val === "string"; },
                default: "https://cdn.dhtmlx.com/libs/excel2json/1.1/worker.js",
            },
            exportModulePath: {
                validate: function (val) { return typeof val === "string"; },
                default: "https://cdn.dhtmlx.com/libs/json2excel/1.0/worker.js",
            },
            multiSheets: { validate: function (val) { return typeof val === "boolean"; }, default: true },
            dateFormat: { validate: function (val) { return typeof val === "string"; }, default: "%d/%m/%Y" },
            formats: { validate: function (val) { return val instanceof Array; }, default: [] },
        }, _this.config);
        _this._range = { cell: "", mode: 0, cursor: 0, editor: null, inline: 0 };
        _this.events = new events_1.EventSystem();
        format_1.initFormat(_this, _this.config.dateFormat);
        _this._initLayout();
        _this._colorpicker = new ts_colorpicker_1.Colorpicker(null);
        _this._colorpickerPopup = new ts_popup_1.Popup();
        _this._colorpickerPopup.attach(_this._colorpicker);
        _this._setEventsHandlers();
        _this._actionsManager = new ActionsManager_1.ActionsManager({
            spreadsheet: _this,
            editLine: _this._editLine,
            grid: _this._grid,
            dataStore: _this._dataStore,
        });
        _this._buffer = new buffer_1.BufferManager(_this, _this._grid, 
        // eslint-disable-next-line @typescript-eslint/unbound-method
        _this._callAction, _this._activePage, _this._dataStore);
        _this.selection = new Selection_1.Selection(_this, _this._grid, _this._buffer, _this._activePage);
        var gridRoot = _this._grid.getRootView();
        gridRoot.hooks = gridRoot.hooks || {};
        gridRoot.hooks.didMount = function (vm) {
            _this._updateGridSizes();
            var cell = _this.selection.getFocusedCell();
            var val = _this.getValue(cell);
            _this._editLine.setValue(val);
            if (!_this.config.readonly) {
                vm.node.el.addEventListener("contextmenu", function (e) {
                    _this.contextMenu.data.update("lock", {
                        value: _this.isLocked(_this.selection.getSelectedCell())
                            ? en_1.default.unlockCell
                            : en_1.default.lockCell,
                    });
                    _this.contextMenu.showAt(e);
                    e.preventDefault();
                });
            }
            // [todo] move to layout didMount event
            _this.container = _this._layout.getRootView().node.el;
            gridRoot.hooks.didRedraw = function (view) {
                _this._updateGridSizes();
                _this.events.fire(types_1.SpreadsheetEvents.gridRedraw, [view]);
            };
        };
        _this._initHotkeys();
        var tabbarRoot = _this._tabbar.getRootView();
        tabbarRoot.hooks = tabbarRoot.hooks || {};
        var addContextListener = function (vm) {
            vm.node.el.addEventListener("contextmenu", function (e) {
                _this.endEdit();
                var id = html_1.locate(e);
                if (id && id !== "add-sheet" && !_this.config.readonly) {
                    var sheetsLength = _this._sheets.getLength();
                    var contextData = _this.sheetContextMenu.data;
                    if (_this.config.multiSheets && sheetsLength === 2) {
                        contextData.update("delete", { disabled: true });
                    }
                    else if (_this.config.multiSheets &&
                        sheetsLength > 2 &&
                        contextData.getItem("delete").disabled) {
                        contextData.update("delete", { disabled: false });
                    }
                    _this.sheetContextMenu.showAt(e.target, "right");
                    _this._focusedSheet = id;
                    e.preventDefault();
                }
            });
        };
        tabbarRoot.hooks.didMount = function (vm) {
            vm.node &&
                vm.node.el &&
                vm.node.el.addEventListener("dblclick", function (e) {
                    var id = html_1.locate(e);
                    if (id && id !== "add-sheet" && !_this.config.readonly) {
                        e.preventDefault();
                        _this._focusedSheet = id;
                        _this.sheetContextMenu.events.fire(ts_navbar_1.NavigationBarEvents.click, ["rename", e]);
                        dom_1.awaitRedraw().then(function () {
                            FocusManager_1.focusManager.setFocusId(null);
                        });
                    }
                });
            addContextListener(vm);
        };
        tabbarRoot.hooks.didRedraw = function (vm) { return addContextListener(vm); };
        _this._generateGridStruct();
        _this.export = new Exporter_1.Exporter(_this, _this._grid);
        var view = dom_1.create({ render: function () { return _this._render(); } });
        _this.mount(container, view);
        FocusManager_1.focusManager.setFocusId(_this._uid);
        return _this;
    }
    Spreadsheet.prototype.destructor = function () {
        this.unmount();
        this._layout.unmount();
        this.contextMenu.destructor();
        this.menu.destructor();
        this.toolbar.destructor();
        this._editLine.destructor();
        this._tabbar.destructor();
    };
    Spreadsheet.prototype.paint = function () {
        if (this.config.rowsCount !== this._sizes.rowsCount ||
            this.config.colsCount !== this._sizes.colsCount) {
            this._generateGridStruct();
        }
        this._layout.paint();
        this._grid.paint();
    };
    Spreadsheet.prototype.load = function (url, type) {
        var _this = this;
        if (type === "xlsx") {
            if (!main_1.isWasmSupported()) {
                throw new Error("WebAssembly is not supported by your browser");
            }
            this._xlsxProxy = this._xlsxProxy || new XlsxProxy_1.XlsxProxy(this);
            return this._xlsxProxy.load(url).then(function (data) {
                _this.parse(data, type);
            });
        }
        var proxy = ts_data_1.toProxy(url);
        return proxy.load().then(function (data) {
            _this.parse(data, type);
        });
    };
    Spreadsheet.prototype.parse = function (data, type) {
        var _this = this;
        if (type === "csv") {
            type = new CustomCsvDriver_1.CustomCsvDriver();
        }
        if (type === "xlsx") {
            type = new XlsxDriver_1.XlsxDriver();
        }
        this._sheets.forEach(function (sheet) {
            if (sheet.id !== "add-sheet") {
                _this._dataStore.removePage(sheet.value);
                _this._sheets.remove(sheet.id);
            }
        });
        var driver = ts_data_1.toDataDriver(type || "json");
        data = driver.toJsonArray(data);
        this._grid.config.columns.map(function (col) {
            col.$cellCss = {};
        });
        var preparedData = {
            sheets: [],
        };
        if ("sheets" in data) {
            for (var i = 0; i < (this.config.multiSheets ? data.sheets.length : 1); i++) {
                var sheet = data.sheets[i];
                sheet.name = sheet.name || this._generateNewSheetName();
                preparedData.sheets.push(sheet);
            }
        }
        else {
            if ("data" in data) {
                preparedData.sheets.push({
                    data: data.data,
                    name: this._activeSheetName.name,
                });
            }
        }
        if ("styles" in data) {
            var styles = data.styles;
            for (var key in styles) {
                var css = styles[key];
                dhx.css.add(css, key);
            }
            dhx.css.update();
        }
        if (Array.isArray(data)) {
            preparedData.sheets.push({ data: data, name: this._generateNewSheetName() });
        }
        for (var _i = 0, _a = preparedData.sheets; _i < _a.length; _i++) {
            var sheet = _a[_i];
            this._dataStore.addPage(sheet.name);
            this._sheets.add({ value: sheet.name, id: sheet.id });
        }
        for (var _b = 0, _d = preparedData.sheets; _b < _d.length; _b++) {
            var sheet = _d[_b];
            var page = this._dataStore.getPage(sheet.name);
            page.setMeta({
                cols: sheet.cols ||
                    this._grid.config.columns.slice(1).map(function (col) {
                        return { width: col.width };
                    }),
                rows: sheet.rows || this._grid.data.map(function () {
                    return { height: _this._grid.config.rowHeight };
                })
            });
            var _loop_1 = function (item) {
                var _a = main_1.getCellIds(item.cell.toUpperCase()), row = _a.row, col = _a.col;
                var clean = format_1.getCleanValue(item.value);
                var isNumber = format_1.isNumeric(clean);
                var value = void 0;
                var format = void 0;
                var isCorrectFormat = item.format === "General"
                    ? this_1.config.formats.find(function (i) { return i.id === "common"; })
                    : this_1.config.formats.find(function (i) { return i.id === item.format; });
                format =
                    isCorrectFormat || this_1.config.formats.find(function (i) { return i.mask === format_1.detectCellFormat(item.value); });
                item.format = format.mask;
                if (isNumber && (format === null || format === void 0 ? void 0 : format.mask) !== "@") {
                    if (this_1.config.autoFormat && format.mask.includes("%")) {
                        value =
                            item.value == clean
                                ? parseFloat(clean).toFixed(4)
                                : +(parseFloat(clean) / 100).toFixed(4);
                    }
                    else {
                        value = +clean;
                    }
                }
                else {
                    value = item.value;
                }
                if (format.id === "date" && value) {
                    if (format_1.isNumeric(value)) {
                        value = +value;
                    }
                    else {
                        var date = date_2.stringToDate(value, format.dateFormat, true);
                        value = date ? date_1.getExcelDateFromJs(date_2.stringToDate(value, format.dateFormat)) : value;
                    }
                }
                // [FIXME] can be optimized (later)
                // instead of checking triggers for each cell
                // we can force recalck of all formulas after full data loading
                // so things like SUM(A1:A100) will be calculated once, not 100 times
                page.setValue(row, col, value, format.mask === "@" ? 1 : 0);
                page.setCell(row, col, { format: format, css: item.css });
            };
            var this_1 = this;
            for (var _e = 0, _f = sheet.data; _e < _f.length; _e++) {
                var item = _f[_e];
                _loop_1(item);
            }
        }
        this._grid.data.events.fire(ts_data_1.DataEvents.change);
        this._changeSheet(this._sheets.getId(this.config.multiSheets && !this.config.readonly ? 1 : 0));
        this._grid.paint();
        if (this.config && !this.config.readonly) {
            this.selection.setSelectedCell("A1");
        }
    };
    Spreadsheet.prototype.serialize = function () {
        var _this = this;
        var styles = {};
        var sheets = [];
        this._sheets.forEach(function (item) {
            if (item.id === "add-sheet") {
                return;
            }
            var sheet = item.value;
            var page = _this._dataStore.getPage(sheet);
            var _a = page.getMeta(), cols = _a.cols, rows = _a.rows;
            var serializedData = page.serialize(true);
            var preparedItem = {
                name: sheet,
                data: [],
                cols: cols,
                rows: rows
            };
            for (var _i = 0, serializedData_1 = serializedData; _i < serializedData_1.length; _i++) {
                var item_1 = serializedData_1[_i];
                var cell = main_1.getCellNameById(_this._grid, (item_1[0] + 1).toString(), (item_1[1] + 1).toString());
                var cellMeta = item_1[2];
                if (cellMeta) {
                    var value = cellMeta.value;
                    var cellObj = { cell: cell };
                    if (cellMeta.css) {
                        cellObj.css = cellMeta.css;
                        styles[cellObj.css] = dhx.css.get(cellObj.css);
                    }
                    if (cellMeta.format !== undefined) {
                        var formatObj = format_1.getFormat(format_1.getDefaultFormatsMap()[cellMeta.format.mask]);
                        cellObj.format = (formatObj === null || formatObj === void 0 ? void 0 : formatObj.id) || cellMeta.format.id;
                    }
                    if (value || typeof value === "number") {
                        cellObj.value = value;
                    }
                    if (cell && (cellObj.value || typeof cellObj.value === "number" || cellObj.css)) {
                        preparedItem.data.push(cellObj);
                    }
                }
            }
            sheets.push(preparedItem);
        });
        return {
            sheets: sheets,
            styles: styles,
            formats: this.config.formats,
        };
    };
    Spreadsheet.prototype.setValue = function (cell, value) {
        if (!cell) {
            return;
        }
        this._checkForMissedCells(cell);
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeValueChange, [cell, value])) {
            return;
        }
        if (!cell) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        var id = main_1.getCellIds(cell);
        this._callAction({
            row: id.row,
            col: id.col,
            cell: cell,
            val: value,
            action: types_1.Actions.setCellValue,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
        this._grid.paint();
    };
    Spreadsheet.prototype.getValue = function (cell) {
        if (!cell) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        cell = cell.toUpperCase();
        if (main_1.isRangeId(cell)) {
            var values_1 = [];
            this.eachCell(function (_c, v) {
                var id = main_1.getCellIds(_c);
                values_1.push(page.getValue(id.row, id.col));
            }, cell);
            return values_1;
        }
        var id = main_1.getCellIds(cell);
        var val = page.getValue(id.row, id.col);
        return val;
    };
    Spreadsheet.prototype.getCellIndex = function (cell) {
        return main_1.getCellIds(cell);
    };
    Spreadsheet.prototype.getFormula = function (cell) {
        var _this = this;
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        cell = cell.toUpperCase();
        if (main_1.isRangeId(cell)) {
            var formulas_1 = [];
            this.eachCell(function (_c) {
                formulas_1.push(_this._getMath(_c, page) || "");
            }, cell);
            return formulas_1;
        }
        var formula = this._getMath(cell, page);
        return formula ? formula.source : "";
    };
    Spreadsheet.prototype.getSheets = function () {
        var sheets = [];
        this._sheets.forEach(function (item) {
            if (item.id !== "add-sheet") {
                sheets.push({ name: item.value, id: item.id });
            }
        });
        return sheets;
    };
    Spreadsheet.prototype._getMath = function (cell, page) {
        if (page === void 0) { page = this._activePage; }
        if (!cell) {
            return;
        }
        var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
        var cellId = muon_1.toId(row, col, page.getID());
        return this._math.getMath(cellId) || null;
    };
    Spreadsheet.prototype.eachCell = function (cb, range) {
        range = range || this.selection.getSelectedCell();
        var cells = main_1.getCellsArray(range);
        for (var _i = 0, cells_1 = cells; _i < cells_1.length; _i++) {
            var cell = cells_1[_i];
            var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
            var val = this._activePage.getValue(row, col);
            cb(cell, val);
        }
    };
    Spreadsheet.prototype.getStyle = function (cell) {
        if (!cell) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        if (main_1.isRangeId(cell)) {
            var styles_1 = [];
            this.eachCell(function (c) {
                var info = main_1.getCellInfo(c, page);
                var css = [];
                if (info.css) {
                    css = typeof info.css === "string" ? info.css.split(" ") : [info.css];
                }
                var customCssStyles = {};
                for (var _i = 0, css_2 = css; _i < css_2.length; _i++) {
                    var classnName = css_2[_i];
                    customCssStyles = __assign(__assign({}, customCssStyles), dhx.css.get(classnName));
                }
                styles_1.push(customCssStyles);
            }, cell);
            return styles_1;
        }
        var info = main_1.getCellInfo(cell, this._activePage);
        var css = [];
        if (info.css) {
            css = typeof info.css === "string" ? info.css.split(" ") : [info.css];
        }
        var customCssStyles = {};
        for (var _i = 0, css_1 = css; _i < css_1.length; _i++) {
            var styles = css_1[_i];
            customCssStyles = __assign(__assign({}, customCssStyles), dhx.css.get(styles));
        }
        return customCssStyles;
    };
    Spreadsheet.prototype.setStyle = function (cell, style) {
        if (!cell || !style) {
            return;
        }
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeStyleChange, [cell, style])) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
        if (!Object.keys(style).length) {
            this._callAction({
                row: row,
                col: col,
                cell: cell,
                action: types_1.Actions.removeCellStyles,
                groupAction: types_1.Actions.groupAction,
                dataStore: this._dataStore,
                page: page,
            });
            return;
        }
        this._callAction({
            val: style,
            row: row,
            col: col,
            cell: cell,
            action: types_1.Actions.setCellStyle,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
    };
    Spreadsheet.prototype.getFormat = function (cell) {
        var _a;
        if (!cell) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        if (main_1.isRangeId(cell)) {
            var formats_1 = [];
            this.eachCell(function (c) {
                var _a;
                formats_1.push(((_a = main_1.getCellInfo(c, page).format) === null || _a === void 0 ? void 0 : _a.id) || "common");
            }, cell);
            return formats_1;
        }
        var formatMask = (_a = main_1.getCellInfo(cell, page).format) === null || _a === void 0 ? void 0 : _a.mask;
        var formatAlias = format_1.getDefaultFormatsMap()[formatMask];
        return formatAlias || formatMask;
    };
    Spreadsheet.prototype.setFormat = function (cell, format) {
        if (!cell) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        this._callAction({
            val: format,
            cell: cell,
            action: types_1.Actions.setCellFormat,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
    };
    Spreadsheet.prototype.clearSheet = function (id) {
        var sheet = this._getSheet(id) || this.getActiveSheet();
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetClear, [sheet])) {
            return;
        }
        this._callAction({
            val: sheet.name,
            action: types_1.Actions.clearSheet,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterSheetClear, [sheet]);
    };
    Spreadsheet.prototype.clear = function () {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeClear, [])) {
            return;
        }
        this._callAction({
            action: types_1.Actions.clear,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterClear, []);
    };
    Spreadsheet.prototype.isLocked = function (cell) {
        if (!cell) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        var id = main_1.getCellIds(cell);
        if ("start" in id) {
            var locked_1 = false;
            this.eachCell(function (cellId) {
                if (!locked_1) {
                    var info = main_1.getCellInfo(cellId, page).locked;
                    locked_1 = info;
                }
            }, cell);
            return locked_1;
        }
        var isLocked = main_1.getCellInfo(cell, page).locked;
        return !!isLocked;
    };
    Spreadsheet.prototype.lock = function (cell) {
        if (!cell) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        var id = main_1.getCellIds(cell);
        this._callAction({
            row: id.row,
            col: id.col,
            val: true,
            cell: cell,
            action: types_1.Actions.lockCell,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
        this._grid.paint();
    };
    Spreadsheet.prototype.unlock = function (cell) {
        if (!cell) {
            return;
        }
        var page = this._activePage;
        if (cell.includes("!")) {
            var parse = cell.split("!");
            cell = parse[1];
            page = this._dataStore.getPage(parse[0]);
            if (!page)
                return;
        }
        var id = main_1.getCellIds(cell);
        this._callAction({
            row: id.row,
            col: id.col,
            val: false,
            cell: cell,
            action: types_1.Actions.lockCell,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            page: page,
        });
        this._grid.paint();
    };
    Spreadsheet.prototype.addRow = function (cell) {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeRowAdd, [cell])) {
            return;
        }
        if (main_1.isRangeId(cell)) {
            cell = cell.split(":")[0];
        }
        this._callAction({
            cell: cell,
            action: types_1.Actions.addRow,
            groupAction: types_1.Actions.groupRowAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterRowAdd, [cell]);
    };
    Spreadsheet.prototype.deleteRow = function (cell) {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeRowDelete, [cell])) {
            return;
        }
        var id = main_1.getCellIds(cell);
        this._callAction({
            row: id.row,
            col: id.col,
            cell: cell,
            action: types_1.Actions.deleteRow,
            groupAction: types_1.Actions.groupRowAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterRowDelete, [cell]);
    };
    Spreadsheet.prototype.addColumn = function (cell) {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeColumnAdd, [cell])) {
            return;
        }
        if (main_1.isRangeId(cell)) {
            cell = cell.split(":")[0];
        }
        this._callAction({
            cell: cell,
            action: types_1.Actions.addColumn,
            groupAction: types_1.Actions.groupColAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterColumnAdd, [cell]);
    };
    Spreadsheet.prototype.deleteColumn = function (cell) {
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeColumnDelete, [cell])) {
            return;
        }
        this._callAction({
            cell: cell,
            action: types_1.Actions.deleteColumn,
            groupAction: types_1.Actions.groupColAction,
            dataStore: this._dataStore,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterColumnDelete, [cell]);
    };
    Spreadsheet.prototype.undo = function () {
        this._actionsManager.undo();
    };
    Spreadsheet.prototype.redo = function () {
        this._actionsManager.redo();
    };
    Spreadsheet.prototype.startEdit = function (cell, initialValue) {
        var _a;
        if (this.config.readonly || this._range.mode) {
            return;
        }
        if (this._editMode) {
            return this._editLine.setValueAtRedactor(initialValue);
        }
        var focused = this.selection.getFocusedCell();
        if (!cell) {
            cell = focused;
        }
        cell = cell.toUpperCase();
        this._checkForMissedCells(cell);
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeEditStart, [cell, initialValue])) {
            return;
        }
        if (this.isLocked(cell)) {
            return;
        }
        if (focused !== cell) {
            this.endEdit(true);
            this.selection.setSelectedCell(cell);
        }
        var cellInfo = main_1.getCellInfo(cell, this._activePage);
        if (!this.selection.getSelectedCell())
            this.selection.setSelectedCell(cell);
        if (((_a = cellInfo.format) === null || _a === void 0 ? void 0 : _a.id) === "date" && !this._editors.date) {
            this._editors.date = new DateEditor_1.DateEditor(this.endEdit.bind(this), this.config.dateFormat, this.events);
        }
        if (!cellInfo.edited) {
            var _b = main_1.getCellIds(cell), row = _b.row, col = _b.col;
            var cellId = muon_1.toId(row, col, this._activePage.getID());
            var math = this._math.getMath(cellId);
            if (math)
                initialValue = "=" + math.source;
            this._activePage.setCell(row, col, {
                edited: true,
                nextValue: initialValue,
                editorValue: initialValue,
            });
            if (initialValue)
                this._editLine.setValue(initialValue);
            this.events.fire(types_1.SpreadsheetEvents.afterEditStart, [cell, initialValue]);
        }
    };
    Spreadsheet.prototype.endEdit = function (withoutSave) {
        var focused = this.selection.getFocusedCell();
        var cellInfo = main_1.getCellInfo(focused, this._activePage);
        if (cellInfo.edited) {
            if (!this.events.fire(types_1.SpreadsheetEvents.beforeEditEnd, [focused, cellInfo.nextValue])) {
                return;
            }
            if (cellInfo.nextValue) {
                this._activePage.setMeta({ inserted: true });
            }
            if (!withoutSave && cellInfo.nextValue !== undefined) {
                this.setValue(focused, cellInfo.nextValue);
            }
            var _a = main_1.getCellIds(focused), row = _a.row, col = _a.col;
            this._activePage.setCell(row, col, {
                nextValue: undefined,
                edited: false,
            });
            this._editLine.blur();
            this.events.fire(types_1.SpreadsheetEvents.afterEditEnd, [focused, cellInfo.nextValue]);
        }
    };
    Spreadsheet.prototype.addSheet = function (name) {
        if (!this.config.multiSheets)
            return;
        var newSheet = name;
        if (!newSheet) {
            newSheet = this._generateNewSheetName();
        }
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetAdd, [newSheet])) {
            return;
        }
        this._callAction({
            val: newSheet,
            action: types_1.Actions.addSheet,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            sheets: this._sheets,
            prev: this._tabbar.getSelected()[0],
        });
        return this._sheets.find(function (item) { return item.value === newSheet; }).id;
    };
    Spreadsheet.prototype.removeSheet = function (id) {
        var item = this._getSheet(id);
        if (!item || !this.config.multiSheets || (this.config.multiSheets && this._sheets.getLength() === 2))
            return;
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetRemove, [item])) {
            return;
        }
        this._callAction({
            action: types_1.Actions.deleteSheet,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            sheets: this._sheets,
            prev: item.id,
            val: item.name,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterSheetRemove, [item]);
    };
    Spreadsheet.prototype.getActiveSheet = function () {
        return this._activeSheetName;
    };
    Spreadsheet.prototype.setActiveSheet = function (id) {
        this.endEdit();
        this._changeSheet(id);
    };
    Spreadsheet.prototype._renameSheet = function (id, newName) {
        var item = this._sheets.getItem(id);
        if (!item || !newName || item.prevValue === newName)
            return;
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetRename, [
            { name: item.value, id: item.id },
            newName,
        ])) {
            return;
        }
        this._callAction({
            val: newName,
            action: types_1.Actions.renameSheet,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
            sheets: this._sheets,
            prev: id,
        });
        this.events.fire(types_1.SpreadsheetEvents.afterSheetRename, [{ name: item.value, id: item.id }]);
    };
    Spreadsheet.prototype._getSheet = function (id) {
        var sheets = this.getSheets();
        return sheets.find(function (i) { return i.id === id; });
    };
    Spreadsheet.prototype._changeSheet = function (id) {
        var _this = this;
        var item = this._sheets.getItem(id);
        if (!item)
            return;
        if (!this.events.fire(types_1.SpreadsheetEvents.beforeSheetChange, [this._activeSheetName])) {
            return;
        }
        var prevPage = this._activePage;
        var scroll = this._grid.getScrollState();
        prevPage && prevPage.setMeta({ scroll: scroll });
        var prevSheet = this._activeSheetName ? this._activeSheetName.name : null;
        var pos = this._editLine.isCellExpected("A1", false, this._range.inline ? this._range.editor || null : null);
        var focusedCell = this.selection && this.selection.getFocusedCell();
        var info = main_1.getCellInfo(focusedCell, this._activePage);
        if (info && info.edited && !pos) {
            this.endEdit();
        }
        this._activePage = this._dataStore.getPage(item.value);
        this._activeSheetName = { name: item.value, id: id };
        this._tabbar.select(id);
        var pageMeta = this._activePage && this._activePage.getMeta();
        if (this._activePage && !pageMeta.toolbarId) {
            this._activePage.setMeta({ toolbarId: id });
        }
        if ((pos && !this._editMode) || (pos && this._editMode.page !== this._activePage)) {
            this._activePage.setMeta({
                selectedCells: null,
                focusedCell: null,
            });
            this._editMode = this._editMode || {
                page: prevPage,
                cell: focusedCell,
                pageName: prevSheet,
            };
        }
        else if (pos && this._editMode && this._editMode.page === this._activePage) {
            var val_1 = this._editLine.getValue();
            this._editMode = null;
            this._editLine.setValue(val_1);
            dom_1.awaitRedraw().then(function () {
                _this._editLine.focus();
                _this.events.fire(types_1.SpreadsheetEvents.editLineInput, [val_1]);
                _this._editLine.setCursor(pos);
            });
        }
        else {
            this._editLine.setCellMath();
            this._editMode = null;
        }
        this.events.fire(types_1.SpreadsheetEvents.afterSheetChange, [this._activeSheetName]);
        this._grid.paint();
        dom_1.awaitRedraw().then(function () {
            FocusManager_1.focusManager.setFocusId(_this._uid);
            var _a = _this._activePage.getMeta(), scroll = _a.scroll, cols = _a.cols, rows = _a.rows;
            var gridColumns = _this._grid.config.columns;
            var firstCol = gridColumns[0], dataCols = gridColumns.slice(1);
            dataCols.forEach(function (col, i) {
                col.width = cols[i] ? cols[i].width : col.width;
            });
            _this._grid.setColumns(__spreadArrays([firstCol], dataCols));
            _this._grid.data.forEach(function (row, index) {
                var height = rows[index].height;
                if (row.height !== height) {
                    _this._grid.data.update(row.id, { height: height });
                }
            });
            var x = scroll.x, y = scroll.y;
            scroll && _this._grid.scroll(x, y);
        });
    };
    Spreadsheet.prototype._callAction = function (config) {
        if (!config || this.config.readonly) {
            return;
        }
        if (Array.isArray(config)) {
            this._actionsManager.execute(config);
            return;
        }
        if (main_1.isRangeId(config.cell)) {
            this._actionsManager.execute(config.groupAction, config);
            return;
        }
        this._actionsManager.execute(config.action, config);
    };
    Spreadsheet.prototype._initLayout = function () {
        this._grid = new ts_grid_1.Grid(null, {
            rowHeight: 32,
            headerRowHeight: 32,
            headerSort: false,
            leftSplit: 1 + (this.config.leftSplit || 0),
        });
        this.menu = new ts_menu_1.Menu(null, { navigationType: "click" });
        this.menu.data.parse(menu_1.getMenuStruct(this.config));
        this.toolbar = new ts_toolbar_1.Toolbar();
        var toolbarStruct = toolbar_1.getToolbarStruct(this.config.toolbarBlocks, this.config);
        this.toolbar.data.parse(toolbarStruct);
        this.contextMenu = new ts_menu_1.ContextMenu();
        this.contextMenu.data.parse(context_1.getContextMenuStruct());
        this.sheetContextMenu = new ts_menu_1.ContextMenu();
        this.sheetContextMenu.data.parse(context_1.getSheetsContextMenuStruct(this.config.multiSheets));
        this._tabbar = new ts_toolbar_1.Toolbar(null, {
            css: "dhx-sheets-toolbar",
        });
        this._sheets = this._tabbar.data;
        this._sheets.parse([{ value: "sheet1" }]);
        this._dataStore = math_1.initMathStore(this._sheets);
        this._math = this._dataStore.getStore();
        this._editLine = new EditLine_1.EditLine(null, {
            events: this.events,
            grid: this._grid,
            store: this._activePage,
            spreadsheet: this,
            math: this._math,
        });
        this.config.multiSheets &&
            !this.config.readonly &&
            this._sheets.add({ icon: "dxi dxi-plus", id: "add-sheet" }, 0);
        var layout = (this._layout = new ts_layout_1.Layout(null, {
            height: "100%",
            rows: [
                { id: "menu", css: "menu_wrapper", height: "content" },
                { id: "toolbar", css: "toolbar_wrapper", height: "content" },
                { id: "editLine", css: "editLine_wrapper", height: "content" },
                { id: "grid", css: "dhx-spreadsheet-grid dhx_layout-cell--gravity" },
                { id: "tabbar", css: "sheetbar_wrapper", height: "content" },
            ],
        }));
        layout.getCell("menu").attach(this.menu, this);
        layout.getCell("toolbar").attach(this.toolbar, this);
        layout.getCell("grid").attach(this._grid, this);
        layout.getCell("editLine").attach(this._editLine, this);
        layout.getCell("tabbar").attach(this._tabbar, this);
        var initialSheetId = this.config.multiSheets && !this.config.readonly ? 1 : 0;
        var page = this._dataStore.getPage(this._sheets.getItem(this._sheets.getId(initialSheetId)).value);
        page.setMeta({ leftSplit: this.config.leftSplit });
        this._changeSheet(this._sheets.getId(initialSheetId));
        if (!this.config.editLine || this.config.readonly) {
            layout.getCell("editLine").hide();
        }
        if (!this.config.menu || this.config.readonly) {
            layout.getCell("menu").hide();
        }
        if (this.config.readonly || !toolbarStruct || !toolbarStruct.length) {
            layout.getCell("toolbar").hide();
        }
        if (!this.config.multiSheets) {
            layout.getCell("tabbar").hide();
        }
    };
    Spreadsheet.prototype._generateGridStruct = function () {
        var _this = this;
        var values = this.serialize();
        var _a = this.config, rowsCount = _a.rowsCount, colsCount = _a.colsCount;
        var rows = [];
        for (var i = 1; i <= rowsCount; i++) {
            var row = { id: "" + i, $index: i };
            for (var k = 1; k <= colsCount; k++) {
                row[k] = "";
            }
            rows.push(row);
        }
        var cols = [
            {
                id: "$index",
                width: 40,
                header: [{ text: "" }],
                htmlEnable: true,
                editable: false,
                align: "right",
                template: function (_val, row, col) { return actions_1.getIndexRowCell(_this._grid.data.getIndex(row.id) + 1); },
            },
        ];
        var inputVisible = false;
        var blurHandler = function (e) {
            requestAnimationFrame(function () {
                if (!inputVisible) {
                    return;
                }
                _this._restoreFocus(e);
            });
        };
        var inserted = function (node) {
            var input = node.el;
            _this._range.editor = input;
            _this._range.inline = 1;
            input.focus();
            input.setSelectionRange(input.value.length, input.value.length);
            _this._range.cursor = input.value.length;
            input.addEventListener("blur", function (e) {
                _this._range.cursor = input.selectionStart;
                blurHandler(e);
            });
            input.addEventListener("focus", function () {
                _this._range.inline = 1;
            });
            inputVisible = true;
        };
        var removed = function () {
            _this._range.editor = null;
            inputVisible = false;
        };
        var onInput = function (cell, e) {
            if (inputVisible) {
                _this.events.fire(types_1.SpreadsheetEvents.cellInput, [cell, e.target.value]);
            }
        };
        var selected;
        this.events.on(types_1.SpreadsheetEvents.gridRedraw, function () {
            selected = null;
        });
        var template = function (v, row, col) {
            if (!selected) {
                selected = _this.selection.getFocusedCell();
            }
            var cell = col.$letter + row.$index;
            var cellId = main_1.getCellIds(cell);
            var meta = _this._activePage.getCell(cellId.row, cellId.col) || {};
            var isLocked = meta.locked;
            var isEdit = meta.edited;
            var nextValue = meta.nextValue;
            var css = meta.css;
            var styles = dhx.css.get(css);
            var format = meta.format;
            var val = _this._activePage.getValue(cellId.row, cellId.col, (format === null || format === void 0 ? void 0 : format.mask) === "@");
            var cellValue = nextValue === undefined || nextValue === null ? val : nextValue;
            if (selected && isEdit) {
                var conf = {
                    oninput: [onInput, cell],
                    _hooks: {
                        didInsert: inserted.bind(_this),
                        didRemove: removed.bind(_this),
                    },
                    class: css,
                    _key: "selection_input",
                    dhx_id: "cell_input",
                    value: nextValue === undefined || nextValue === null
                        ? format
                            ? format_1.getFormattedValue(cellValue, format)
                            : cellValue
                        : nextValue,
                };
                if ((format === null || format === void 0 ? void 0 : format.id) === "date") {
                    return _this._editors.date.toHTML(conf);
                }
                return dom_1.el("input.dhx_cell_input", conf);
            }
            var typedCellValue = format ? format_1.getFormattedValue(cellValue, format) : cellValue;
            var justify = null;
            var align = "flex-center";
            if (styles && styles["text-align"]) {
                switch (styles["text-align"]) {
                    case "left":
                        justify = "flex-start";
                        break;
                    case "center":
                        justify = "center";
                        break;
                    case "right":
                        justify = "flex-end";
                        break;
                }
            }
            if (styles && styles["vertical-align"]) {
                switch (styles["vertical-align"]) {
                    case "top":
                        align = "flex-start";
                        break;
                    case "center":
                        align = "center";
                        break;
                    case "bottom":
                        align = "flex-end";
                        break;
                }
            }
            return dom_1.el(".dhx_spreadsheet_cell", {
                style: {
                    "justify-content": justify,
                    "align-items": align
                },
                class: css,
            }, [isLocked && dom_1.el(".dhx_lock_icon.dxi.dxi-key"), typedCellValue]);
        };
        for (var i = 1; i <= colsCount; i++) {
            var letter = main_1.getLetterFromNumber(i);
            cols.push({
                id: "" + i,
                width: 120,
                $letter: letter,
                type: "string",
                header: [
                    {
                        text: actions_1.getHeaderCell(letter, i),
                        align: "center",
                    },
                ],
                htmlEnable: true,
                template: template,
            });
        }
        this._grid.setColumns(cols);
        this._grid.data.parse(rows);
        this.parse(values);
        this._sizes.rowsCount = this.config.rowsCount;
        this._sizes.colsCount = this.config.colsCount;
    };
    Spreadsheet.prototype._checkForMissedCells = function (cell) {
        if (cell.includes("!")) {
            cell = cell.split("!")[1];
        }
        var index = main_1.isRangeId(cell) ? main_1.getRangeIndexes(cell).end : main_1.getCellIndex(cell);
        if (index.row > this.config.rowsCount || index.col > this.config.colsCount) {
            this.config.rowsCount = Math.max(this.config.rowsCount, index.row + 1);
            this.config.colsCount = Math.max(this.config.colsCount, index.col);
            this._generateGridStruct();
        }
    };
    Spreadsheet.prototype._generateNewSheetName = function () {
        var sheetsArr = this._sheets.findAll(function (i) { return i.value && i.value.startsWith("sheet"); });
        if (!sheetsArr.length) {
            return "sheet1";
        }
        sheetsArr = sheetsArr.map(function (i) { return +i.value.split("sheet")[1]; }).filter(function (i) { return !!i; });
        return "sheet" + (Math.max.apply(Math, sheetsArr) + 1);
    };
    Spreadsheet.prototype._updateGridSizes = function () {
        var _a = this._activePage.getSize(), pageRows = _a[0], pageCols = _a[1];
        var isChanged = false;
        if (pageRows > this.config.rowsCount) {
            isChanged = true;
            var data = this._grid.data;
            var copy = __assign({}, data.getItem(data.getId(data.getLength() - 1)));
            for (var key in copy) {
                copy[key] = "";
            }
            for (var i = this.config.rowsCount + 1; i <= pageRows; i++) {
                data.add(__assign(__assign({}, copy), { id: "" + i }));
            }
            this.config.rowsCount = data.getLength();
            actions_1.updateRowsIndex(data);
        }
        if (pageCols > this.config.colsCount) {
            isChanged = true;
            var newCols = [];
            var columns = this._grid.config.columns;
            for (var i = this.config.colsCount + 1; i <= pageCols; i++) {
                var letter = main_1.getLetterFromNumber(i);
                newCols.push(__assign(__assign({}, columns[1]), { id: "" + i, $cellCss: {}, width: 120, $letter: letter }));
            }
            columns.push.apply(columns, newCols);
            this.config.colsCount = columns.length - 1;
            actions_1.updateColumns(this._grid.config);
        }
        if (isChanged) {
            this._grid.paint();
        }
    };
    Spreadsheet.prototype._updateToolbar = function (cell) {
        if (cell !== this.selection.getFocusedCell()) {
            return;
        }
        var info = main_1.getCellInfo(cell, this._activePage);
        toolbar_2.updateToolbar(this.toolbar, info);
    };
    Spreadsheet.prototype._setEventsHandlers = function () {
        var _this = this;
        this.events.on(types_1.SpreadsheetEvents.editLineInput, function (val) {
            FocusManager_1.focusManager.setFocusId(_this._uid);
            var cell = _this.selection.getFocusedCell();
            _this.events.fire(types_1.SpreadsheetEvents.cellInput, [cell, val]);
        });
        this.events.on(types_1.SpreadsheetEvents.editLineFocus, function () {
            var cell = _this.selection.getFocusedCell();
            _this.startEdit(cell);
            _this._range.inline = 0;
            requestAnimationFrame(function () {
                _this._editLine.focus();
            });
        });
        this.events.on(types_1.SpreadsheetEvents.cellInput, function (cell, val) {
            if (_this.isLocked(cell)) {
                return;
            }
            var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
            _this._activePage.setCell(row, col, {
                nextValue: val,
            });
            _this._grid.paint();
        });
        this._grid.events.on(ts_grid_1.GridEvents.cellMouseDown, function () {
            _this.contextMenu._close();
            _this.sheetContextMenu._close();
        });
        this._grid.events.on(ts_grid_1.GridEvents.afterResizeEnd, function () {
            var gridColumns = _this._grid.config.columns.slice(1).map(function (col) {
                return { width: col.width };
            });
            _this._activePage.setMeta({ cols: gridColumns });
        });
        this._grid.events.on(ts_grid_1.GridEvents.afterRowResize, function () {
            var gridRows = _this._grid.data.map(function (row) {
                return { height: row.$height || _this._grid.config.rowHeight };
            });
            _this._activePage.setMeta({ rows: gridRows });
        });
        this.events.on(types_1.SpreadsheetEvents.beforeSelectionSet, function (cell) {
            var r = _this._range;
            if (r.mode)
                return true;
            var pos = _this._editLine.isCellExpected(cell, false, r.inline ? r.editor || null : null);
            if (pos > 0) {
                r.cursor = pos;
                r.cell = _this.selection.getFocusedCell();
                r.mode = 1;
                return true;
            }
            if (_this.config.readonly) {
                return false;
            }
            !_this._editMode && _this.endEdit();
        });
        this.events.on(types_1.SpreadsheetEvents.afterSelectionSet, function (cell) {
            var r = _this._range;
            if (!r.mode && _this._editMode) {
                _this._editLine.setCellMath();
            }
            if (r.mode === 1) {
                r.mode = 2;
                !_this._editMode && _this.selection.setSelectedCell(r.cell);
                r.mode = 0;
                r.cell = "";
                r.cursor = _this._editLine.isCellExpected(cell, true, r.inline ? r.editor : null);
            }
            _this._grid.paint();
        });
        this.events.on(types_1.SpreadsheetEvents.afterFocusSet, function (cell) {
            if (_this._range.mode || _this._editMode)
                return;
            var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
            var val = _this._activePage.getValue(row, col, true);
            if (!format_1.isNumeric(val) && !val) {
                val = "";
            }
            var info = main_1.getCellInfo(cell, _this._activePage);
            toolbar_2.updateToolbar(_this.toolbar, info);
            _this._editLine.setValue(format_1.getFormattedValue(val, info.format));
            if (info && info.locked) {
                _this._editLine.lock();
            }
            _this._grid.paint();
        });
        this.events.on(types_1.SpreadsheetEvents.afterStyleChange, function (cell) {
            _this._updateToolbar(cell);
        });
        this.events.on(types_1.SpreadsheetEvents.afterFormatChange, function (cell, format) {
            _this._updateToolbar(cell);
        });
        this.events.on(types_1.SpreadsheetEvents.afterEditStart, function () {
            _this._grid.paint();
        });
        this.events.on(types_1.SpreadsheetEvents.afterEditEnd, function () {
            _this._grid.paint();
        });
        this._tabbar.events.on(ts_navbar_1.NavigationBarEvents.click, function (id) {
            if (id === "add-sheet") {
                _this.addSheet();
            }
            else {
                _this._changeSheet(id);
            }
        });
        this.sheetContextMenu.events.on(ts_navbar_1.NavigationBarEvents.click, function (id) {
            if (id === "delete") {
                _this.removeSheet(_this._focusedSheet);
            }
            else {
                var item_2 = _this._tabbar.data.getItem(_this._focusedSheet);
                _this._tabbar.data.update(item_2.id, { type: "input" });
                dom_1.awaitRedraw().then(function () {
                    var input = _this._tabbar.getRootNode().querySelector("input");
                    input.focus();
                    input.onkeyup = function (e) {
                        if (e.key === "Enter") {
                            input.blur();
                        }
                        if (e.key === "Escape") {
                            _this._sheets.update(item_2.id, { type: "navItem", value: item_2.prevValue });
                        }
                    };
                });
            }
        });
        this.sheetContextMenu.events.on(ts_navbar_1.NavigationBarEvents.afterHide, function () {
            _this._focusedSheet = null;
        });
        this._tabbar.events.on(ts_navbar_1.NavigationBarEvents.inputFocus, function (id) {
            var item = _this._sheets.getItem(id);
            _this._sheets.update(id, { prevValue: item.value });
        });
        this._tabbar.events.on(ts_navbar_1.NavigationBarEvents.inputBlur, function (id) {
            var item = _this._sheets.getItem(id);
            var newVal = item.value;
            var isExist = _this._sheets.find(function (i) { return i.value === newVal && i.id !== item.id; });
            if (isExist) {
                _this._getErrorWindow();
                _this._errorAlert.attachHTML("<p>A sheet with the name <b>" + newVal + "</b> already exists. Please enter another name. </p>");
                _this._errorAlert.show();
                _this._errorAlert.footer.events.on(ts_navbar_1.NavigationBarEvents.click, function () { return _this._errorAlert.hide(); });
                _this._errorAlert.events.on(types_2.WindowEvents.afterHide, function () {
                    _this._sheets.update(item.id, { value: item.prevValue });
                    var input = _this._tabbar.getRootNode().querySelector("input");
                    input.focus();
                });
                return false;
            }
            _this._sheets.update(id, { type: "navItem", value: item.prevValue });
            _this._renameSheet(id, newVal);
        });
        this.toolbar.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
            if (id === "format" || id === "valign" || id === "halign")
                return;
            _this.endEdit();
            _this._handleAction(id, e);
        });
        this.contextMenu.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
            _this.endEdit();
            _this._handleAction(id, e);
        });
        this.menu.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
            _this.endEdit();
            _this._handleAction(id, e);
        });
        this._colorpicker.events.on(ts_colorpicker_1.ColorpickerEvents.change, function (color) {
            var _a;
            _this._colorpickerPopup.hide();
            var selected = _this.selection.getSelectedCell();
            if (!_this._silencedColorChange)
                _this.setStyle(selected, (_a = {}, _a[_this._colorpickerTarget] = color, _a));
            _this._silencedColorChange = false;
            // restore widget focus
            requestAnimationFrame(function () {
                FocusManager_1.focusManager.setFocusId(_this._uid);
                if (_this._activeInput) {
                    _this._activeInput.focus();
                    _this._activeInput = null;
                }
            });
        });
        this.events.on(types_1.SpreadsheetEvents.editLineBlur, function (_val, e) {
            _this._restoreFocus(e);
        });
        this.events.on(types_1.SpreadsheetEvents.groupFill, function (focused, selected) {
            _this._fillCells(focused, selected);
        });
    };
    Spreadsheet.prototype._getErrorWindow = function () {
        if (!this._errorAlert) {
            this._errorAlert = new ts_window_1.Window({
                footer: true,
                modal: true,
                closable: true,
                width: 350,
                height: 240,
                title: "There was a problem",
            });
            this._errorAlert.footer.data.parse([
                {
                    type: "button",
                    view: "flat",
                    size: "medium",
                    color: "primary",
                    value: "Ok",
                    id: "ok",
                },
            ]);
        }
        return this._errorAlert;
    };
    Spreadsheet.prototype._handleAction = function (action, e) {
        var _a;
        var selected = this.selection.getSelectedCell();
        var focused = this.selection.getFocusedCell();
        var format = "";
        var formatIndex = core_1.findIndex(this.config.formats, function (f) { return f.id === action; });
        if (formatIndex !== -1) {
            format = action;
            action = "format";
        }
        var align = "";
        if (("" + action).includes("align")) {
            var split = ("" + action).split("-");
            action = split[0];
            align = split[1];
        }
        switch (action) {
            case "undo":
                this._actionsManager.undo();
                break;
            case "redo":
                this._actionsManager.redo();
                break;
            case "color":
            case "background": {
                this._colorpickerTarget = action;
                var info = main_1.getCellInfo(selected, this._activePage);
                var css = dhx.css.get(info.css) || {};
                var def = {
                    background: "#FFFFFF",
                    color: "#4C4C4C",
                };
                var color = css[action] || def[action];
                this._silencedColorChange = true;
                this._colorpicker.setValue(color === "white" ? "#FFFFFF" : color);
                var btn = html_1.locateNode(e, "dhx_id");
                this._colorpickerPopup.show(btn);
                break;
            }
            case "halign":
                this.setStyle(selected, { "text-align": align });
                break;
            case "valign":
                this.setStyle(selected, { "vertical-align": align });
                break;
            // case "align-left":
            // case "align-right":
            // case "align-center":
            // case "align-justify": {
            // 	const align = action.split("-")[1];
            // 	this.setStyle(selected, { "text-align": align });
            // 	break;
            // }
            case "font-weight-bold":
            case "font-style-italic":
            case "text-decoration-underline": {
                if (!selected) {
                    return;
                }
                var idArr = action.split("-");
                var val = idArr.pop();
                var key = idArr.join("-");
                var cellArr = selected.split(",");
                for (var _i = 0, cellArr_1 = cellArr; _i < cellArr_1.length; _i++) {
                    var cell = cellArr_1[_i];
                    val = toolbar_2.getToggledValue(this._activePage, cell, key, val);
                    this.setStyle(cell, (_a = {}, _a[key] = val, _a));
                }
                break;
            }
            case "clear-value":
                this.setValue(selected, "");
                break;
            case "clear-styles":
                this.setStyle(selected, {});
                break;
            case "clear-all":
                if (!selected) {
                    return;
                }
                this._callAction([
                    {
                        cell: selected,
                        action: types_1.Actions.setCellStyle,
                        groupAction: main_1.isRangeId(selected) ? types_1.Actions.groupAction : null,
                        val: "",
                        dataStore: this._dataStore,
                        page: this._activePage,
                    },
                    {
                        cell: selected,
                        action: types_1.Actions.setCellValue,
                        groupAction: main_1.isRangeId(selected) ? types_1.Actions.groupAction : null,
                        val: "",
                        page: this._activePage,
                        dataStore: this._dataStore,
                    },
                ]);
                break;
            case "lock":
                if (!selected) {
                    return;
                }
                var cellAr = selected.split(",");
                for (var _b = 0, cellAr_1 = cellAr; _b < cellAr_1.length; _b++) {
                    var cell = cellAr_1[_b];
                    if (this.isLocked(cell)) {
                        this.unlock(cell);
                    }
                    else {
                        this.lock(cell);
                    }
                }
                break;
            case "remove-row":
                this.deleteRow(focused);
                break;
            case "add-row":
                this.addRow(focused);
                break;
            case "remove-col":
                this.deleteColumn(focused);
                break;
            case "add-col":
                this.addColumn(focused);
                break;
            case "help":
                window.open("https://docs.dhtmlx.com/spreadsheet/user_guide.html");
                break;
            case "format":
                this.setFormat(selected, format);
                this.paint();
                break;
            case "export-xlsx":
                this.export.xlsx();
                break;
            case "import-xlsx":
                this.load("", "xlsx");
                break;
            default:
                break;
        }
    };
    // private _fillCells(focused: string, selected: string) {
    // 	let cells = selected;
    // 	let value = this.getValue(focused);
    //
    // 	if (Array.isArray(value)) {
    // 		const filled = getAutoFilledCells(value, focused, selected);
    // 		cells = filled.cells;
    // 		value = filled.value;
    // 	}
    //
    // 	const styles = this.getStyle(focused);
    // 	const format = this.getFormat(focused);
    //
    // 	this._callAction([
    // 		{
    // 			cell: cells,
    // 			action: Actions.setCellFormat,
    // 			groupAction: isRangeId(cells) ? Actions.groupAction : null,
    // 			val: format
    // 		},
    // 		{
    // 			cell: cells,
    // 			action: Actions.setCellStyle,
    // 			groupAction: isRangeId(cells) ? Actions.groupAction : null,
    // 			val: styles
    // 		},
    // 		{
    // 			cell: cells,
    // 			action: Actions.setCellValue,
    // 			groupAction: isRangeId(cells) ? Actions.groupAction : null,
    // 			val: value
    // 		}
    // 	]);
    // 	this.selection.setSelectedCell(selected);
    // }
    Spreadsheet.prototype._fillCells = function (focused, selected) {
        var _this = this;
        var focusedCells = [focused];
        var selectedCells = [selected];
        if (main_1.isRangeId(focused)) {
            var largerByX = selection_1.getCellsDiff(focused.split(":")[1], selected.split(":")[1]).isLargerByX;
            var dir = largerByX ? "row" : "col";
            var matrix = main_1.getRangeMatrix(focused, dir);
            focusedCells = matrix.map(function (row) {
                return row.length > 1 ? row[0] + ":" + row[row.length - 1] : row[0];
            });
            selectedCells = main_1.getRangeMatrix(selected, dir).map(function (row) {
                return row.length > 1 ? row[0] + ":" + row[row.length - 1] : row[0];
            });
        }
        var actions = focusedCells.reduce(function (acc, row, i) {
            var _a;
            var value;
            if (main_1.isRangeId(row)) {
                value = [];
                _this.eachCell(function (cell) {
                    var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
                    var meta = __assign({}, _this._activePage.getCell(row, col));
                    var cellVal = _this._activePage.getValue(row, col, true);
                    meta.value = cellVal || "";
                    value.push(meta);
                }, row);
            }
            else {
                var cell = row;
                var ids = main_1.getCellIds(cell);
                var meta = __assign({}, _this._activePage.getCell(ids.row, ids.col));
                var val = _this._activePage.getValue(ids.row, ids.col, true);
                meta.value = val || "";
                value = ((_a = meta.format) === null || _a === void 0 ? void 0 : _a.id) === "date" ? [meta] : val;
            }
            var cells = selectedCells[i];
            if (Array.isArray(value)) {
                if (row === cells) {
                    return acc;
                }
                var filled = selection_1.getAutoFilledCells(value, row, cells, _this._math);
                cells = filled.cells;
                value = filled.value;
            }
            var styles = _this.getStyle(row);
            var format = _this.getFormat(row);
            acc.push({
                cell: cells,
                action: types_1.Actions.setCellFormat,
                groupAction: main_1.isRangeId(cells) ? types_1.Actions.groupAction : null,
                val: format,
                page: _this._activePage,
            }, {
                cell: cells,
                action: types_1.Actions.setCellStyle,
                groupAction: main_1.isRangeId(cells) ? types_1.Actions.groupAction : null,
                val: styles,
                page: _this._activePage,
                replace: true
            });
            if (typeof value === "string" && value.startsWith("=")) {
                var firstCell_1 = main_1.getCellIds(row);
                _this.eachCell(function (cell) {
                    var targetCell = main_1.getCellIds(cell);
                    var math = _this._math.transposeMath(value, targetCell.row - firstCell_1.row, targetCell.col - firstCell_1.col);
                    acc.push({
                        cell: cell,
                        action: types_1.Actions.setCellValue,
                        groupAction: null,
                        val: math,
                        page: _this._activePage,
                    });
                }, cells);
            }
            else {
                acc.push({
                    cell: cells,
                    action: types_1.Actions.setCellValue,
                    groupAction: main_1.isRangeId(cells) ? types_1.Actions.groupAction : null,
                    val: value,
                    page: _this._activePage,
                });
            }
            return acc;
        }, []);
        this._callAction(actions);
    };
    Spreadsheet.prototype._restoreFocus = function (e) {
        var _this = this;
        var editLineRoot = this._editLine.getRootView().node;
        var editLineContainer = editLineRoot && editLineRoot.el;
        var focusedCell = this._range.cell || this.selection.getFocusedCell();
        var col = main_1.getCellIds(focusedCell).col;
        var isFixed = col <= this.config.leftSplit;
        if (focusedCell && (!main_1.getCellInfo(focusedCell, this._activePage).edited || isFixed)) {
            return;
        }
        var focusID = FocusManager_1.focusManager.getFocusId();
        if (focusID !== this._uid &&
            focusID !== this._grid._uid &&
            this._editLine._suggest._list &&
            focusID !== this._editLine._suggest._list._uid &&
            focusID !== this._tabbar._uid) {
            if (this._colorpickerTarget) {
                this._activeInput = e.target;
                return;
            }
            this.endEdit();
            return;
        }
        var target = e.target;
        var relatedTarget = e.relatedTarget;
        if (editLineContainer && editLineContainer.contains(relatedTarget)) {
            return;
        }
        if (editLineContainer &&
            editLineContainer.contains(target) &&
            relatedTarget &&
            relatedTarget.getAttribute("dhx_id") === "cell_input") {
            return;
        }
        var input = target;
        input.focus();
        // [dirty]
        setTimeout(function () {
            var cursor = _this._range.cursor || input.value.length;
            input.selectionStart > cursor && input.setSelectionRange(cursor, cursor);
        }, 100);
    };
    Spreadsheet.prototype._initHotkeys = function () {
        var _this = this;
        if (this.config.readonly)
            return;
        this.keyManager = new newKeyManager_1.KeyManager(function (e, focusId) {
            return focusId === _this._uid ||
                focusId === _this._grid._uid ||
                focusId === _this.toolbar._uid;
        });
        var handlers = hotkeys_1.getKeysHandlers(this, this._grid, this._buffer, this._editLine);
        for (var key in handlers) {
            this.keyManager.addHotKey(key, handlers[key]);
        }
        for (var key in this.config.hotkeys) {
            this.keyManager.addHotKey(key, this.config.hotkeys[key]);
        }
    };
    Spreadsheet.prototype._render = function () {
        return dom_1.el(".dhx_widget.dhx-spreadsheet", {
            dhx_widget_id: this._uid,
            _key: this._uid,
        }, [dom_1.inject(this._layout.getRootView())]);
    };
    return Spreadsheet;
}(view_1.View));
exports.Spreadsheet = Spreadsheet;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(91));
__export(__webpack_require__(50));
__export(__webpack_require__(49));
__export(__webpack_require__(36));
var en_1 = __webpack_require__(37);
exports.locale = en_1.default;


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var html_1 = __webpack_require__(2);
var view_1 = __webpack_require__(7);
var core_1 = __webpack_require__(1);
var color_1 = __webpack_require__(36);
var colors_1 = __webpack_require__(49);
var en_1 = __webpack_require__(37);
var types_1 = __webpack_require__(50);
// tslint:disable-next-line
var tooltip_1 = __webpack_require__(48);
// tslint:disable-next-line
var ts_message_1 = __webpack_require__(19);
var picker_1 = __webpack_require__(93);
var calculations_1 = __webpack_require__(94);
var KeyManager_1 = __webpack_require__(20);
var FocusManager_1 = __webpack_require__(10);
var core_2 = __webpack_require__(1);
var Colorpicker = /** @class */ (function (_super) {
    __extends(Colorpicker, _super);
    function Colorpicker(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this._setPaletteGrip = function (e) {
            var paletteRect = _this.getRootView().refs.picker_palette.el.getBoundingClientRect();
            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
            var clientY = e.targetTouches ? e.targetTouches[0].clientY : e.clientY;
            var top = clientY - paletteRect.top;
            var left = clientX - paletteRect.left;
            var _a = calculations_1.calculatePaletteGrip(paletteRect, top, left), s = _a.s, v = _a.v;
            _this._pickerState.hsv.s = s;
            _this._pickerState.hsv.v = v;
            _this.paint();
        };
        _this._setRangeGrip = function (e) {
            var rangeRect = _this.getRootView().refs.hue_range.el.getBoundingClientRect();
            var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
            var left = clientX - rangeRect.left;
            var _a = calculations_1.calculateRangeGrip(rangeRect, left), h = _a.h, rangeLeft = _a.rangeLeft;
            _this._pickerState.hsv.h = h;
            _this._pickerState.rangeLeft = rangeLeft;
            _this.paint();
        };
        _this._onColorClick = function (_e, node) {
            _this._selected = node.data.color.toUpperCase();
            _this.events.fire(types_1.ColorpickerEvents.change, [_this._selected]);
            _this.events.fire(types_1.ColorpickerEvents.colorChange, [_this._selected]); // TODO: remove suite_7.0
        };
        _this._container = container;
        _this.config = core_1.extend({
            css: "",
            grayShades: true,
            pickerOnly: false,
            paletteOnly: false,
            customColors: [],
            palette: colors_1.palette,
            width: "238px",
            mode: "palette",
        }, _this.config);
        if (!_this.config.palette) {
            _this.config.palette = colors_1.palette;
        }
        if (_this.config.customColors) {
            _this.config.customColors = _this.config.customColors.map(function (color) { return color.toUpperCase(); });
        }
        _this._pickerState = {
            hsv: { h: 0, s: 1, v: 1 },
            customHex: "",
        };
        _this.events = new events_1.EventSystem(_this);
        _this._setHandlers();
        _this._keyManager = new KeyManager_1.KeyManager(function (e, focusId) { return focusId === _this._uid; });
        _this._initHotKey();
        var view = dom_1.create({ render: function () { return _this._getContent(); } });
        _this.mount(_this._container, view);
        return _this;
    }
    Colorpicker.prototype.destructor = function () {
        this.events && this.events.clear();
        this.config = this.events = this._selected = this._handlers = this._pickerState = this._inputTimeout = null;
        this.unmount();
    };
    Colorpicker.prototype.clear = function () {
        this._selected = "";
        this.events.fire(types_1.ColorpickerEvents.change, [this._selected]);
        this.paint();
    };
    Colorpicker.prototype.setValue = function (value) {
        if (this._focusColor(value) || FocusManager_1.focusManager.getFocusId() === this._uid) {
            this.paint();
            this.events.fire(types_1.ColorpickerEvents.change, [this._selected]);
            this.events.fire(types_1.ColorpickerEvents.colorChange, [this._selected]); // TODO: remove suite_7.0
        }
    };
    Colorpicker.prototype.setFocus = function (value) {
        if (this._focusColor(value)) {
            this.paint();
        }
    };
    Colorpicker.prototype.getValue = function () {
        return this._selected || "";
    };
    Colorpicker.prototype.getCustomColors = function () {
        return this.config.customColors;
    };
    Colorpicker.prototype.setCustomColors = function (customColors) {
        this.config.customColors = customColors.map(function (color) { return color.toUpperCase(); });
        this.paint();
    };
    Colorpicker.prototype.setCurrentMode = function (mode) {
        if (mode === "palette" || mode === "picker") {
            this.config.mode = mode;
            this.events.fire(types_1.ColorpickerEvents.modeChange, [mode]);
            this.events.fire(types_1.ColorpickerEvents.viewChange, [mode]); // TODO: remove suite_7.0
            this.paint();
        }
    };
    Colorpicker.prototype.getCurrentMode = function () {
        return this.config.mode;
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.getView = function () {
        return this.getCurrentMode();
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.setView = function (mode) {
        this.setCurrentMode(mode);
    };
    /** @deprecated See a documentation: https://docs.dhtmlx.com/ */
    Colorpicker.prototype.focusValue = function (value) {
        this.setFocus(value);
    };
    Colorpicker.prototype._setHandlers = function () {
        var _this = this;
        this._handlers = {
            click: {
                ".dhx_palette__cell": this._onColorClick,
            },
            mousedown: function (e) {
                _this._pickerMove(e);
            },
            touchstart: function (e) {
                _this._pickerMove(e);
            },
            buttonsClick: function (button) {
                _this.setCurrentMode("palette");
                if (button === "cancel") {
                    _this.events.fire(types_1.ColorpickerEvents.cancelClick, []);
                    return;
                }
                if (button === "apply" && !_this.config.customColors.includes(_this._pickerState.background)) {
                    _this.setValue(_this._pickerState.background);
                    _this.events.fire(types_1.ColorpickerEvents.apply, []);
                    _this.events.fire(types_1.ColorpickerEvents.selectClick, []); // TODO: remove suite_7.0
                }
            },
            customColorClick: function () {
                _this.setView("picker");
            },
            oninput: function (e) {
                if (_this._inputTimeout) {
                    clearTimeout(_this._inputTimeout);
                }
                _this._inputTimeout = setTimeout(function () {
                    var val = e.target.value;
                    if (val.indexOf("#") === -1) {
                        val = "#" + val;
                    }
                    _this._pickerState.customHex = val;
                    if (color_1.isHex(val)) {
                        _this._pickerState.hsv = color_1.HexToHSV(val);
                        _this.paint();
                    }
                }, 100);
            },
            contextmenu: {
                ".dhx_palette__cell": function (e, node) {
                    e.preventDefault();
                    var index = _this.config.customColors.indexOf(node.data.color);
                    if (index !== -1) {
                        _this._removeCustomColor(index);
                    }
                    _this.paint();
                    return;
                },
            },
            mouseover: {
                ".dhx_palette__cell": function (e) {
                    if (e.target) {
                        tooltip_1.tooltip(en_1.default.rightClickToDelete, {
                            node: e.target,
                            position: ts_message_1.Position.bottom,
                        });
                    }
                },
                ".dhx_colorpicker-custom-colors__picker": function (e) {
                    if (e.target) {
                        tooltip_1.tooltip(en_1.default.addNewColor, {
                            node: e.target,
                            position: ts_message_1.Position.bottom,
                        });
                    }
                },
            },
        };
        this.events.on(types_1.ColorpickerEvents.change, function () {
            _this.paint();
        });
        // TODO: remove suite_7.0
        this.events.on(types_1.ColorpickerEvents.colorChange, function () {
            _this.paint();
        });
    };
    Colorpicker.prototype._pickerMove = function (e) {
        var name = html_1.locate(e);
        this._pickerState.customHex = "";
        if (name === "picker_palette") {
            this._setPaletteGrip(e);
        }
        else {
            this._setRangeGrip(e);
        }
        var handler = name === "picker_palette" ? this._setPaletteGrip : this._setRangeGrip;
        var move = e.targetTouches ? "touchmove" : "mousemove";
        var up = e.targetTouches ? "touchend" : "mouseup";
        document.addEventListener(move, handler);
        document.addEventListener(up, function () {
            document.removeEventListener(move, handler);
        });
        this.paint();
    };
    Colorpicker.prototype._focusColor = function (value) {
        if (value === undefined || value.length < 4) {
            return false;
        }
        var hex = value.toUpperCase();
        if (!color_1.isHex(hex)) {
            return false;
        }
        var isInPalette = this.config.palette.reduce(function (state, col) {
            if (state) {
                return state;
            }
            col.forEach(function (color) {
                if (color.toUpperCase() === hex) {
                    state = true;
                    return;
                }
            });
            return state;
        }, false);
        var isInGrayShades = colors_1.grayShades.includes(hex);
        if (!isInPalette && !isInGrayShades) {
            var colors = this.getCustomColors();
            if (!colors.includes(hex.toUpperCase())) {
                colors.push(hex.toUpperCase());
            }
        }
        this._selected = hex || null;
        this._pickerState.hsv = color_1.HexToHSV(hex);
        return true;
    };
    Colorpicker.prototype._removeCustomColor = function (index) {
        this.config.customColors.splice(index, 1);
    };
    Colorpicker.prototype._getCells = function (colors, cellClass) {
        var _this = this;
        if (cellClass === void 0) { cellClass = ""; }
        return colors.reduce(function (cells, color) {
            var selected = (_this._selected || "").toUpperCase() === color.toUpperCase()
                ? "dhx_palette__cell--selected"
                : "";
            cells.push(dom_1.el(".dhx_palette__cell", {
                class: selected + " " + cellClass,
                _data: { color: color },
                style: "background:" + color,
                tabindex: 0,
            }));
            return cells;
        }, []);
    };
    Colorpicker.prototype._getGrayShades = function () {
        return dom_1.el(".dhx_palette__row", this._getCells(colors_1.grayShades));
    };
    Colorpicker.prototype._getPalette = function () {
        var _this = this;
        return this.config.palette.reduce(function (total, row) {
            total.push(dom_1.el(".dhx_palette__col", _this._getCells(row)));
            return total;
        }, []);
    };
    Colorpicker.prototype._getContent = function () {
        var view;
        if (this.config.pickerOnly) {
            view = [picker_1.getPicker(this, this._pickerState, this._handlers)];
        }
        else {
            view =
                this.config.mode === "palette"
                    ? __spreadArrays([
                        this.config.grayShades && this._getGrayShades()
                    ], this._getPalette(), [
                        !this.config.paletteOnly &&
                            dom_1.el(".dhx_colorpicker-custom-colors", {
                                onmouseover: this._handlers.mouseover,
                            }, [
                                dom_1.el(".dhx_colorpicker-custom-colors__header", [en_1.default.customColors]),
                                dom_1.el(".dhx_palette--custom.dhx_palette__row", __spreadArrays(this._getCells(this.config.customColors, "dhx_custom-color__cell"), [
                                    dom_1.el(".dhx_colorpicker-custom-colors__picker", {
                                        class: "dxi dxi-plus",
                                        onclick: this._handlers.customColorClick,
                                        onmouseover: this._handlers.mouseover,
                                        tabindex: 0,
                                    }),
                                ])),
                            ]),
                    ]) : [picker_1.getPicker(this, this._pickerState, this._handlers)];
        }
        return dom_1.el(".dhx_widget.dhx_colorpicker", {
            class: this.config.css,
            style: { width: this.config.width },
            dhx_widget_id: this._uid,
        }, [
            dom_1.el(".dhx_palette", {
                onclick: this._handlers.click,
                oncontextmenu: this._handlers.contextmenu,
            }, view),
        ]);
    };
    Colorpicker.prototype._initHotKey = function () {
        var _this = this;
        var handlers = {
            enter: function (e) {
                if (html_1.locateNodeByClassName(e, "dhx_palette__cell")) {
                    _this._selected = core_2.rgbToHex(e.target.style.background);
                    _this.events.fire(types_1.ColorpickerEvents.change, [_this._selected]);
                    _this.events.fire(types_1.ColorpickerEvents.colorChange, [_this._selected]); // TODO: remove suite_7.0
                }
                if (html_1.locateNodeByClassName(e, "dhx_colorpicker-custom-colors__picker")) {
                    _this.setCurrentMode("picker");
                }
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    return Colorpicker;
}(view_1.View));
exports.Colorpicker = Colorpicker;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

/**
* Copyright (c) 2017, Leon Sorokin
* All rights reserved. (MIT Licensed)
*
* domvm.js (DOM ViewModel)
* A thin, fast, dependency-free vdom view layer
* @preserve https://github.com/leeoniya/domvm (v3.2.6, micro build)
*/

(function (global, factory) {
	 true ? module.exports = factory() :
	undefined;
}(this, (function () { 'use strict';

// NOTE: if adding a new *VNode* type, make it < COMMENT and renumber rest.
// There are some places that test <= COMMENT to assert if node is a VNode

// VNode types
var ELEMENT	= 1;
var TEXT		= 2;
var COMMENT	= 3;

// placeholder types
var VVIEW		= 4;
var VMODEL		= 5;

var ENV_DOM = typeof window !== "undefined";
var win = ENV_DOM ? window : {};
var rAF = win.requestAnimationFrame;

var emptyObj = {};

function noop() {}

var isArr = Array.isArray;

function isSet(val) {
	return val != null;
}

function isPlainObj(val) {
	return val != null && val.constructor === Object;		//  && typeof val === "object"
}

function insertArr(targ, arr, pos, rem) {
	targ.splice.apply(targ, [pos, rem].concat(arr));
}

function isVal(val) {
	var t = typeof val;
	return t === "string" || t === "number";
}

function isFunc(val) {
	return typeof val === "function";
}

function isProm(val) {
	return typeof val === "object" && isFunc(val.then);
}



function assignObj(targ) {
	var args = arguments;

	for (var i = 1; i < args.length; i++)
		{ for (var k in args[i])
			{ targ[k] = args[i][k]; } }

	return targ;
}

// export const defProp = Object.defineProperty;

function deepSet(targ, path, val) {
	var seg;

	while (seg = path.shift()) {
		if (path.length === 0)
			{ targ[seg] = val; }
		else
			{ targ[seg] = targ = targ[seg] || {}; }
	}
}

/*
export function deepUnset(targ, path) {
	var seg;

	while (seg = path.shift()) {
		if (path.length === 0)
			targ[seg] = val;
		else
			targ[seg] = targ = targ[seg] || {};
	}
}
*/

function sliceArgs(args, offs) {
	var arr = [];
	for (var i = offs; i < args.length; i++)
		{ arr.push(args[i]); }
	return arr;
}

function cmpObj(a, b) {
	for (var i in a)
		{ if (a[i] !== b[i])
			{ return false; } }

	return true;
}

function cmpArr(a, b) {
	var alen = a.length;

	if (b.length !== alen)
		{ return false; }

	for (var i = 0; i < alen; i++)
		{ if (a[i] !== b[i])
			{ return false; } }

	return true;
}

// https://github.com/darsain/raft
// rAF throttler, aggregates multiple repeated redraw calls within single animframe
function raft(fn) {
	if (!rAF)
		{ return fn; }

	var id, ctx, args;

	function call() {
		id = 0;
		fn.apply(ctx, args);
	}

	return function() {
		ctx = this;
		args = arguments;
		if (!id) { id = rAF(call); }
	};
}

function curry(fn, args, ctx) {
	return function() {
		return fn.apply(ctx, args);
	};
}

/*
export function prop(val, cb, ctx, args) {
	return function(newVal, execCb) {
		if (newVal !== undefined && newVal !== val) {
			val = newVal;
			execCb !== false && isFunc(cb) && cb.apply(ctx, args);
		}

		return val;
	};
}
*/

/*
// adapted from https://github.com/Olical/binary-search
export function binaryKeySearch(list, item) {
    var min = 0;
    var max = list.length - 1;
    var guess;

	var bitwise = (max <= 2147483647) ? true : false;
	if (bitwise) {
		while (min <= max) {
			guess = (min + max) >> 1;
			if (list[guess].key === item) { return guess; }
			else {
				if (list[guess].key < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	} else {
		while (min <= max) {
			guess = Math.floor((min + max) / 2);
			if (list[guess].key === item) { return guess; }
			else {
				if (list[guess].key < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	}

    return -1;
}
*/

// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
// impl borrowed from https://github.com/ivijs/ivi
function longestIncreasingSubsequence(a) {
	var p = a.slice();
	var result = [];
	result.push(0);
	var u;
	var v;

	for (var i = 0, il = a.length; i < il; ++i) {
		var j = result[result.length - 1];
		if (a[j] < a[i]) {
			p[i] = j;
			result.push(i);
			continue;
		}

		u = 0;
		v = result.length - 1;

		while (u < v) {
			var c = ((u + v) / 2) | 0;
			if (a[result[c]] < a[i]) {
				u = c + 1;
			} else {
				v = c;
			}
		}

		if (a[i] < a[result[u]]) {
			if (u > 0) {
				p[i] = result[u - 1];
			}
			result[u] = i;
		}
	}

	u = result.length;
	v = result[u - 1];

	while (u-- > 0) {
		result[u] = v;
		v = p[v];
	}

	return result;
}

// based on https://github.com/Olical/binary-search
function binaryFindLarger(item, list) {
	var min = 0;
	var max = list.length - 1;
	var guess;

	var bitwise = (max <= 2147483647) ? true : false;
	if (bitwise) {
		while (min <= max) {
			guess = (min + max) >> 1;
			if (list[guess] === item) { return guess; }
			else {
				if (list[guess] < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	} else {
		while (min <= max) {
			guess = Math.floor((min + max) / 2);
			if (list[guess] === item) { return guess; }
			else {
				if (list[guess] < item) { min = guess + 1; }
				else { max = guess - 1; }
			}
		}
	}

	return (min == list.length) ? null : min;

//	return -1;
}

function isEvProp(name) {
	return name[0] === "o" && name[1] === "n";
}

function isSplProp(name) {
	return name[0] === "_";
}

function isStyleProp(name) {
	return name === "style";
}

function repaint(node) {
	node && node.el && node.el.offsetHeight;
}

function isHydrated(vm) {
	return vm.node != null && vm.node.el != null;
}

// tests interactive props where real val should be compared
function isDynProp(tag, attr) {
//	switch (tag) {
//		case "input":
//		case "textarea":
//		case "select":
//		case "option":
			switch (attr) {
				case "value":
				case "checked":
				case "selected":
//				case "selectedIndex":
					return true;
			}
//	}

	return false;
}

function getVm(n) {
	n = n || emptyObj;
	while (n.vm == null && n.parent)
		{ n = n.parent; }
	return n.vm;
}

function VNode() {}

var VNodeProto = VNode.prototype = {
	constructor: VNode,

	type:	null,

	vm:		null,

	// all this stuff can just live in attrs (as defined) just have getters here for it
	key:	null,
	ref:	null,
	data:	null,
	hooks:	null,
	ns:		null,

	el:		null,

	tag:	null,
	attrs:	null,
	body:	null,

	flags:	0,

	_class:	null,
	_diff:	null,

	// pending removal on promise resolution
	_dead:	false,
	// part of longest increasing subsequence?
	_lis:	false,

	idx:	null,
	parent:	null,

	/*
	// break out into optional fluent module
	key:	function(val) { this.key	= val; return this; },
	ref:	function(val) { this.ref	= val; return this; },		// deep refs
	data:	function(val) { this.data	= val; return this; },
	hooks:	function(val) { this.hooks	= val; return this; },		// h("div").hooks()
	html:	function(val) { this.html	= true; return this.body(val); },

	body:	function(val) { this.body	= val; return this; },
	*/
};

function defineText(body) {
	var node = new VNode;
	node.type = TEXT;
	node.body = body;
	return node;
}

// creates a one-shot self-ending stream that redraws target vm
// TODO: if it's already registered by any parent vm, then ignore to avoid simultaneous parent & child refresh

var tagCache = {};

var RE_ATTRS = /\[(\w+)(?:=(\w+))?\]/g;

function cssTag(raw) {
	{
		var cached = tagCache[raw];

		if (cached == null) {
			var tag, id, cls, attr;

			tagCache[raw] = cached = {
				tag:	(tag	= raw.match( /^[-\w]+/))		?	tag[0]						: "div",
				id:		(id		= raw.match( /#([-\w]+)/))		? 	id[1]						: null,
				class:	(cls	= raw.match(/\.([-\w.]+)/))		?	cls[1].replace(/\./g, " ")	: null,
				attrs:	null,
			};

			while (attr = RE_ATTRS.exec(raw)) {
				if (cached.attrs == null)
					{ cached.attrs = {}; }
				cached.attrs[attr[1]] = attr[2] || "";
			}
		}

		return cached;
	}
}

// (de)optimization flags

// forces slow bottom-up removeChild to fire deep willRemove/willUnmount hooks,
var DEEP_REMOVE = 1;
// prevents inserting/removing/reordering of children
var FIXED_BODY = 2;
// enables fast keyed lookup of children via binary search, expects homogeneous keyed body
var KEYED_LIST = 4;
// indicates an vnode match/diff/recycler function for body
var LAZY_LIST = 8;

function initElementNode(tag, attrs, body, flags) {
	var node = new VNode;

	node.type = ELEMENT;

	if (isSet(flags))
		{ node.flags = flags; }

	node.attrs = attrs;

	var parsed = cssTag(tag);

	node.tag = parsed.tag;

	// meh, weak assertion, will fail for id=0, etc.
	if (parsed.id || parsed.class || parsed.attrs) {
		var p = node.attrs || {};

		if (parsed.id && !isSet(p.id))
			{ p.id = parsed.id; }

		if (parsed.class) {
			node._class = parsed.class;		// static class
			p.class = parsed.class + (isSet(p.class) ? (" " + p.class) : "");
		}
		if (parsed.attrs) {
			for (var key in parsed.attrs)
				{ if (!isSet(p[key]))
					{ p[key] = parsed.attrs[key]; } }
		}

//		if (node.attrs !== p)
			node.attrs = p;
	}

	var mergedAttrs = node.attrs;

	if (isSet(mergedAttrs)) {
		if (isSet(mergedAttrs._key))
			{ node.key = mergedAttrs._key; }

		if (isSet(mergedAttrs._ref))
			{ node.ref = mergedAttrs._ref; }

		if (isSet(mergedAttrs._hooks))
			{ node.hooks = mergedAttrs._hooks; }

		if (isSet(mergedAttrs._data))
			{ node.data = mergedAttrs._data; }

		if (isSet(mergedAttrs._flags))
			{ node.flags = mergedAttrs._flags; }

		if (!isSet(node.key)) {
			if (isSet(node.ref))
				{ node.key = node.ref; }
			else if (isSet(mergedAttrs.id))
				{ node.key = mergedAttrs.id; }
			else if (isSet(mergedAttrs.name))
				{ node.key = mergedAttrs.name + (mergedAttrs.type === "radio" || mergedAttrs.type === "checkbox" ? mergedAttrs.value : ""); }
		}
	}

	if (body != null)
		{ node.body = body; }

	return node;
}

function setRef(vm, name, node) {
	var path = ["refs"].concat(name.split("."));
	deepSet(vm, path, node);
}

function setDeepRemove(node) {
	while (node = node.parent)
		{ node.flags |= DEEP_REMOVE; }
}

// vnew, vold
function preProc(vnew, parent, idx, ownVm) {
	if (vnew.type === VMODEL || vnew.type === VVIEW)
		{ return; }

	vnew.parent = parent;
	vnew.idx = idx;
	vnew.vm = ownVm;

	if (vnew.ref != null)
		{ setRef(getVm(vnew), vnew.ref, vnew); }

	var nh = vnew.hooks,
		vh = ownVm && ownVm.hooks;

	if (nh && (nh.willRemove || nh.didRemove) ||
		vh && (vh.willUnmount || vh.didUnmount))
		{ setDeepRemove(vnew); }

	if (isArr(vnew.body))
		{ preProcBody(vnew); }
	else {}
}

function preProcBody(vnew) {
	var body = vnew.body;

	for (var i = 0; i < body.length; i++) {
		var node2 = body[i];

		// remove false/null/undefined
		if (node2 === false || node2 == null)
			{ body.splice(i--, 1); }
		// flatten arrays
		else if (isArr(node2)) {
			insertArr(body, node2, i--, 1);
		}
		else {
			if (node2.type == null)
				{ body[i] = node2 = defineText(""+node2); }

			if (node2.type === TEXT) {
				// remove empty text nodes
				if (node2.body == null || node2.body === "")
					{ body.splice(i--, 1); }
				// merge with previous text node
				else if (i > 0 && body[i-1].type === TEXT) {
					body[i-1].body += node2.body;
					body.splice(i--, 1);
				}
				else
					{ preProc(node2, vnew, i, null); }
			}
			else
				{ preProc(node2, vnew, i, null); }
		}
	}
}

var unitlessProps = {
	animationIterationCount: true,
	boxFlex: true,
	boxFlexGroup: true,
	boxOrdinalGroup: true,
	columnCount: true,
	flex: true,
	flexGrow: true,
	flexPositive: true,
	flexShrink: true,
	flexNegative: true,
	flexOrder: true,
	gridRow: true,
	gridColumn: true,
	order: true,
	lineClamp: true,

	borderImageOutset: true,
	borderImageSlice: true,
	borderImageWidth: true,
	fontWeight: true,
	lineHeight: true,
	opacity: true,
	orphans: true,
	tabSize: true,
	widows: true,
	zIndex: true,
	zoom: true,

	fillOpacity: true,
	floodOpacity: true,
	stopOpacity: true,
	strokeDasharray: true,
	strokeDashoffset: true,
	strokeMiterlimit: true,
	strokeOpacity: true,
	strokeWidth: true
};

function autoPx(name, val) {
	{
		// typeof val === 'number' is faster but fails for numeric strings
		return !isNaN(val) && !unitlessProps[name] ? (val + "px") : val;
	}
}

// assumes if styles exist both are objects or both are strings
function patchStyle(n, o) {
	var ns =     (n.attrs || emptyObj).style;
	var os = o ? (o.attrs || emptyObj).style : null;

	// replace or remove in full
	if (ns == null || isVal(ns))
		{ n.el.style.cssText = ns; }
	else {
		for (var nn in ns) {
			var nv = ns[nn];

			if (os == null || nv != null && nv !== os[nn])
				{ n.el.style[nn] = autoPx(nn, nv); }
		}

		// clean old
		if (os) {
			for (var on in os) {
				if (ns[on] == null)
					{ n.el.style[on] = ""; }
			}
		}
	}
}

var didQueue = [];

function fireHook(hooks, name, o, n, immediate) {
	if (hooks != null) {
		var fn = o.hooks[name];

		if (fn) {
			if (name[0] === "d" && name[1] === "i" && name[2] === "d") {	// did*
				//	console.log(name + " should queue till repaint", o, n);
				immediate ? repaint(o.parent) && fn(o, n) : didQueue.push([fn, o, n]);
			}
			else {		// will*
				//	console.log(name + " may delay by promise", o, n);
				return fn(o, n);		// or pass  done() resolver
			}
		}
	}
}

function drainDidHooks(vm) {
	if (didQueue.length) {
		repaint(vm.node);

		var item;
		while (item = didQueue.shift())
			{ item[0](item[1], item[2]); }
	}
}

var doc = ENV_DOM ? document : null;

function closestVNode(el) {
	while (el._node == null)
		{ el = el.parentNode; }
	return el._node;
}

function createElement(tag, ns) {
	if (ns != null)
		{ return doc.createElementNS(ns, tag); }
	return doc.createElement(tag);
}

function createTextNode(body) {
	return doc.createTextNode(body);
}

function createComment(body) {
	return doc.createComment(body);
}

// ? removes if !recycled
function nextSib(sib) {
	return sib.nextSibling;
}

// ? removes if !recycled
function prevSib(sib) {
	return sib.previousSibling;
}

// TODO: this should collect all deep proms from all hooks and return Promise.all()
function deepNotifyRemove(node) {
	var vm = node.vm;

	var wuRes = vm != null && fireHook(vm.hooks, "willUnmount", vm, vm.data);

	var wrRes = fireHook(node.hooks, "willRemove", node);

	if ((node.flags & DEEP_REMOVE) === DEEP_REMOVE && isArr(node.body)) {
		for (var i = 0; i < node.body.length; i++)
			{ deepNotifyRemove(node.body[i]); }
	}

	return wuRes || wrRes;
}

function _removeChild(parEl, el, immediate) {
	var node = el._node, vm = node.vm;

	if (isArr(node.body)) {
		if ((node.flags & DEEP_REMOVE) === DEEP_REMOVE) {
			for (var i = 0; i < node.body.length; i++)
				{ _removeChild(el, node.body[i].el); }
		}
		else
			{ deepUnref(node); }
	}

	delete el._node;

	parEl.removeChild(el);

	fireHook(node.hooks, "didRemove", node, null, immediate);

	if (vm != null) {
		fireHook(vm.hooks, "didUnmount", vm, vm.data, immediate);
		vm.node = null;
	}
}

// todo: should delay parent unmount() by returning res prom?
function removeChild(parEl, el) {
	var node = el._node;

	// already marked for removal
	if (node._dead) { return; }

	var res = deepNotifyRemove(node);

	if (res != null && isProm(res)) {
		node._dead = true;
		res.then(curry(_removeChild, [parEl, el, true]));
	}
	else
		{ _removeChild(parEl, el); }
}

function deepUnref(node) {
	var obody = node.body;

	for (var i = 0; i < obody.length; i++) {
		var o2 = obody[i];
		delete o2.el._node;

		if (o2.vm != null)
			{ o2.vm.node = null; }

		if (isArr(o2.body))
			{ deepUnref(o2); }
	}
}

function clearChildren(parent) {
	var parEl = parent.el;

	if ((parent.flags & DEEP_REMOVE) === 0) {
		isArr(parent.body) && deepUnref(parent);
		parEl.textContent = null;
	}
	else {
		var el = parEl.firstChild;

		do {
			var next = nextSib(el);
			removeChild(parEl, el);
		} while (el = next);
	}
}

// todo: hooks
function insertBefore(parEl, el, refEl) {
	var node = el._node, inDom = el.parentNode != null;

	// el === refEl is asserted as a no-op insert called to fire hooks
	var vm = (el === refEl || !inDom) ? node.vm : null;

	if (vm != null)
		{ fireHook(vm.hooks, "willMount", vm, vm.data); }

	fireHook(node.hooks, inDom ? "willReinsert" : "willInsert", node);
	parEl.insertBefore(el, refEl);
	fireHook(node.hooks, inDom ? "didReinsert" : "didInsert", node);

	if (vm != null)
		{ fireHook(vm.hooks, "didMount", vm, vm.data); }
}

function insertAfter(parEl, el, refEl) {
	insertBefore(parEl, el, refEl ? nextSib(refEl) : null);
}

var onemit = {};

function emitCfg(cfg) {
	assignObj(onemit, cfg);
}

function emit(evName) {
	var targ = this,
		src = targ;

	var args = sliceArgs(arguments, 1).concat(src, src.data);

	do {
		var evs = targ.onemit;
		var fn = evs ? evs[evName] : null;

		if (fn) {
			fn.apply(targ, args);
			break;
		}
	} while (targ = targ.parent());

	if (onemit[evName])
		{ onemit[evName].apply(targ, args); }
}

var onevent = noop;

function config(newCfg) {
	onevent = newCfg.onevent || onevent;

	{
		if (newCfg.onemit)
			{ emitCfg(newCfg.onemit); }
	}

	
}

function bindEv(el, type, fn) {
	el[type] = fn;
}

function exec(fn, args, e, node, vm) {
	var out = fn.apply(vm, args.concat([e, node, vm, vm.data]));

	// should these respect out === false?
	vm.onevent(e, node, vm, vm.data, args);
	onevent.call(null, e, node, vm, vm.data, args);

	if (out === false) {
		e.preventDefault();
		e.stopPropagation();
	}
}

function handle(e) {
	var node = closestVNode(e.target);
	var vm = getVm(node);

	var evDef = e.currentTarget._node.attrs["on" + e.type], fn, args;

	if (isArr(evDef)) {
		fn = evDef[0];
		args = evDef.slice(1);
		exec(fn, args, e, node, vm);
	}
	else {
		for (var sel in evDef) {
			if (e.target.matches(sel)) {
				var evDef2 = evDef[sel];

				if (isArr(evDef2)) {
					fn = evDef2[0];
					args = evDef2.slice(1);
				}
				else {
					fn = evDef2;
					args = [];
				}

				exec(fn, args, e, node, vm);
			}
		}
	}
}

function patchEvent(node, name, nval, oval) {
	if (nval === oval)
		{ return; }

	var el = node.el;

	if (nval == null || isFunc(nval))
		{ bindEv(el, name, nval); }
	else if (oval == null)
		{ bindEv(el, name, handle); }
}

function remAttr(node, name, asProp) {
	if (name[0] === ".") {
		name = name.substr(1);
		asProp = true;
	}

	if (asProp)
		{ node.el[name] = ""; }
	else
		{ node.el.removeAttribute(name); }
}

// setAttr
// diff, ".", "on*", bool vals, skip _*, value/checked/selected selectedIndex
function setAttr(node, name, val, asProp, initial) {
	var el = node.el;

	if (val == null)
		{ !initial && remAttr(node, name, false); }		// will also removeAttr of style: null
	else if (node.ns != null)
		{ el.setAttribute(name, val); }
	else if (name === "class")
		{ el.className = val; }
	else if (name === "id" || typeof val === "boolean" || asProp)
		{ el[name] = val; }
	else if (name[0] === ".")
		{ el[name.substr(1)] = val; }
	else
		{ el.setAttribute(name, val); }
}

function patchAttrs(vnode, donor, initial) {
	var nattrs = vnode.attrs || emptyObj;
	var oattrs = donor.attrs || emptyObj;

	if (nattrs === oattrs) {
		
	}
	else {
		for (var key in nattrs) {
			var nval = nattrs[key];
			var isDyn = isDynProp(vnode.tag, key);
			var oval = isDyn ? vnode.el[key] : oattrs[key];

			if (nval === oval) {}
			else if (isStyleProp(key))
				{ patchStyle(vnode, donor); }
			else if (isSplProp(key)) {}
			else if (isEvProp(key))
				{ patchEvent(vnode, key, nval, oval); }
			else
				{ setAttr(vnode, key, nval, isDyn, initial); }
		}

		// TODO: bench style.cssText = "" vs removeAttribute("style")
		for (var key in oattrs) {
			!(key in nattrs) &&
			!isSplProp(key) &&
			remAttr(vnode, key, isDynProp(vnode.tag, key) || isEvProp(key));
		}
	}
}

function createView(view, data, key, opts) {
	if (view.type === VVIEW) {
		data	= view.data;
		key		= view.key;
		opts	= view.opts;
		view	= view.view;
	}

	return new ViewModel(view, data, key, opts);
}

//import { XML_NS, XLINK_NS } from './defineSvgElement';
function hydrateBody(vnode) {
	for (var i = 0; i < vnode.body.length; i++) {
		var vnode2 = vnode.body[i];
		var type2 = vnode2.type;

		// ELEMENT,TEXT,COMMENT
		if (type2 <= COMMENT)
			{ insertBefore(vnode.el, hydrate(vnode2)); }		// vnode.el.appendChild(hydrate(vnode2))
		else if (type2 === VVIEW) {
			var vm = createView(vnode2.view, vnode2.data, vnode2.key, vnode2.opts)._redraw(vnode, i, false);		// todo: handle new data updates
			type2 = vm.node.type;
			insertBefore(vnode.el, hydrate(vm.node));
		}
		else if (type2 === VMODEL) {
			var vm = vnode2.vm;
			vm._redraw(vnode, i);					// , false
			type2 = vm.node.type;
			insertBefore(vnode.el, vm.node.el);		// , hydrate(vm.node)
		}
	}
}

//  TODO: DRY this out. reusing normal patch here negatively affects V8's JIT
function hydrate(vnode, withEl) {
	if (vnode.el == null) {
		if (vnode.type === ELEMENT) {
			vnode.el = withEl || createElement(vnode.tag, vnode.ns);

		//	if (vnode.tag === "svg")
		//		vnode.el.setAttributeNS(XML_NS, 'xmlns:xlink', XLINK_NS);

			if (vnode.attrs != null)
				{ patchAttrs(vnode, emptyObj, true); }

			if ((vnode.flags & LAZY_LIST) === LAZY_LIST)	// vnode.body instanceof LazyList
				{ vnode.body.body(vnode); }

			if (isArr(vnode.body))
				{ hydrateBody(vnode); }
			else if (vnode.body != null && vnode.body !== "")
				{ vnode.el.textContent = vnode.body; }
		}
		else if (vnode.type === TEXT)
			{ vnode.el = withEl || createTextNode(vnode.body); }
		else if (vnode.type === COMMENT)
			{ vnode.el = withEl || createComment(vnode.body); }
	}

	vnode.el._node = vnode;

	return vnode.el;
}

// prevent GCC from inlining some large funcs (which negatively affects Chrome's JIT)
//window.syncChildren = syncChildren;
window.lisMove = lisMove;

function nextNode(node, body) {
	return body[node.idx + 1];
}

function prevNode(node, body) {
	return body[node.idx - 1];
}

function parentNode(node) {
	return node.parent;
}

var BREAK = 1;
var BREAK_ALL = 2;

function syncDir(advSib, advNode, insert, sibName, nodeName, invSibName, invNodeName, invInsert) {
	return function(node, parEl, body, state, convTest, lis) {
		var sibNode, tmpSib;

		if (state[sibName] != null) {
			// skip dom elements not created by domvm
			if ((sibNode = state[sibName]._node) == null) {
				state[sibName] = advSib(state[sibName]);
				return;
			}

			if (parentNode(sibNode) !== node) {
				tmpSib = advSib(state[sibName]);
				sibNode.vm != null ? sibNode.vm.unmount(true) : removeChild(parEl, state[sibName]);
				state[sibName] = tmpSib;
				return;
			}
		}

		if (state[nodeName] == convTest)
			{ return BREAK_ALL; }
		else if (state[nodeName].el == null) {
			insert(parEl, hydrate(state[nodeName]), state[sibName]);	// should lis be updated here?
			state[nodeName] = advNode(state[nodeName], body);		// also need to advance sib?
		}
		else if (state[nodeName].el === state[sibName]) {
			state[nodeName] = advNode(state[nodeName], body);
			state[sibName] = advSib(state[sibName]);
		}
		// head->tail or tail->head
		else if (!lis && sibNode === state[invNodeName]) {
			tmpSib = state[sibName];
			state[sibName] = advSib(tmpSib);
			invInsert(parEl, tmpSib, state[invSibName]);
			state[invSibName] = tmpSib;
		}
		else {
			if (lis && state[sibName] != null)
				{ return lisMove(advSib, advNode, insert, sibName, nodeName, parEl, body, sibNode, state); }

			return BREAK;
		}
	};
}

function lisMove(advSib, advNode, insert, sibName, nodeName, parEl, body, sibNode, state) {
	if (sibNode._lis) {
		insert(parEl, state[nodeName].el, state[sibName]);
		state[nodeName] = advNode(state[nodeName], body);
	}
	else {
		// find closest tomb
		var t = binaryFindLarger(sibNode.idx, state.tombs);
		sibNode._lis = true;
		var tmpSib = advSib(state[sibName]);
		insert(parEl, state[sibName], t != null ? body[state.tombs[t]].el : t);

		if (t == null)
			{ state.tombs.push(sibNode.idx); }
		else
			{ state.tombs.splice(t, 0, sibNode.idx); }

		state[sibName] = tmpSib;
	}
}

var syncLft = syncDir(nextSib, nextNode, insertBefore, "lftSib", "lftNode", "rgtSib", "rgtNode", insertAfter);
var syncRgt = syncDir(prevSib, prevNode, insertAfter, "rgtSib", "rgtNode", "lftSib", "lftNode", insertBefore);

function syncChildren(node, donor) {
	var obody	= donor.body,
		parEl	= node.el,
		body	= node.body,
		state = {
			lftNode:	body[0],
			rgtNode:	body[body.length - 1],
			lftSib:		((obody)[0] || emptyObj).el,
			rgtSib:		(obody[obody.length - 1] || emptyObj).el,
		};

	converge:
	while (1) {
//		from_left:
		while (1) {
			var l = syncLft(node, parEl, body, state, null, false);
			if (l === BREAK) { break; }
			if (l === BREAK_ALL) { break converge; }
		}

//		from_right:
		while (1) {
			var r = syncRgt(node, parEl, body, state, state.lftNode, false);
			if (r === BREAK) { break; }
			if (r === BREAK_ALL) { break converge; }
		}

		sortDOM(node, parEl, body, state);
		break;
	}
}

// TODO: also use the state.rgtSib and state.rgtNode bounds, plus reduce LIS range
function sortDOM(node, parEl, body, state) {
	var kids = Array.prototype.slice.call(parEl.childNodes);
	var domIdxs = [];

	for (var k = 0; k < kids.length; k++) {
		var n = kids[k]._node;

		if (n.parent === node)
			{ domIdxs.push(n.idx); }
	}

	// list of non-movable vnode indices (already in correct order in old dom)
	var tombs = longestIncreasingSubsequence(domIdxs).map(function (i) { return domIdxs[i]; });

	for (var i = 0; i < tombs.length; i++)
		{ body[tombs[i]]._lis = true; }

	state.tombs = tombs;

	while (1) {
		var r = syncLft(node, parEl, body, state, null, true);
		if (r === BREAK_ALL) { break; }
	}
}

function alreadyAdopted(vnode) {
	return vnode.el._node.parent !== vnode.parent;
}

function takeSeqIndex(n, obody, fromIdx) {
	return obody[fromIdx];
}

function findSeqThorough(n, obody, fromIdx) {		// pre-tested isView?
	for (; fromIdx < obody.length; fromIdx++) {
		var o = obody[fromIdx];

		if (o.vm != null) {
			// match by key & viewFn || vm
			if (n.type === VVIEW && o.vm.view === n.view && o.vm.key === n.key || n.type === VMODEL && o.vm === n.vm)
				{ return o; }
		}
		else if (!alreadyAdopted(o) && n.tag === o.tag && n.type === o.type && n.key === o.key && (n.flags & ~DEEP_REMOVE) === (o.flags & ~DEEP_REMOVE))
			{ return o; }
	}

	return null;
}

function findHashKeyed(n, obody, fromIdx) {
	return obody[obody._keys[n.key]];
}

/*
// list must be a sorted list of vnodes by key
function findBinKeyed(n, list) {
	var idx = binaryKeySearch(list, n.key);
	return idx > -1 ? list[idx] : null;
}
*/

// have it handle initial hydrate? !donor?
// types (and tags if ELEM) are assumed the same, and donor exists
function patch(vnode, donor) {
	fireHook(donor.hooks, "willRecycle", donor, vnode);

	var el = vnode.el = donor.el;

	var obody = donor.body;
	var nbody = vnode.body;

	el._node = vnode;

	// "" => ""
	if (vnode.type === TEXT && nbody !== obody) {
		el.nodeValue = nbody;
		return;
	}

	if (vnode.attrs != null || donor.attrs != null)
		{ patchAttrs(vnode, donor, false); }

	// patch events

	var oldIsArr = isArr(obody);
	var newIsArr = isArr(nbody);
	var lazyList = (vnode.flags & LAZY_LIST) === LAZY_LIST;

//	var nonEqNewBody = nbody != null && nbody !== obody;

	if (oldIsArr) {
		// [] => []
		if (newIsArr || lazyList)
			{ patchChildren(vnode, donor); }
		// [] => "" | null
		else if (nbody !== obody) {
			if (nbody != null)
				{ el.textContent = nbody; }
			else
				{ clearChildren(donor); }
		}
	}
	else {
		// "" | null => []
		if (newIsArr) {
			clearChildren(donor);
			hydrateBody(vnode);
		}
		// "" | null => "" | null
		else if (nbody !== obody) {
			if (el.firstChild)
				{ el.firstChild.nodeValue = nbody; }
			else
				{ el.textContent = nbody; }
		}
	}

	fireHook(donor.hooks, "didRecycle", donor, vnode);
}

// larger qtys of KEYED_LIST children will use binary search
//const SEQ_FAILS_MAX = 100;

// TODO: modify vtree matcher to work similar to dom reconciler for keyed from left -> from right -> head/tail -> binary
// fall back to binary if after failing nri - nli > SEQ_FAILS_MAX
// while-advance non-keyed fromIdx
// [] => []
function patchChildren(vnode, donor) {
	var nbody		= vnode.body,
		nlen		= nbody.length,
		obody		= donor.body,
		olen		= obody.length,
		isLazy		= (vnode.flags & LAZY_LIST) === LAZY_LIST,
		isFixed		= (vnode.flags & FIXED_BODY) === FIXED_BODY,
		isKeyed		= (vnode.flags & KEYED_LIST) === KEYED_LIST,
		domSync		= !isFixed && vnode.type === ELEMENT,
		doFind		= true,
		find		= (
			isKeyed ? findHashKeyed :				// keyed lists/lazyLists
			isFixed || isLazy ? takeSeqIndex :		// unkeyed lazyLists and FIXED_BODY
			findSeqThorough							// more complex stuff
		);

	if (isKeyed) {
		var keys = {};
		for (var i = 0; i < obody.length; i++)
			{ keys[obody[i].key] = i; }
		obody._keys = keys;
	}

	if (domSync && nlen === 0) {
		clearChildren(donor);
		if (isLazy)
			{ vnode.body = []; }	// nbody.tpl(all);
		return;
	}

	var donor2,
		node2,
		foundIdx,
		patched = 0,
		everNonseq = false,
		fromIdx = 0;		// first unrecycled node (search head)

	if (isLazy) {
		var fnode2 = {key: null};
		var nbodyNew = Array(nlen);
	}

	for (var i = 0; i < nlen; i++) {
		if (isLazy) {
			var remake = false;
			var diffRes = null;

			if (doFind) {
				if (isKeyed)
					{ fnode2.key = nbody.key(i); }

				donor2 = find(fnode2, obody, fromIdx);
			}

			if (donor2 != null) {
                foundIdx = donor2.idx;
				diffRes = nbody.diff(i, donor2);

				// diff returns same, so cheaply adopt vnode without patching
				if (diffRes === true) {
					node2 = donor2;
					node2.parent = vnode;
					node2.idx = i;
					node2._lis = false;
				}
				// diff returns new diffVals, so generate new vnode & patch
				else
					{ remake = true; }
			}
			else
				{ remake = true; }

			if (remake) {
				node2 = nbody.tpl(i);			// what if this is a VVIEW, VMODEL, injected element?
				preProc(node2, vnode, i);

				node2._diff = diffRes != null ? diffRes : nbody.diff(i);

				if (donor2 != null)
					{ patch(node2, donor2); }
			}
			else {
				// TODO: flag tmp FIXED_BODY on unchanged nodes?

				// domSync = true;		if any idx changes or new nodes added/removed
			}

			nbodyNew[i] = node2;
		}
		else {
			var node2 = nbody[i];
			var type2 = node2.type;

			// ELEMENT,TEXT,COMMENT
			if (type2 <= COMMENT) {
				if (donor2 = doFind && find(node2, obody, fromIdx)) {
					patch(node2, donor2);
					foundIdx = donor2.idx;
				}
			}
			else if (type2 === VVIEW) {
				if (donor2 = doFind && find(node2, obody, fromIdx)) {		// update/moveTo
					foundIdx = donor2.idx;
					var vm = donor2.vm._update(node2.data, vnode, i);		// withDOM
				}
				else
					{ var vm = createView(node2.view, node2.data, node2.key, node2.opts)._redraw(vnode, i, false); }	// createView, no dom (will be handled by sync below)

				type2 = vm.node.type;
			}
			else if (type2 === VMODEL) {
				// if the injected vm has never been rendered, this vm._update() serves as the
				// initial vtree creator, but must avoid hydrating (creating .el) because syncChildren()
				// which is responsible for mounting below (and optionally hydrating), tests .el presence
				// to determine if hydration & mounting are needed
				var withDOM = isHydrated(node2.vm);

				var vm = node2.vm._update(node2.data, vnode, i, withDOM);
				type2 = vm.node.type;
			}
		}

		// found donor & during a sequential search ...at search head
		if (!isKeyed && donor2 != null) {
			if (foundIdx === fromIdx) {
				// advance head
				fromIdx++;
				// if all old vnodes adopted and more exist, stop searching
				if (fromIdx === olen && nlen > olen) {
					// short-circuit find, allow loop just create/init rest
					donor2 = null;
					doFind = false;
				}
			}
			else
				{ everNonseq = true; }

			if (olen > 100 && everNonseq && ++patched % 10 === 0)
				{ while (fromIdx < olen && alreadyAdopted(obody[fromIdx]))
					{ fromIdx++; } }
		}
	}

	// replace List w/ new body
	if (isLazy)
		{ vnode.body = nbodyNew; }

	domSync && syncChildren(vnode, donor);
}

// view + key serve as the vm's unique identity
function ViewModel(view, data, key, opts) {
	var vm = this;

	vm.view = view;
	vm.data = data;
	vm.key = key;

	if (opts) {
		vm.opts = opts;
		vm.config(opts);
	}

	var out = isPlainObj(view) ? view : view.call(vm, vm, data, key, opts);

	if (isFunc(out))
		{ vm.render = out; }
	else {
		vm.render = out.render;
		vm.config(out);
	}

	// these must be wrapped here since they're debounced per view
	vm._redrawAsync = raft(function (_) { return vm.redraw(true); });
	vm._updateAsync = raft(function (newData) { return vm.update(newData, true); });

	vm.init && vm.init.call(vm, vm, vm.data, vm.key, opts);
}

var ViewModelProto = ViewModel.prototype = {
	constructor: ViewModel,

	_diff:	null,	// diff cache

	init:	null,
	view:	null,
	key:	null,
	data:	null,
	state:	null,
	api:	null,
	opts:	null,
	node:	null,
	hooks:	null,
	onevent: noop,
	refs:	null,
	render:	null,

	mount: mount,
	unmount: unmount,
	config: function(opts) {
		var t = this;

		if (opts.init)
			{ t.init = opts.init; }
		if (opts.diff)
			{ t.diff = opts.diff; }
		if (opts.onevent)
			{ t.onevent = opts.onevent; }

		// maybe invert assignment order?
		if (opts.hooks)
			{ t.hooks = assignObj(t.hooks || {}, opts.hooks); }

		{
			if (opts.onemit)
				{ t.onemit = assignObj(t.onemit || {}, opts.onemit); }
		}
	},
	parent: function() {
		return getVm(this.node.parent);
	},
	root: function() {
		var p = this.node;

		while (p.parent)
			{ p = p.parent; }

		return p.vm;
	},
	redraw: function(sync) {
		var vm = this;
		sync ? vm._redraw(null, null, isHydrated(vm)) : vm._redrawAsync();
		return vm;
	},
	update: function(newData, sync) {
		var vm = this;
		sync ? vm._update(newData, null, null, isHydrated(vm)) : vm._updateAsync(newData);
		return vm;
	},

	_update: updateSync,
	_redraw: redrawSync,
	_redrawAsync: null,
	_updateAsync: null,
};

function mount(el, isRoot) {
	var vm = this;

	if (isRoot) {
		clearChildren({el: el, flags: 0});

		vm._redraw(null, null, false);

		// if placeholder node doesnt match root tag
		if (el.nodeName.toLowerCase() !== vm.node.tag) {
			hydrate(vm.node);
			insertBefore(el.parentNode, vm.node.el, el);
			el.parentNode.removeChild(el);
		}
		else
			{ insertBefore(el.parentNode, hydrate(vm.node, el), el); }
	}
	else {
		vm._redraw(null, null);

		if (el)
			{ insertBefore(el, vm.node.el); }
	}

	if (el)
		{ drainDidHooks(vm); }

	return vm;
}

// asSub means this was called from a sub-routine, so don't drain did* hook queue
function unmount(asSub) {
	var vm = this;

	var node = vm.node;
	var parEl = node.el.parentNode;

	// edge bug: this could also be willRemove promise-delayed; should .then() or something to make sure hooks fire in order
	removeChild(parEl, node.el);

	if (!asSub)
		{ drainDidHooks(vm); }
}

function reParent(vm, vold, newParent, newIdx) {
	if (newParent != null) {
		newParent.body[newIdx] = vold;
		vold.idx = newIdx;
		vold.parent = newParent;
		vold._lis = false;
	}
	return vm;
}

function redrawSync(newParent, newIdx, withDOM) {
	var isRedrawRoot = newParent == null;
	var vm = this;
	var isMounted = vm.node && vm.node.el && vm.node.el.parentNode;

	var vold = vm.node, oldDiff, newDiff;

	if (vm.diff != null) {
		oldDiff = vm._diff;
		vm._diff = newDiff = vm.diff(vm, vm.data);

		if (vold != null) {
			var cmpFn = isArr(oldDiff) ? cmpArr : cmpObj;
			var isSame = oldDiff === newDiff || cmpFn(oldDiff, newDiff);

			if (isSame)
				{ return reParent(vm, vold, newParent, newIdx); }
		}
	}

	isMounted && fireHook(vm.hooks, "willRedraw", vm, vm.data);

	var vnew = vm.render.call(vm, vm, vm.data, oldDiff, newDiff);

	if (vnew === vold)
		{ return reParent(vm, vold, newParent, newIdx); }

	// todo: test result of willRedraw hooks before clearing refs
	vm.refs = null;

	// always assign vm key to root vnode (this is a de-opt)
	if (vm.key != null && vnew.key !== vm.key)
		{ vnew.key = vm.key; }

	vm.node = vnew;

	if (newParent) {
		preProc(vnew, newParent, newIdx, vm);
		newParent.body[newIdx] = vnew;
	}
	else if (vold && vold.parent) {
		preProc(vnew, vold.parent, vold.idx, vm);
		vold.parent.body[vold.idx] = vnew;
	}
	else
		{ preProc(vnew, null, null, vm); }

	if (withDOM !== false) {
		if (vold) {
			// root node replacement
			if (vold.tag !== vnew.tag || vold.key !== vnew.key) {
				// hack to prevent the replacement from triggering mount/unmount
				vold.vm = vnew.vm = null;

				var parEl = vold.el.parentNode;
				var refEl = nextSib(vold.el);
				removeChild(parEl, vold.el);
				insertBefore(parEl, hydrate(vnew), refEl);

				// another hack that allows any higher-level syncChildren to set
				// reconciliation bounds using a live node
				vold.el = vnew.el;

				// restore
				vnew.vm = vm;
			}
			else
				{ patch(vnew, vold); }
		}
		else
			{ hydrate(vnew); }
	}

	isMounted && fireHook(vm.hooks, "didRedraw", vm, vm.data);

	if (isRedrawRoot && isMounted)
		{ drainDidHooks(vm); }

	return vm;
}

// this also doubles as moveTo
// TODO? @withRedraw (prevent redraw from firing)
function updateSync(newData, newParent, newIdx, withDOM) {
	var vm = this;

	if (newData != null) {
		if (vm.data !== newData) {
			fireHook(vm.hooks, "willUpdate", vm, newData);
			vm.data = newData;

			
		}
	}

	return vm._redraw(newParent, newIdx, withDOM);
}

function defineElement(tag, arg1, arg2, flags) {
	var attrs, body;

	if (arg2 == null) {
		if (isPlainObj(arg1))
			{ attrs = arg1; }
		else
			{ body = arg1; }
	}
	else {
		attrs = arg1;
		body = arg2;
	}

	return initElementNode(tag, attrs, body, flags);
}

//export const XML_NS = "http://www.w3.org/2000/xmlns/";
var SVG_NS = "http://www.w3.org/2000/svg";

function defineSvgElement(tag, arg1, arg2, flags) {
	var n = defineElement(tag, arg1, arg2, flags);
	n.ns = SVG_NS;
	return n;
}

function defineComment(body) {
	var node = new VNode;
	node.type = COMMENT;
	node.body = body;
	return node;
}

// placeholder for declared views
function VView(view, data, key, opts) {
	this.view = view;
	this.data = data;
	this.key = key;
	this.opts = opts;
}

VView.prototype = {
	constructor: VView,

	type: VVIEW,
	view: null,
	data: null,
	key: null,
	opts: null,
};

function defineView(view, data, key, opts) {
	return new VView(view, data, key, opts);
}

// placeholder for injected ViewModels
function VModel(vm) {
	this.vm = vm;
}

VModel.prototype = {
	constructor: VModel,

	type: VMODEL,
	vm: null,
};

function injectView(vm) {
//	if (vm.node == null)
//		vm._redraw(null, null, false);

//	return vm.node;

	return new VModel(vm);
}

function injectElement(el) {
	var node = new VNode;
	node.type = ELEMENT;
	node.el = node.key = el;
	return node;
}

function lazyList(items, cfg) {
	var len = items.length;

	var self = {
		items: items,
		length: len,
		// defaults to returning item identity (or position?)
		key: function(i) {
			return cfg.key(items[i], i);
		},
		// default returns 0?
		diff: function(i, donor) {
			var newVals = cfg.diff(items[i], i);
			if (donor == null)
				{ return newVals; }
			var oldVals = donor._diff;
			var same = newVals === oldVals || isArr(oldVals) ? cmpArr(newVals, oldVals) : cmpObj(newVals, oldVals);
			return same || newVals;
		},
		tpl: function(i) {
			return cfg.tpl(items[i], i);
		},
		map: function(tpl) {
			cfg.tpl = tpl;
			return self;
		},
		body: function(vnode) {
			var nbody = Array(len);

			for (var i = 0; i < len; i++) {
				var vnode2 = self.tpl(i);

			//	if ((vnode.flags & KEYED_LIST) === KEYED_LIST && self. != null)
			//		vnode2.key = getKey(item);

				vnode2._diff = self.diff(i);			// holds oldVals for cmp

				nbody[i] = vnode2;

				// run preproc pass (should this be just preProc in above loop?) bench
				preProc(vnode2, vnode, i);
			}

			// replace List with generated body
			vnode.body = nbody;
		}
	};

	return self;
}

var nano = {
	config: config,

	ViewModel: ViewModel,
	VNode: VNode,

	createView: createView,

	defineElement: defineElement,
	defineSvgElement: defineSvgElement,
	defineText: defineText,
	defineComment: defineComment,
	defineView: defineView,

	injectView: injectView,
	injectElement: injectElement,

	lazyList: lazyList,

	FIXED_BODY: FIXED_BODY,
	DEEP_REMOVE: DEEP_REMOVE,
	KEYED_LIST: KEYED_LIST,
	LAZY_LIST: LAZY_LIST,
};

function protoPatch(n, doRepaint) {
	patch$1(this, n, doRepaint);
}

// newNode can be either {class: style: } or full new VNode
// will/didPatch hooks?
function patch$1(o, n, doRepaint) {
	if (n.type != null) {
		// no full patching of view roots, just use redraw!
		if (o.vm != null)
			{ return; }

		preProc(n, o.parent, o.idx, null);
		o.parent.body[o.idx] = n;
		patch(n, o);
		doRepaint && repaint(n);
		drainDidHooks(getVm(n));
	}
	else {
		// TODO: re-establish refs

		// shallow-clone target
		var donor = Object.create(o);
		// fixate orig attrs
		donor.attrs = assignObj({}, o.attrs);
		// assign new attrs into live targ node
		var oattrs = assignObj(o.attrs, n);
		// prepend any fixed shorthand class
		if (o._class != null) {
			var aclass = oattrs.class;
			oattrs.class = aclass != null && aclass !== "" ? o._class + " " + aclass : o._class;
		}

		patchAttrs(o, donor);

		doRepaint && repaint(o);
	}
}

VNodeProto.patch = protoPatch;

function nextSubVms(n, accum) {
	var body = n.body;

	if (isArr(body)) {
		for (var i = 0; i < body.length; i++) {
			var n2 = body[i];

			if (n2.vm != null)
				{ accum.push(n2.vm); }
			else
				{ nextSubVms(n2, accum); }
		}
	}

	return accum;
}

function defineElementSpread(tag) {
	var args = arguments;
	var len = args.length;
	var body, attrs;

	if (len > 1) {
		var bodyIdx = 1;

		if (isPlainObj(args[1])) {
			attrs = args[1];
			bodyIdx = 2;
		}

		if (len === bodyIdx + 1 && (isVal(args[bodyIdx]) || isArr(args[bodyIdx]) || attrs && (attrs._flags & LAZY_LIST) === LAZY_LIST))
			{ body = args[bodyIdx]; }
		else
			{ body = sliceArgs(args, bodyIdx); }
	}

	return initElementNode(tag, attrs, body);
}

function defineSvgElementSpread() {
	var n = defineElementSpread.apply(null, arguments);
	n.ns = SVG_NS;
	return n;
}

ViewModelProto.emit = emit;
ViewModelProto.onemit = null;

ViewModelProto.body = function() {
	return nextSubVms(this.node, []);
};

nano.defineElementSpread = defineElementSpread;
nano.defineSvgElementSpread = defineSvgElementSpread;

return nano;

})));
//# sourceMappingURL=domvm.micro.js.map


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var color_1 = __webpack_require__(36);
var dom_1 = __webpack_require__(0);
var en_1 = __webpack_require__(37);
function getPicker(colorpicker, pickerState, handlers) {
    var rgb = color_1.HSVtoRGB(pickerState.hsv);
    pickerState.background = color_1.RGBToHex(rgb);
    var currentBackground = color_1.RGBToHex(color_1.HSVtoRGB({ h: pickerState.hsv.h, s: 1, v: 1 }));
    var root = colorpicker.getRootView();
    var box = root.refs
        ? root.refs.picker_palette.el.getBoundingClientRect()
        : { height: 200, width: 218, x: 0, y: 0 };
    var height = box.height - 2;
    var width = box.width - 2;
    var gripTop = height - pickerState.hsv.v * height - 4;
    var gripLeft = pickerState.hsv.s * width - 4;
    var rangeWidth = box.width - 6;
    var rangeGripLeft = rangeWidth - ((360 - pickerState.hsv.h) / 360) * rangeWidth;
    var inputValue = color_1.isHex(pickerState.customHex)
        ? pickerState.customHex.replace("#", "")
        : pickerState.background.replace("#", "");
    return dom_1.el(".dhx_colorpicker-picker", {}, [
        dom_1.el(".dhx_colorpicker-picker__palette", {
            style: {
                height: 132,
                background: currentBackground,
            },
            onmousedown: handlers.mousedown,
            ontouchstart: handlers.touchstart,
            dhx_id: "picker_palette",
            _ref: "picker_palette",
        }, [
            dom_1.el(".dhx_palette_grip", {
                style: {
                    top: gripTop,
                    left: gripLeft,
                },
                tabindex: 0,
            }),
        ]),
        dom_1.el(".dhx_colorpicker-hue-range", {
            style: { height: 16 },
            onmousedown: handlers.mousedown,
            ontouchstart: handlers.touchstart,
            dhx_id: "hue_range",
            _key: "hue_range",
            _ref: "hue_range",
        }, [
            dom_1.el(".dhx_colorpicker-hue-range__grip", {
                style: { left: rangeGripLeft },
                tabindex: 0,
            }),
        ]),
        dom_1.el(".dhx_colorpicker-value", [
            dom_1.el(".dhx_colorpicker-value__color", {
                style: { background: pickerState.background },
            }),
            dom_1.el(".dhx_colorpicker-value__input__wrapper", [
                dom_1.el("input", {
                    class: "dhx_colorpicker-value__input",
                    value: inputValue,
                    oninput: handlers.oninput,
                    maxlength: "7",
                    _key: "hex_input",
                    "aria-label": "type color in HEX format",
                }),
            ]),
        ]),
        dom_1.el(".dhx_colorpicker-picker__buttons", [
            !colorpicker.config.pickerOnly &&
                dom_1.el("button", {
                    class: "dhx_button dhx_button--size_medium dhx_button--view_link dhx_button--color_primary",
                    onclick: [handlers.buttonsClick, "cancel"],
                }, en_1.default.cancel),
            dom_1.el("button", {
                class: "dhx_button dhx_button--size_medium dhx_button--view_flat dhx_button--color_primary",
                onclick: [handlers.buttonsClick, "apply"],
            }, en_1.default.select),
        ]),
    ]);
}
exports.getPicker = getPicker;
function calculatePaletteGrip(rootView, top, left) {
    var paletteRect = rootView.refs.picker_palette.el.getBoundingClientRect();
    var bottom = paletteRect.height;
    var right = paletteRect.width;
    top = top < 0 ? 0 : top > bottom ? bottom : top;
    left = left < 0 ? 0 : left > right ? right : left;
    var pLeft = Math.round(left / (right / 100));
    var pTop = 100 - Math.round(top / (bottom / 100));
    this._pickerState.hsv.s = pLeft / 100;
    this._pickerState.hsv.v = pTop / 100;
}
exports.calculatePaletteGrip = calculatePaletteGrip;


/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function calculatePaletteGrip(clientRect, top, left) {
    var bottom = clientRect.height;
    var right = clientRect.width;
    top = top < 0 ? 0 : top > bottom ? bottom : top;
    left = left < 0 ? 0 : left > right ? right : left;
    var pLeft = Math.round(left / (right / 100));
    var pTop = 100 - Math.round(top / (bottom / 100));
    return {
        s: pLeft / 100,
        v: pTop / 100,
    };
}
exports.calculatePaletteGrip = calculatePaletteGrip;
function calculateRangeGrip(clientRect, left) {
    var right = clientRect.width;
    left = left < 0 ? 0 : left > right ? right : left;
    return {
        h: Math.round(360 * (left / right)),
        rangeLeft: left,
    };
}
exports.calculateRangeGrip = calculateRangeGrip;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = __webpack_require__(16);
var types_1 = __webpack_require__(15);
var Loader = /** @class */ (function () {
    function Loader(parent, changes) {
        this._parent = parent;
        this._changes = changes; // todo: [dirty] mutation
    }
    Loader.prototype.load = function (url, driver) {
        var _this = this;
        // TODO: change way for checking lazyLoad
        if (url.config && !this._parent.events.fire(types_1.DataEvents.beforeLazyLoad, [])) {
            return;
        }
        return (this._parent.loadData = url
            .load()
            .then(function (data) {
            if (data) {
                return _this.parse(data, driver);
            }
            else {
                return [];
            }
        })
            .catch(function (error) {
            _this._parent.events.fire(types_1.DataEvents.loadError, [error]);
        }));
    };
    Loader.prototype.parse = function (data, driver) {
        var _this = this;
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        if (driver === "json" && !helpers_1.hasJsonOrArrayStructure(data)) {
            this._parent.events.fire(types_1.DataEvents.loadError, ["Uncaught SyntaxError: Unexpected end of input"]);
        }
        driver = helpers_1.toDataDriver(driver);
        data = driver.toJsonArray(data);
        if (!(data instanceof Array)) {
            var totalCount = data.total_count - 1;
            var from_1 = data.from;
            data = data.data;
            if (this._parent.getLength() === 0) {
                var newData = [];
                for (var i = 0, j = 0; i <= totalCount; i++) {
                    if (i >= from_1 && i <= from_1 + data.length - 1) {
                        newData.push(data[j]);
                        j++;
                    }
                    else {
                        newData.push({ $empty: true });
                    }
                }
                data = newData;
            }
            else {
                data.forEach(function (newItem, i) {
                    var index = from_1 + i;
                    var oldId = _this._parent.getId(index);
                    if (oldId) {
                        var emptyItem = _this._parent.getItem(oldId);
                        if (emptyItem && emptyItem.$empty) {
                            _this._parent.changeId(oldId, newItem.id, true);
                            _this._parent.update(newItem.id, __assign(__assign({}, newItem), { $empty: undefined }), true);
                        }
                    }
                    else {
                        helpers_1.dhxWarning("item not found");
                    }
                });
                this._parent.events.fire(types_1.DataEvents.afterLazyLoad, [from_1, data.length]);
                this._parent.events.fire(types_1.DataEvents.change);
                return data;
            }
        }
        if (this._parent.getInitialData()) {
            this._parent.removeAll();
        }
        this._parent.$parse(data);
        return data;
    };
    Loader.prototype.save = function (url) {
        var _this = this;
        var _loop_1 = function (el) {
            if (el.saving || el.pending) {
                helpers_1.dhxWarning("item is saving");
            }
            else {
                var prevEl_1 = this_1._findPrevState(el.id);
                if (prevEl_1 && prevEl_1.saving) {
                    var pending = new Promise(function (res, rej) {
                        prevEl_1.promise
                            .then(function () {
                            el.pending = false;
                            res(_this._setPromise(el, url));
                        })
                            .catch(function (err) {
                            _this._removeFromOrder(prevEl_1);
                            _this._setPromise(el, url);
                            helpers_1.dhxWarning(err);
                            rej(err);
                        });
                    });
                    this_1._addToChain(pending);
                    el.pending = true;
                }
                else {
                    this_1._setPromise(el, url);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var el = _a[_i];
            _loop_1(el);
        }
        if (this._changes.order.length) {
            this._parent.saveData.then(function () {
                _this._saving = false;
            });
        }
    };
    Loader.prototype.updateChanges = function (changes) {
        this._changes = changes;
    };
    Loader.prototype._setPromise = function (el, url) {
        var _this = this;
        var status;
        switch (el.status) {
            case "remove":
                status = "delete";
                break;
            case "add":
                status = "insert";
                break;
            default:
                status = el.status;
                break;
        }
        el.promise = url.save(el.obj, status);
        el.promise
            .then(function () {
            _this._removeFromOrder(el);
        })
            .catch(function (err) {
            el.saving = false;
            el.error = true;
            helpers_1.dhxError(err);
        });
        el.saving = true;
        this._saving = true;
        this._addToChain(el.promise);
        return el.promise;
    };
    Loader.prototype._addToChain = function (promise) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        if (this._parent.saveData && this._saving) {
            this._parent.saveData = this._parent.saveData.then(function () { return promise; });
        }
        else {
            this._parent.saveData = promise;
        }
    };
    Loader.prototype._findPrevState = function (id) {
        for (var _i = 0, _a = this._changes.order; _i < _a.length; _i++) {
            var el = _a[_i];
            if (el.id === id) {
                return el;
            }
        }
        return null;
    };
    Loader.prototype._removeFromOrder = function (el) {
        this._changes.order = this._changes.order.filter(function (item) { return !helpers_1.isEqualObj(item, el); });
    };
    return Loader;
}());
exports.Loader = Loader;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xml_1 = __webpack_require__(97);
var ARRAY_NAME = "items";
var ITEM_NAME = "item";
// convert xml tag to js object, all subtags and attributes are mapped to the properties of result object
function tagToObject(tag, initialObj) {
    initialObj = initialObj || {};
    // map attributes
    var a = tag.attributes;
    if (a && a.length) {
        for (var i = 0; i < a.length; i++) {
            initialObj[a[i].name] = a[i].value;
        }
    }
    // map subtags
    var b = tag.childNodes;
    for (var i = 0; i < b.length; i++) {
        if (b[i].nodeType === 1) {
            var name_1 = b[i].tagName;
            if (initialObj[name_1]) {
                if (typeof initialObj[name_1].push !== "function") {
                    initialObj[name_1] = [initialObj[name_1]];
                }
                initialObj[name_1].push(tagToObject(b[i], {}));
            }
            else {
                initialObj[name_1] = tagToObject(b[i], {}); // sub-object for complex subtags
            }
        }
    }
    return initialObj;
}
var XMLDriver = /** @class */ (function () {
    function XMLDriver() {
    }
    XMLDriver.prototype.toJsonArray = function (data) {
        return this.getRows(data);
    };
    XMLDriver.prototype.toJsonObject = function (data) {
        var doc;
        if (typeof data === "string") {
            doc = this._fromString(data);
        }
        return tagToObject(doc);
    };
    XMLDriver.prototype.serialize = function (data) {
        return xml_1.jsonToXML(data);
    };
    XMLDriver.prototype.getFields = function (row) {
        return row;
    };
    XMLDriver.prototype.getRows = function (data) {
        if (typeof data === "string") {
            data = this._fromString(data);
        }
        if (data) {
            var childNodes = data.childNodes && data.childNodes[0] && data.childNodes[0].childNodes;
            if (!childNodes || !childNodes.length) {
                return null;
            }
            return this._getRows(childNodes);
        }
        return [];
    };
    XMLDriver.prototype._getRows = function (nodes) {
        var result = [];
        for (var i = 0; i < nodes.length; i++) {
            if (nodes[i].tagName === ITEM_NAME) {
                result.push(this._nodeToJS(nodes[i]));
            }
        }
        return result;
    };
    XMLDriver.prototype._fromString = function (data) {
        try {
            return new DOMParser().parseFromString(data, "text/xml");
        }
        catch (_a) {
            return null;
        }
    };
    XMLDriver.prototype._nodeToJS = function (node) {
        var result = {};
        if (this._haveAttrs(node)) {
            var attrs = node.attributes;
            for (var i = 0; i < attrs.length; i++) {
                var _a = attrs[i], name_2 = _a.name, value = _a.value;
                result[name_2] = this._toType(value);
            }
        }
        if (node.nodeType === 3) {
            result.value = result.value || this._toType(node.textContent);
            return result;
        }
        var childNodes = node.childNodes;
        if (childNodes) {
            for (var i = 0; i < childNodes.length; i++) {
                var subNode = childNodes[i];
                var tag = subNode.tagName;
                if (!tag) {
                    continue;
                }
                if (tag === ARRAY_NAME && subNode.childNodes) {
                    result[tag] = this._getRows(subNode.childNodes);
                }
                else {
                    if (this._haveAttrs(subNode)) {
                        result[tag] = this._nodeToJS(subNode);
                    }
                    else {
                        result[tag] = this._toType(subNode.textContent);
                    }
                }
            }
        }
        return result;
    };
    XMLDriver.prototype._toType = function (val) {
        if (val === "false" || val === "true") {
            return val === "true";
        }
        if (!isNaN(val)) {
            return Number(val);
        }
        return val;
    };
    XMLDriver.prototype._haveAttrs = function (node) {
        return node.attributes && node.attributes.length;
    };
    return XMLDriver;
}());
exports.XMLDriver = XMLDriver;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var INDENT_STEP = 4;
function ws(count) {
    return " ".repeat(count);
}
function itemToXML(item, indent) {
    if (indent === void 0) { indent = INDENT_STEP; }
    var result = ws(indent) + "<item>\n";
    for (var key in item) {
        if (Array.isArray(item[key])) {
            result += ws(indent + INDENT_STEP) + ("<" + key + ">\n");
            result +=
                item[key].map(function (subItem) { return itemToXML(subItem, indent + INDENT_STEP * 2); }).join("\n") +
                    "\n";
            result += ws(indent + INDENT_STEP) + ("</" + key + ">\n");
        }
        else {
            result += ws(indent + INDENT_STEP) + ("<" + key + ">" + item[key] + "</" + key + ">\n");
        }
    }
    result += ws(indent) + "</item>";
    return result;
}
function jsonToXML(data, root) {
    if (root === void 0) { root = "root"; }
    var result = "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<" + root + ">";
    for (var i = 0; i < data.length; i++) {
        result += "\n" + itemToXML(data[i]);
    }
    return result + ("\n</" + root + ">");
}
exports.jsonToXML = jsonToXML;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var helpers_1 = __webpack_require__(16);
var Sort = /** @class */ (function () {
    function Sort() {
    }
    Sort.prototype.sort = function (array, by, perm) {
        this._createSorter(by);
        if (perm === by)
            by = null;
        if (perm || by)
            this._sort(array, perm, by);
    };
    Sort.prototype._createSorter = function (by) {
        var _this = this;
        if (by && !by.rule) {
            by.rule = function (a, b) {
                var aa = _this._checkVal(by.as, a[by.by]);
                var bb = _this._checkVal(by.as, b[by.by]);
                // [TODO] why we need naturalCompare
                return helpers_1.naturalCompare(aa.toString(), bb.toString());
            };
        }
    };
    Sort.prototype._checkVal = function (method, val) {
        return method ? method.call(this, val) : val;
    };
    Sort.prototype._sort = function (arr, conf, conf2) {
        var _this = this;
        var dir = {
            asc: 1,
            desc: -1,
        };
        return arr.sort(function (a, b) {
            var t = 0;
            if (conf)
                t = conf.rule.call(_this, a, b) * (dir[conf.dir] || dir.asc);
            if (t === 0 && conf2)
                t = conf2.rule.call(_this, a, b) * (dir[conf2.dir] || dir.asc);
            return t;
        });
    };
    return Sort;
}());
exports.Sort = Sort;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var datacollection_1 = __webpack_require__(51);
var dataproxy_1 = __webpack_require__(23);
var helpers_1 = __webpack_require__(16);
var types_1 = __webpack_require__(15);
function addToOrder(store, obj, parent, index) {
    if (index !== undefined && index !== -1 && store[parent] && store[parent][index]) {
        store[parent].splice(index, 0, obj);
    }
    else {
        if (!store[parent]) {
            store[parent] = [];
        }
        store[parent].push(obj);
    }
}
var TreeCollection = /** @class */ (function (_super) {
    __extends(TreeCollection, _super);
    function TreeCollection(config, events) {
        var _a;
        var _this = _super.call(this, config, events) || this;
        _this._childs = {};
        var root = (_this._root = (config && config.rootId) || "_ROOT_" + core_1.uid());
        _this._childs = (_a = {}, _a[root] = [], _a);
        _this._initChilds = null;
        return _this;
    }
    TreeCollection.prototype.add = function (newItem, index, parent) {
        var _this = this;
        if (index === void 0) { index = -1; }
        if (parent === void 0) { parent = this._root; }
        if (!this.events.fire(types_1.DataEvents.beforeAdd, [newItem])) {
            return;
        }
        if (typeof newItem !== "object") {
            newItem = {
                value: newItem,
            };
        }
        if (Array.isArray(newItem)) {
            return newItem.map(function (element, key) {
                return _this._add(element, index, parent, key);
            });
        }
        else {
            return this._add(newItem, index, parent);
        }
    };
    TreeCollection.prototype.getRoot = function () {
        return this._root;
    };
    TreeCollection.prototype.getParent = function (id, asObj) {
        if (asObj === void 0) { asObj = false; }
        if (!this._pull[id]) {
            return null;
        }
        var parent = this._pull[id].parent;
        return asObj ? this._pull[parent] : parent;
    };
    TreeCollection.prototype.getItems = function (id) {
        if (this._childs && this._childs[id]) {
            return this._childs[id];
        }
        return [];
    };
    TreeCollection.prototype.getLength = function (id) {
        if (id === void 0) { id = this._root; }
        if (!this._childs[id]) {
            return null;
        }
        return this._childs[id].length;
    };
    TreeCollection.prototype.removeAll = function (id) {
        var _a;
        if (!id) {
            _super.prototype.removeAll.call(this);
            var root = this._root;
            this._initChilds = null;
            this._childs = (_a = {}, _a[root] = [], _a);
        }
        else if (this._childs[id]) {
            var childs = __spreadArrays(this._childs[id]);
            for (var _i = 0, childs_1 = childs; _i < childs_1.length; _i++) {
                var child = childs_1[_i];
                this.remove(child.id);
            }
        }
    };
    TreeCollection.prototype.getIndex = function (id) {
        var parent = this.getParent(id);
        if (!parent || !this._childs[parent]) {
            return -1;
        }
        return core_1.findIndex(this._childs[parent], function (item) { return item.id === id; });
    };
    TreeCollection.prototype.sort = function (rule) {
        var _this = this;
        if (!rule) {
            this._childs = {};
            // [dirty]
            this._parse_data(Object.keys(this._pull).map(function (key) { return _this._pull[key]; }));
            if (this._filters)
                this.filter(this._filters.filters, this._filters.config);
        }
        else {
            for (var key in this._childs) {
                this._sort.sort(this._childs[key], rule);
            }
            if (this._initChilds && Object.keys(this._initChilds).length) {
                for (var key in this._initChilds) {
                    this._sort.sort(this._initChilds[key], rule);
                }
            }
        }
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.filter = function (rule, config) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (!rule) {
            this.restoreOrder();
            return;
        }
        if (!this._initChilds) {
            this._initChilds = this._childs;
        }
        config.type = config.type || types_1.TreeFilterType.all;
        this._filters = {
            filters: {},
            config: config,
        };
        if (typeof rule !== "function") {
            if (rule["by"]) {
                this._filters.filters[rule.by] = rule;
            }
            else {
                for (var compare in rule) {
                    this._filters.filters[compare] = rule[compare];
                }
            }
        }
        else {
            this._filters.filters = rule;
        }
        var newChilds = {};
        this._recursiveFilter(this._filters.filters, config, this._root, 0, newChilds);
        Object.keys(newChilds).forEach(function (key) {
            var parentId = _this.getParent(key);
            var current = _this.getItem(key);
            while (parentId) {
                if (!newChilds[parentId]) {
                    newChilds[parentId] = [];
                }
                if (current && !newChilds[parentId].find(function (x) { return x.id === current.id; })) {
                    newChilds[parentId].push(current);
                }
                current = _this.getItem(parentId);
                parentId = _this.getParent(parentId);
            }
        });
        this._childs = newChilds;
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.restoreOrder = function () {
        if (this._initChilds) {
            this._childs = this._initChilds;
            this._initChilds = null;
        }
        this.events.fire(types_1.DataEvents.change);
    };
    TreeCollection.prototype.copy = function (id, index, target, targetId) {
        var _this = this;
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._copy(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._copy(id, index, target, targetId);
        }
    };
    TreeCollection.prototype.move = function (id, index, target, targetId) {
        var _this = this;
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (id instanceof Array) {
            return id.map(function (elementId, key) {
                return _this._move(elementId, index, target, targetId, key);
            });
        }
        else {
            return this._move(id, index, target, targetId);
        }
    };
    TreeCollection.prototype.forEach = function (callback, parent, level) {
        if (parent === void 0) { parent = this._root; }
        if (level === void 0) { level = Infinity; }
        if (!this.haveItems(parent) || level < 1) {
            return;
        }
        var array = this._childs[parent];
        for (var i = 0; i < array.length; i++) {
            callback.call(this, array[i], i, array);
            if (this.haveItems(array[i].id)) {
                this.forEach(callback, array[i].id, --level);
            }
        }
    };
    TreeCollection.prototype.eachChild = function (id, callback, direct, checkItem) {
        if (direct === void 0) { direct = true; }
        if (checkItem === void 0) { checkItem = function () { return true; }; }
        if (!this.haveItems(id)) {
            return;
        }
        for (var i = 0; i < this._childs[id].length; i++) {
            callback.call(this, this._childs[id][i], i);
            if (direct && checkItem(this._childs[id][i])) {
                this.eachChild(this._childs[id][i].id, callback, direct, checkItem);
            }
        }
    };
    TreeCollection.prototype.getNearId = function (id) {
        return id; // for selection
    };
    TreeCollection.prototype.loadItems = function (id, driver) {
        var _this = this;
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        var url = this.config.autoload + "?id=" + id;
        var proxy = new dataproxy_1.DataProxy(url);
        proxy.load().then(function (data) {
            driver = helpers_1.toDataDriver(driver);
            data = driver.toJsonArray(data);
            _this._parse_data(data, id);
            _this.events.fire(types_1.DataEvents.change);
        });
    };
    TreeCollection.prototype.refreshItems = function (id, driver) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        this.removeAll(id);
        this.loadItems(id, driver);
    };
    TreeCollection.prototype.eachParent = function (id, callback, self) {
        if (self === void 0) { self = false; }
        var item = this.getItem(id);
        if (!item) {
            return;
        }
        if (self) {
            callback.call(this, item);
        }
        if (item.parent === this._root) {
            return;
        }
        var parent = this.getItem(item.parent);
        callback.call(this, parent);
        this.eachParent(item.parent, callback);
    };
    TreeCollection.prototype.haveItems = function (id) {
        return id in this._childs;
    };
    TreeCollection.prototype.canCopy = function (id, target) {
        if (id === target) {
            return false;
        }
        var canCopy = true;
        this.eachParent(target, function (item) { return (item.id === id ? (canCopy = false) : null); }); // locate return string
        return canCopy;
    };
    TreeCollection.prototype.serialize = function (driver, checkItem) {
        if (driver === void 0) { driver = types_1.DataDriver.json; }
        var data = this._serialize(this._root, checkItem);
        var dataDriver = helpers_1.toDataDriver(driver);
        if (dataDriver) {
            return dataDriver.serialize(data);
        }
    };
    TreeCollection.prototype.getId = function (index, parent) {
        if (parent === void 0) { parent = this._root; }
        if (!this._childs[parent] || !this._childs[parent][index]) {
            return;
        }
        return this._childs[parent][index].id;
    };
    // Non public API from suite_6.4
    TreeCollection.prototype.map = function (callback, parent, direct) {
        if (parent === void 0) { parent = this._root; }
        if (direct === void 0) { direct = true; }
        var result = [];
        if (!this.haveItems(parent)) {
            return result;
        }
        for (var i = 0; i < this._childs[parent].length; i++) {
            result.push(callback.call(this, this._childs[parent][i], i, this._childs));
            if (direct) {
                var childResult = this.map(callback, this._childs[parent][i].id, direct);
                result = result.concat(childResult);
            }
        }
        return result;
    };
    TreeCollection.prototype.getRawData = function (from, to, order, mode, parent) {
        parent = parent || this._root;
        var out;
        if (!this._childs[parent])
            return [];
        if (parent === this._root)
            out = _super.prototype.getRawData.call(this, from, to, this._childs[parent]);
        else
            out = this._childs[parent];
        if (mode === 2) {
            return this.flatten(out);
        }
        return out;
    };
    TreeCollection.prototype.flatten = function (input) {
        var _this = this;
        var out = [];
        input.forEach(function (a) {
            out.push(a);
            var kids = _this._childs[a.id];
            if (kids && a.$opened) {
                out = out.concat(_this.flatten(kids));
            }
        });
        return out;
    };
    TreeCollection.prototype._add = function (newItem, index, parent, key) {
        if (index === void 0) { index = -1; }
        if (parent === void 0) { parent = this._root; }
        newItem.parent = newItem.parent ? newItem.parent.toString() : parent;
        if (key > 0 && index !== -1) {
            index = index + 1;
        }
        var id = _super.prototype._add.call(this, newItem, index);
        if (Array.isArray(newItem.items)) {
            for (var _i = 0, _a = newItem.items; _i < _a.length; _i++) {
                var item = _a[_i];
                this.add(item, -1, newItem.id);
            }
        }
        return id;
    };
    TreeCollection.prototype._copy = function (id, index, target, targetId, key) {
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (!this.exists(id)) {
            return null;
        }
        var currentChilds = this._childs[id];
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target === this && !this.canCopy(id, targetId)) {
            return null;
        }
        var itemCopy = helpers_1.copyWithoutInner(this.getItem(id), { items: true });
        if (target.exists(id)) {
            itemCopy.id = core_1.uid();
        }
        if (!helpers_1.isTreeCollection(target)) {
            target.add(itemCopy, index);
            return;
        }
        if (this.exists(id)) {
            itemCopy.parent = targetId;
            if (target !== this && targetId === this._root) {
                itemCopy.parent = target.getRoot();
            }
            target.add(itemCopy, index);
            id = itemCopy.id;
        }
        if (currentChilds) {
            for (var _i = 0, currentChilds_1 = currentChilds; _i < currentChilds_1.length; _i++) {
                var child = currentChilds_1[_i];
                var childId = child.id;
                var childIndex = this.getIndex(childId);
                if (typeof id === "string") {
                    this.copy(childId, childIndex, target, id);
                }
            }
        }
        return id;
    };
    TreeCollection.prototype._move = function (id, index, target, targetId, key) {
        if (target === void 0) { target = this; }
        if (targetId === void 0) { targetId = this._root; }
        if (!this.exists(id)) {
            return null;
        }
        if (key) {
            index = index === -1 ? -1 : index + key;
        }
        if (target !== this) {
            if (!helpers_1.isTreeCollection(target)) {
                // move to datacollection
                target.add(helpers_1.copyWithoutInner(this.getItem(id)), index);
                this.remove(id);
                return;
            }
            var returnId = this.copy(id, index, target, targetId);
            this.remove(id);
            return returnId;
        }
        // move inside
        if (!this.canCopy(id, targetId)) {
            return null;
        }
        var parent = this.getParent(id);
        var parentIndex = this.getIndex(id);
        // get item from parent array and move to target array
        var spliced = this._childs[parent].splice(parentIndex, 1)[0];
        spliced.parent = targetId; // need for next moving, ... not best solution, may be full method for get item
        if (!this._childs[parent].length) {
            delete this._childs[parent];
        }
        if (!this.haveItems(targetId)) {
            this._childs[targetId] = [];
        }
        if (index === -1) {
            index = this._childs[targetId].push(spliced);
        }
        else {
            this._childs[targetId].splice(index, 0, spliced);
        }
        this.events.fire(types_1.DataEvents.change, [id, "update", this.getItem(id)]);
        return id;
    };
    TreeCollection.prototype._reset = function (id) {
        var _a;
        if (id) {
            var childs = __spreadArrays(this._childs[id]);
            for (var _i = 0, childs_2 = childs; _i < childs_2.length; _i++) {
                var child = childs_2[_i];
                this.remove(child.id);
            }
        }
        else {
            _super.prototype._reset.call(this);
            var root = this._root;
            this._initChilds = null;
            this._childs = (_a = {}, _a[root] = [], _a);
        }
    };
    TreeCollection.prototype._removeCore = function (id) {
        if (this._pull[id]) {
            var parent_1 = this.getParent(id);
            this._childs[parent_1] = this._childs[parent_1].filter(function (item) { return item.id !== id; });
            if (parent_1 !== this._root && !this._childs[parent_1].length) {
                delete this._childs[parent_1];
            }
            if (this._initChilds && this._initChilds[parent_1]) {
                this._initChilds[parent_1] = this._initChilds[parent_1].filter(function (item) { return item.id !== id; });
                if (parent_1 !== this._root && !this._initChilds[parent_1].length) {
                    delete this._initChilds[parent_1];
                }
            }
            this._fastDeleteChilds(this._childs, id);
            if (this._initChilds) {
                this._fastDeleteChilds(this._initChilds, id);
            }
        }
    };
    TreeCollection.prototype._addToOrder = function (_order, obj, index) {
        var childs = this._childs;
        var initChilds = this._initChilds;
        var parent = obj.parent;
        this._pull[obj.id] = obj;
        if (obj.parent &&
            this._pull[obj.parent] &&
            this._pull[obj.parent].items &&
            !this._pull[obj.parent].items.find(function (item) { return item.id === obj.id; })) {
            this._pull[obj.parent].items.push(obj);
        }
        _super.prototype._addToOrder.call(this, _order, obj, index);
        addToOrder(childs, obj, parent, index);
        if (initChilds) {
            addToOrder(initChilds, obj, parent, index);
        }
    };
    TreeCollection.prototype._parse_data = function (data, parent) {
        if (parent === void 0) { parent = this._root; }
        var _a;
        var index = this._order.length;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var obj = data_1[_i];
            if (this.config.init) {
                obj = this.config.init(obj);
            }
            if (obj && typeof obj !== "object") {
                obj = {
                    value: obj,
                };
            }
            obj.id = (_a = obj.id) !== null && _a !== void 0 ? _a : core_1.uid();
            obj.parent =
                typeof obj.parent === "undefined" || obj.parent === null || (obj.parent && obj.$items)
                    ? parent
                    : obj.parent;
            if (this._pull[obj.id]) {
                helpers_1.dhxError("Item " + obj.id + " already exist");
            }
            this._pull[obj.id] = obj;
            this._order[index++] = obj;
            if (!this._childs[obj.parent]) {
                this._childs[obj.parent] = [];
            }
            this._childs[obj.parent].push(obj);
            if (obj.items && obj.items instanceof Object) {
                this._parse_data(obj.items, obj.id);
            }
        }
    };
    TreeCollection.prototype._fastDeleteChilds = function (target, id) {
        if (this._pull[id]) {
            delete this._pull[id];
        }
        if (!target[id]) {
            return;
        }
        for (var i = 0; i < target[id].length; i++) {
            this._fastDeleteChilds(target, target[id][i].id);
        }
        delete target[id];
    };
    TreeCollection.prototype._recursiveFilter = function (rule, config, current, level, newChilds) {
        var _this = this;
        var childs = this._childs[current];
        if (!childs) {
            return;
        }
        var condition = function (item) {
            switch (config.type) {
                case types_1.TreeFilterType.all: {
                    return true;
                }
                case types_1.TreeFilterType.level: {
                    return level === config.level;
                }
                case types_1.TreeFilterType.leafs: {
                    return !_this.haveItems(item.id);
                }
            }
        };
        if (typeof rule === "function") {
            var customRule = function (item) { return condition(item) && rule(item); };
            var filtered = childs.filter(customRule);
            if (filtered.length) {
                newChilds[current] = filtered;
            }
        }
        else {
            var customRule = function (item) {
                var responseOfRule = true;
                for (var compare in rule) {
                    if (rule[compare].by && rule[compare].match !== "") {
                        responseOfRule =
                            item[rule[compare].by] &&
                                item[rule[compare].by]
                                    .toString()
                                    .toLocaleLowerCase()
                                    .indexOf(rule[compare].match.toString().toLowerCase()) !== -1;
                    }
                    if (!responseOfRule)
                        break;
                }
                return condition(item) && responseOfRule;
            };
            var filtered = childs.filter(customRule);
            if (filtered.length) {
                newChilds[current] = filtered;
            }
        }
        for (var _i = 0, childs_3 = childs; _i < childs_3.length; _i++) {
            var child = childs_3[_i];
            this._recursiveFilter(rule, config, child.id, level + 1, newChilds);
        }
    };
    TreeCollection.prototype._serialize = function (parent, fn) {
        var _this = this;
        if (parent === void 0) { parent = this._root; }
        return this.map(function (item) {
            var itemCopy = {};
            for (var key in item) {
                if (key === "parent" || key === "items" || key.startsWith("$")) {
                    continue;
                }
                itemCopy[key] = item[key];
            }
            if (fn) {
                itemCopy = fn(itemCopy);
            }
            if (_this.haveItems(item.id)) {
                itemCopy.items = _this._serialize(item.id, fn);
            }
            return itemCopy;
        }, parent, false);
    };
    return TreeCollection;
}(datacollection_1.DataCollection));
exports.TreeCollection = TreeCollection;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(2);
var ts_grid_1 = __webpack_require__(24);
var CollectionStore_1 = __webpack_require__(133);
var types_1 = __webpack_require__(15);
var helpers_1 = __webpack_require__(16);
function getPosition(e) {
    var y = e.clientY;
    var element = html_1.locateNode(e);
    if (!element) {
        return null;
    }
    var treeLine = element.childNodes[0];
    if (treeLine) {
        var _a = treeLine.getBoundingClientRect(), top_1 = _a.top, height = _a.height;
        return (y - top_1) / height;
    }
}
function dragEventContent(element, elements, exhaustiveList) {
    if (exhaustiveList === void 0) { exhaustiveList = false; }
    var rect = element.getBoundingClientRect();
    var ghost = document.createElement("div");
    var clone = element.cloneNode(true);
    clone.style.width = rect.width + "px";
    clone.style.height = rect.height + "px";
    clone.style.maxHeight = rect.height + "px";
    clone.style.fontSize = window.getComputedStyle(element.parentElement).fontSize;
    clone.style.opacity = "0.8";
    clone.style.fontSize = window.getComputedStyle(element.parentElement).fontSize;
    if (!exhaustiveList || !elements || !elements.length) {
        ghost.appendChild(clone);
    }
    if (elements && elements.length) {
        elements.forEach(function (node, key) {
            var nodeClone = node.cloneNode(true);
            nodeClone.style.width = rect.width + "px";
            nodeClone.style.height = rect.height + "px";
            nodeClone.style.maxHeight = rect.height + "px";
            nodeClone.style.top = (key + 1) * 12 - rect.height - rect.height * key + "px";
            nodeClone.style.left = (key + 1) * 12 + "px";
            nodeClone.style.opacity = "0.6";
            nodeClone.style.zIndex = "" + (-key - 1);
            ghost.appendChild(nodeClone);
        });
    }
    ghost.className = "dhx_drag-ghost";
    return ghost;
}
var DragManager = /** @class */ (function () {
    function DragManager() {
        var _this = this;
        this._transferData = {};
        this._canMove = true;
        this._isDrag = false;
        this._onMouseMove = function (e) {
            if (!_this._transferData.start) {
                return;
            }
            var pageX = e.targetTouches ? e.targetTouches[0].pageX : e.pageX;
            var pageY = e.targetTouches ? e.targetTouches[0].pageY : e.pageY;
            var _a = _this._transferData, x = _a.x, y = _a.y, start = _a.start, componentId = _a.componentId;
            if (!_this._transferData.ghost) {
                if (Math.abs(x - pageX) < 3 && Math.abs(y - pageY) < 3) {
                    return;
                }
                else {
                    var ghost = _this._onDragStart(start, componentId, e);
                    if (!ghost) {
                        _this._endDrop(e);
                        return;
                    }
                    else {
                        _this._transferData.ghost = ghost;
                        document.body.appendChild(_this._transferData.ghost);
                    }
                }
            }
            _this._moveGhost(pageX, pageY);
            _this._onDrag(e);
        };
        this._onMouseUp = function (e) {
            if (!_this._transferData.x) {
                return;
            }
            if (_this._transferData.ghost) {
                _this._removeGhost();
                _this._onDrop(e);
            }
            else {
                _this._endDrop(e);
            }
            if (!e.targetTouches) {
                document.removeEventListener("mousemove", _this._onMouseMove);
                document.removeEventListener("mouseup", _this._onMouseUp);
            }
            else {
                document.removeEventListener("touchmove", _this._onMouseMove);
                document.removeEventListener("touchend", _this._onMouseUp);
            }
        };
    }
    DragManager.prototype.setItem = function (id, item) {
        CollectionStore_1.collectionStore.setItem(id, item);
    };
    DragManager.prototype.onMouseDown = function (event, source, itemsForGhost) {
        // onmousedown only for target objects
        if (event.which !== 1 && !event.targetTouches) {
            return;
        }
        if (!event.targetTouches) {
            document.addEventListener("mousemove", this._onMouseMove);
            document.addEventListener("mouseup", this._onMouseUp);
        }
        else {
            document.addEventListener("touchmove", this._onMouseMove, false);
            document.addEventListener("touchend", this._onMouseUp, false);
        }
        var item = html_1.locateNode(event, "dhx_id");
        var id = item && item.getAttribute("dhx_id");
        var componentId = html_1.locate(event, "dhx_widget_id");
        if (Array.isArray(source) && source.includes(id)) {
            this._transferData.source = __spreadArrays(source);
            this._itemsForGhost = itemsForGhost;
        }
        else {
            this._transferData.source = [id];
            this._itemsForGhost = null;
        }
        if (id && componentId) {
            var _a = html_1.getBox(item), left = _a.left, top_2 = _a.top;
            var pageX = event.targetTouches
                ? event.targetTouches[0].pageX
                : event.pageX;
            var pageY = event.targetTouches
                ? event.targetTouches[0].pageY
                : event.pageY;
            this._transferData.initXOffset = pageX - left;
            this._transferData.initYOffset = pageY - top_2;
            this._transferData.x = pageX;
            this._transferData.y = pageY;
            this._transferData.componentId = componentId;
            this._transferData.start = id;
            this._transferData.item = item;
        }
    };
    DragManager.prototype.isDrag = function () {
        return this._isDrag;
    };
    DragManager.prototype.cancelCanDrop = function (event) {
        this._canMove = false;
        this._isDrag = false;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropComponentId = _a.dropComponentId;
        var data = {
            start: start,
            source: source,
            target: target,
        };
        var collection = CollectionStore_1.collectionStore.getItem(dropComponentId);
        if (collection && target) {
            collection.events.fire(types_1.DragEvents.cancelDrop, [data, event]);
        }
        this._transferData.dropComponentId = null;
        this._transferData.target = null;
    };
    DragManager.prototype._moveGhost = function (x, y) {
        if (this._transferData.ghost) {
            this._transferData.ghost.style.left = x - this._transferData.initXOffset + "px";
            this._transferData.ghost.style.top = y - this._transferData.initYOffset + "px";
        }
    };
    DragManager.prototype._removeGhost = function () {
        document.body.removeChild(this._transferData.ghost);
    };
    DragManager.prototype._onDrop = function (e) {
        if (!this._canMove) {
            this._endDrop(e);
            return;
        }
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropComponentId = _a.dropComponentId, dropPosition = _a.dropPosition;
        var data = { start: start, source: source, target: target, dropPosition: dropPosition };
        var component = CollectionStore_1.collectionStore.getItem(dropComponentId);
        var config = component && component.config;
        if (!component || config.dragMode === "source") {
            this._endDrop(e);
            return;
        }
        if (component.events.fire(types_1.DragEvents.beforeDrop, [data, e])) {
            var to = {
                id: target,
                component: component,
            };
            var from = {
                id: start,
                component: this._transferData.component,
            };
            this._move(from, to);
            to.component.events.fire(types_1.DragEvents.afterDrop, [data, e]);
        }
        this._endDrop(e);
    };
    DragManager.prototype._onDragStart = function (id, componentId, e) {
        var component = CollectionStore_1.collectionStore.getItem(componentId);
        var config = component.config;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target;
        var data = {
            start: start,
            source: source,
            target: target,
        };
        if (config.dragMode === "target" || component._pregroupData) {
            return null;
        }
        var ghost = dragEventContent(this._transferData.item, this._itemsForGhost, config.dragItem === "column" || config.dragItem === "both");
        var ans = component.events.fire(types_1.DragEvents.beforeDrag, [data, e, ghost]);
        if (!ans || !id) {
            return null;
        }
        component.events.fire(types_1.DragEvents.dragStart, [data, e]);
        this._isDrag = true;
        this._toggleTextSelection(true);
        this._transferData.component = component;
        this._transferData.dragConfig = config;
        return ghost;
    };
    DragManager.prototype._onDrag = function (e) {
        var clientX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
        var clientY = e.targetTouches ? e.targetTouches[0].clientY : e.clientY;
        var element = document.elementFromPoint(clientX, clientY);
        var collectionId = html_1.locate(element, "dhx_widget_id");
        if (!collectionId) {
            if (this._canMove) {
                this.cancelCanDrop(e);
            }
            return;
        }
        var component = CollectionStore_1.collectionStore.getItem(collectionId);
        var isTreeHeaderOrFooter = !!html_1.locateNodeByClassName(element, "dhx_grid-header") ||
            !!html_1.locateNodeByClassName(element, "dhx_grid-footer");
        var gridConfig = component && component.config.columns
            ? component.config
            : undefined;
        var isColumnDrag = gridConfig && (gridConfig.dragItem === "both" || gridConfig.dragItem === "column");
        if (isTreeHeaderOrFooter && !isColumnDrag) {
            if (this._canMove) {
                this.cancelCanDrop(e);
            }
            return;
        }
        var id = html_1.locate(element, "dhx_id");
        var rootId = html_1.locate(element, "dhx_root_id");
        if (!id && !rootId) {
            this.cancelCanDrop(e);
            this._transferData.dropComponentId = collectionId;
            this._transferData.target = null;
            this._canDrop(e);
            return;
        }
        var _a = this._transferData, dropComponentId = _a.dropComponentId, start = _a.start, source = _a.source, target = _a.target, componentId = _a.componentId, dropPosition = _a.dropPosition;
        if (component.config.dropBehaviour === "complex") {
            var pos = getPosition(e);
            if (pos <= 0.25) {
                this._transferData.dropPosition = "top";
            }
            else if (pos >= 0.75) {
                this._transferData.dropPosition = "bottom";
            }
            else {
                this._transferData.dropPosition = "in";
            }
        }
        else if ((target === id || target === rootId) && dropComponentId === collectionId) {
            return;
        }
        var from = {
            id: start,
            component: this._transferData.component,
        };
        if (component.config.dragMode === "source") {
            return;
        }
        from.component.events.fire(types_1.DragEvents.dragOut, [
            {
                start: start,
                source: source,
                target: target,
            },
            e,
        ]);
        if (collectionId !== componentId ||
            !helpers_1.isTreeCollection(from.component.data) ||
            (helpers_1.isTreeCollection(from.component.data) && from.component.data.canCopy(from.id, id))) {
            this.cancelCanDrop(e); // clear last
            this._transferData.target = id || rootId;
            this._transferData.dropComponentId = collectionId;
            var canMove = from.component.events.fire(types_1.DragEvents.dragIn, [
                {
                    start: start,
                    source: source,
                    target: target,
                    dropPosition: dropPosition,
                },
                e,
            ]);
            if (canMove) {
                this._canDrop(e);
            }
        }
        else {
            this.cancelCanDrop(e);
        }
    };
    DragManager.prototype._move = function (from, to) {
        var fromData = from.component.data;
        var toData = to.component.data;
        var index = 0;
        var componentId = to.id;
        var behaviour = helpers_1.isTreeCollection(toData) ? to.component.config.dropBehaviour : undefined;
        var gridConfig = from.component.config.columns
            ? from.component.config
            : undefined;
        var isColumnDrag = gridConfig &&
            (gridConfig.dragItem === "both" || gridConfig.dragItem === "column") &&
            gridConfig.columns.map(function (c) { return c.id; }).filter(function (id) { return id === from.id || id === to.id; }).length;
        if (isColumnDrag && from.component === to.component) {
            if (from.id === to.id)
                return;
            var grid = from.component;
            var currentCols = grid.config.columns.map(function (c) { return (__assign({}, c)); });
            var sourceIndex = currentCols.findIndex(function (c) { return c.id === from.id; });
            var componentIndex = currentCols.findIndex(function (c) { return c.id === to.id; });
            if (componentIndex === -1)
                return;
            currentCols.splice(componentIndex, 0, currentCols.splice(sourceIndex, 1)[0]);
            grid.setColumns(currentCols);
            grid.paint();
            return;
        }
        else if (isColumnDrag && from.component instanceof ts_grid_1.ProGrid && to.component instanceof ts_grid_1.ProGrid) {
            var grid = from.component;
            var nextGrid_1 = to.component;
            var currentCols = grid.config.columns.map(function (c) { return (__assign({}, c)); });
            var sourceIndex = currentCols.findIndex(function (c) { return c.id === from.id; });
            var nextGridCols = nextGrid_1.config.columns.map(function (c) { return (__assign({}, c)); });
            var componentIndex = nextGridCols.findIndex(function (c) { return c.id === to.id; });
            var isIdExsist = nextGridCols.findIndex(function (item) { return item.id === from.id; });
            var copyId_1 = isIdExsist >= 0 ? from.id + "_copy" : from.id;
            var currentColumnData_1 = [];
            grid.data.forEach(function (item) {
                var _a;
                currentColumnData_1.push((_a = {}, _a[copyId_1] = item[from.id], _a));
            });
            nextGrid_1.data.forEach(function (item, index) {
                nextGrid_1.data.update(item.id, __assign(__assign({}, item), currentColumnData_1[index]));
            });
            var col = currentCols.splice(sourceIndex, 1)[0];
            col.id = copyId_1;
            nextGridCols.splice(componentIndex, 0, col);
            nextGrid_1.setColumns(nextGridCols);
            nextGrid_1.paint();
            grid.setColumns(currentCols);
            grid.paint();
            return;
        }
        var isRootParent = to.id === to.component.config.rootParent;
        switch (behaviour) {
            case "child":
                break;
            case "sibling":
                componentId = toData.getParent(componentId);
                index = toData.getIndex(to.id) + 1;
                break;
            case "complex": {
                var dropPosition = this._transferData.dropPosition;
                if (isRootParent) {
                    componentId = to.id;
                    index = toData.getLength();
                }
                else {
                    if (dropPosition === "top") {
                        componentId = toData.getParent(componentId);
                        index = toData.getIndex(to.id);
                    }
                    else if (dropPosition === "bottom") {
                        componentId = toData.getParent(componentId);
                        index = toData.getIndex(to.id) + 1;
                    }
                }
                break;
            }
            default:
                // list move
                if (!to.id) {
                    index = -1;
                }
                else if (from.component === to.component &&
                    toData.getIndex(from.id) < toData.getIndex(to.id)) {
                    index = toData.getIndex(to.id) - 1;
                }
                else {
                    index = toData.getIndex(to.id);
                }
        }
        if (this._transferData.dragConfig.dragCopy) {
            if (this._transferData.source instanceof Array && this._transferData.source.length > 1) {
                this._transferData.source.map(function (selctedId) {
                    fromData.copy(selctedId, index, toData, componentId);
                    if (index > -1) {
                        index++;
                    }
                });
            }
            else {
                fromData.copy(from.id, index, toData, componentId);
            }
        }
        else {
            if (this._transferData.source instanceof Array && this._transferData.source.length > 1) {
                this._transferData.source.map(function (selctedId) {
                    fromData.move(selctedId, index, toData, componentId);
                    if (index > -1) {
                        index++;
                    }
                });
            }
            else {
                fromData.move(from.id, index, toData, componentId);
            }
        }
    };
    DragManager.prototype._endDrop = function (e) {
        this._toggleTextSelection(false);
        if (this._transferData.component) {
            var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target;
            var data = { start: start, source: source, target: target };
            this._transferData.component.events.fire(types_1.DragEvents.afterDrag, [data, e]);
        }
        this.cancelCanDrop(e);
        this._canMove = true;
        this._transferData = {};
        this._transferData.target = null;
        this._transferData.dropComponentId = null;
    };
    DragManager.prototype._canDrop = function (e) {
        this._canMove = true;
        var _a = this._transferData, start = _a.start, source = _a.source, target = _a.target, dropPosition = _a.dropPosition;
        var data = {
            start: start,
            source: source,
            target: target,
            dropPosition: dropPosition,
        };
        var component = CollectionStore_1.collectionStore.getItem(this._transferData.dropComponentId);
        if (component && this._transferData.target) {
            component.events.fire(types_1.DragEvents.canDrop, [data, e]);
        }
    };
    DragManager.prototype._toggleTextSelection = function (add) {
        if (add) {
            document.body.classList.add("dhx_no-select");
        }
        else {
            document.body.classList.remove("dhx_no-select");
        }
    };
    return DragManager;
}());
var dhx = (window.dhxHelpers = window.dhxHelpers || {});
dhx.dragManager = dhx.dragManager || new DragManager();
exports.dragManager = dhx.dragManager;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(11);
var ts_data_1 = __webpack_require__(8);
var core_1 = __webpack_require__(1);
function fillArray(arr, value) {
    for (var i = 0; i < arr.length; i++) {
        arr[i] = value;
    }
    return arr;
}
var Exporter = /** @class */ (function () {
    function Exporter(_view) {
        this._view = _view;
    }
    Exporter.prototype.xlsx = function (config) {
        return this._export(config);
    };
    Exporter.prototype.csv = function (config) {
        if (config === void 0) { config = {}; }
        config = __assign({
            asFile: true,
            rowDelimiter: "\n",
            columnDelimiter: ",",
            skipHeader: 0,
        }, config);
        var csv;
        if ("getRoot" in this._view.data && config.flat) {
            csv = this.getFlatCSV(config);
        }
        else {
            csv = this._getCSV(config);
        }
        var name = config.name || "grid_export";
        if (config.asFile) {
            core_1.downloadFile(csv, name + ".csv", "text/csv");
        }
        return csv;
    };
    Exporter.prototype._export = function (config) {
        if (config === void 0) { config = {}; }
        var configCols = this._view.config.columns.filter(function (i) { return !i.hidden; });
        var rowsIndexMap = {};
        var headers = main_1.transpose(configCols.map(function (col) { return col.header.map(function (level) { return level.text || " "; }); }));
        var columns = [];
        var uniqStyles = {
            default: {
                color: "#000000",
                background: "#FFFFFF",
                fontSize: 14,
            },
        };
        var cells = [];
        var columnsIndexMap = {};
        var data = this._view.data.serialize().map(function (row, i) {
            rowsIndexMap[row.id] = i;
            var rowData = configCols.map(function (col, k) {
                columnsIndexMap[col.id] = k;
                return main_1.removeHTMLTags(row[col.id]);
            });
            return rowData;
        });
        var footer = [];
        var content = this._view.content;
        var _loop_1 = function (col) {
            if (col.footer) {
                var id_1 = col.id;
                var columnData = this_1._view.data.serialize().reduce(function (items, item) {
                    if (item[id_1] !== undefined && item[id_1] !== "" && !isNaN(item[id_1])) {
                        items.push(parseFloat(item[id_1]));
                    }
                    return items;
                }, []);
                var roots = columnData;
                if (this_1._view.config.type === "tree") {
                    var datacollection_1 = this_1._view.data;
                    var data_1 = datacollection_1.serialize();
                    roots = data_1.reduce(function (total, item) {
                        if (item.$level === 0) {
                            if (item[id_1] !== undefined && item[id_1] !== "" && !isNaN(item[id_1])) {
                                total.push(parseFloat(item[id_1]) || 0);
                            }
                            else {
                                var value_1 = 0;
                                datacollection_1.eachChild(item.id, function (cell) {
                                    if (!datacollection_1.haveItems(cell.id)) {
                                        value_1 += parseFloat(cell[id_1]);
                                    }
                                });
                                total.push(value_1);
                            }
                        }
                        return total;
                    }, []);
                }
                if (col.footer[0].content) {
                    var val = content[col.footer[0].content].calculate(columnData, roots);
                    footer.push(val);
                }
                else {
                    footer.push(col.footer[0].css || col.footer[0].text || " ");
                }
            }
            columns.push({ width: col.width });
            for (var key in col.$cellCss) {
                var colStyle = col.$cellCss[key];
                var colStyleHash = colStyle
                    .split("")
                    .reduce(function (h, letter) {
                    var hh = (h << 5) - h + letter.charCodeAt(0);
                    return Math.abs(hh & hh);
                }, 0)
                    .toString();
                if (!uniqStyles[colStyleHash]) {
                    var cont = document.body;
                    var css = main_1.getStyleByClass(colStyle, cont, "dhx_grid-row", uniqStyles.default);
                    if (css) {
                        uniqStyles[colStyleHash] = css;
                    }
                }
                if (uniqStyles[colStyleHash]) {
                    cells.push([rowsIndexMap[key], configCols.indexOf(col), colStyleHash]);
                }
            }
        };
        var this_1 = this;
        for (var _i = 0, configCols_1 = configCols; _i < configCols_1.length; _i++) {
            var col = configCols_1[_i];
            _loop_1(col);
        }
        if (footer.length) {
            data.push(footer);
        }
        var exportData = {
            name: config.name || "data",
            columns: columns,
            header: headers,
            data: data,
            styles: {
                cells: cells,
                css: uniqStyles,
            },
        };
        if (config.url) {
            var form_1 = document.createElement("form");
            form_1.setAttribute("target", "_blank");
            form_1.setAttribute("action", config.url);
            form_1.setAttribute("method", "POST");
            form_1.style.visibility = "hidden";
            var input = document.createElement("textarea");
            input.setAttribute("name", "data");
            input.value = JSON.stringify(exportData);
            form_1.appendChild(input);
            document.body.appendChild(form_1);
            form_1.submit();
            setTimeout(function () {
                form_1.parentNode.removeChild(form_1);
            }, 100);
        }
        return exportData;
    };
    Exporter.prototype.getFlatCSV = function (config) {
        var treeData = this._view.data;
        var root = treeData.getRoot();
        var firstCol = this._view.config.columns[0];
        var maxLevel = treeData.getMaxLevel();
        var getParentsChain = function (item, data) {
            var parents = [];
            for (var i = 0; i <= maxLevel; i++) {
                if (item && item[firstCol.id]) {
                    parents[item.$level] = item[firstCol.id];
                    var parent_1 = data.getParent(item.id, true);
                    if (parent_1 && parent_1.id) {
                        item = parent_1;
                    }
                    else {
                        item = null;
                    }
                }
                else {
                    parents[i] = "";
                }
            }
            return parents;
        };
        var total = "";
        treeData.eachChild(root, function (item) {
            var parents = getParentsChain(item, treeData).join(config.columnDelimiter);
            total +=
                parents +
                    Object.keys(item).reduce(function (values, key, i) {
                        if (key !== "id" && key !== "parent" && !key.startsWith("$") && i !== 0) {
                            return values + config.columnDelimiter + (item[key] === null ? "" : item[key]);
                        }
                        return values;
                    }, "");
            total += config.rowDelimiter;
        });
        var exportData = this._export(config);
        // [dirty]
        var emptyHeaders = fillArray(new Array(maxLevel + 1), "");
        var headers = exportData.header.map(function (header) {
            header.splice.apply(header, __spreadArrays([0, 1], emptyHeaders));
            return header;
        });
        var head = new ts_data_1.CsvDriver(config).serialize(headers, true) + config.rowDelimiter;
        return head + total;
    };
    Exporter.prototype._getCSV = function (config) {
        var exportData = this._export(config);
        var headers = exportData.header;
        var driver = new ts_data_1.CsvDriver(config);
        var head = driver.serialize(headers, true);
        var readyData = driver.serialize(exportData.data, true);
        return head + "\n" + readyData;
    };
    return Exporter;
}());
exports.Exporter = Exporter;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var core_1 = __webpack_require__(1);
var ts_data_1 = __webpack_require__(8);
var events_1 = __webpack_require__(5);
var types_1 = __webpack_require__(4);
var FocusManager_1 = __webpack_require__(10);
var Selection = /** @class */ (function () {
    function Selection(grid, config, events, gridId) {
        var types = ["cell", "row", "complex"];
        this._grid = grid;
        this.config = config;
        this._gridId = gridId;
        this._selectedCell = undefined;
        this._oldSelectedCell = undefined;
        this._selectedCells = [];
        this._type = types.includes(this._grid.config.selection) ? this._grid.config.selection : "complex";
        this._multiselection = grid.config.multiselection && this._type !== "complex";
        this.events = events || new events_1.EventSystem(this);
        this._init();
    }
    Selection.prototype.setCell = function (row, col, ctrlUp, shiftUp) {
        var _this = this;
        if (ctrlUp === void 0) { ctrlUp = false; }
        if (shiftUp === void 0) { shiftUp = false; }
        if (this._gridId && FocusManager_1.focusManager.getFocusId() !== this._gridId) {
            FocusManager_1.focusManager.setFocusId(this._gridId);
        }
        if (this.config.disabled ||
            this._grid.config.$editable ||
            (!this._multiselection &&
                this._oldSelectedCell &&
                this._oldSelectedCell.row.id === ((row && row.id) || row) &&
                this._oldSelectedCell.column.id === ((col && col.id) || col)) ||
            (this._multiselection &&
                this._selectedCells.length === 1 &&
                this._selectedCells[0].row.id === ((row && row.id) || row) &&
                this._selectedCells[0].column.id === ((col && col.id) || col))) {
            return;
        }
        if ((this._multiselection && !ctrlUp && !shiftUp) || !this._multiselection) {
            this._selectedCells.length && this._removeCells();
        }
        if (this._multiselection &&
            this._type === "cell" &&
            this._selectedCells.find(function (item) {
                return item.row.id === ((row && row.id) || row) && item.column.id === ((col && col.id) || col);
            })) {
            this.removeCell((row && row.id) || row, (col && col.id) || col);
            return;
        }
        var oldSelectedCell = this._oldSelectedCell ? this._oldSelectedCell : undefined;
        row = this._grid.data.getItem((row && row.id) || row);
        var colums = this._grid.config.columns.filter(function (col) { return !col.hidden; });
        if (!col) {
            col = colums[0];
        }
        col = this._grid.getColumn(col.id || col);
        if (!col || !row) {
            return;
        }
        col = col.id ? col : this._grid.getColumn(col);
        if (!this.events.fire(types_1.GridSelectionEvents.beforeSelect, [row, col]))
            return;
        this._selectedCell = { row: row, column: col };
        this.events.fire(types_1.GridSelectionEvents.afterSelect, [row, col]);
        if (this._multiselection && shiftUp && oldSelectedCell) {
            this._oldSelectedCell = oldSelectedCell;
        }
        else {
            this._oldSelectedCell = this._selectedCell;
        }
        if (this._multiselection) {
            if (shiftUp && !ctrlUp && this._selectedCells.length > 0) {
                var startRowIndex = this._grid.data.getIndex(this._oldSelectedCell.row.id);
                var endRowIndex = this._grid.data.getIndex(row.id);
                if (startRowIndex > endRowIndex) {
                    var temp = startRowIndex;
                    startRowIndex = endRowIndex;
                    endRowIndex = temp;
                }
                this._selectedCells = [this._oldSelectedCell];
                if (this._type === "cell") {
                    var columnsIds = colums.map(function (e) { return e.id; });
                    var startColIndex = columnsIds.indexOf(oldSelectedCell.column.id);
                    var endColIndex = columnsIds.indexOf(col.id);
                    if (startColIndex !== -1 && endColIndex !== -1) {
                        if (startColIndex > endColIndex) {
                            var temp = startColIndex;
                            startColIndex = endColIndex;
                            endColIndex = temp;
                        }
                        var columns_1 = colums.slice(startColIndex, endColIndex + 1);
                        this._grid.data.mapRange(startRowIndex, endRowIndex, function (item) {
                            columns_1.forEach(function (column) {
                                var cell = { row: item, column: column };
                                if (_this._findIndex(cell) === -1) {
                                    _this._selectedCells.push(cell);
                                }
                            });
                        });
                    }
                }
                else {
                    this._grid.data.mapRange(startRowIndex, endRowIndex, function (item) {
                        var cell = { row: item, column: col };
                        if (_this._findIndex(cell) === -1) {
                            _this._selectedCells.push(cell);
                        }
                    });
                }
            }
            else if (ctrlUp && !shiftUp) {
                var cellIndex = this._findIndex();
                if (cellIndex === -1) {
                    this._selectedCells.push({
                        row: this._selectedCell.row,
                        column: this._selectedCell.column,
                    });
                }
                else {
                    this._selectedCells.length > 1 && this._selectedCells.splice(cellIndex, 1);
                }
            }
            else {
                this._selectedCells = [this._selectedCell];
            }
        }
        else {
            this._selectedCells = [this._selectedCell];
        }
        dom_1.awaitRedraw().then(function () {
            _this._grid.paint();
            _this._setBrowserFocus();
        });
    };
    Selection.prototype.getCell = function () {
        return this._selectedCell;
    };
    Selection.prototype.getCells = function () {
        return this._selectedCells;
    };
    Selection.prototype.toHTML = function () {
        var _this = this;
        if (this._isUnselected()) {
            return;
        }
        if (this._multiselection) {
            var selection_1 = [];
            this._selectedCells.forEach(function (cell, index, array) {
                selection_1.push(_this._toHTML(cell.row, cell.column, index === array.length - 1 || _this._type === "cell"));
            });
            return selection_1;
        }
        else {
            return this._toHTML(this._selectedCell.row, this._selectedCell.column, true);
        }
    };
    Selection.prototype.disable = function () {
        this.removeCell();
        this.config.disabled = true;
        this._grid.paint();
    };
    Selection.prototype.enable = function () {
        this.config.disabled = false;
        this._grid.paint();
    };
    Selection.prototype.removeCell = function (rowId, colId) {
        var _this = this;
        if (rowId && colId && this._type === "cell") {
            var cell = this._selectedCells.find(function (_a) {
                var row = _a.row, column = _a.column;
                return row.id == rowId && column.id == colId;
            });
            cell && this._removeCell(cell.row, cell.column);
        }
        else if (rowId) {
            var cells = this._selectedCells.filter(function (_a) {
                var row = _a.row;
                return row.id == rowId;
            });
            cells.forEach(function (_a) {
                var row = _a.row, column = _a.column;
                _this._removeCell(row, column);
            });
        }
        else {
            this._removeCells();
        }
        dom_1.awaitRedraw().then(function () {
            _this._grid.paint();
        });
    };
    Selection.prototype._removeCell = function (row, col) {
        if (!row || !col || !row.id || !col.id)
            return;
        if (!this.events.fire(types_1.GridSelectionEvents.beforeUnSelect, [row, col]))
            return;
        var index = this._selectedCells.findIndex(function (item) { return item.row.id === row.id && item.column.id === col.id; });
        this._selectedCells.splice(index, 1);
        if (this._selectedCell &&
            col.id === this._selectedCell.column.id &&
            row.id === this._selectedCell.row.id) {
            this._selectedCell = this._selectedCells[this._selectedCells.length - 1] || undefined;
        }
        this.events.fire(types_1.GridSelectionEvents.afterUnSelect, [row, col]);
    };
    Selection.prototype._removeCells = function () {
        var _this = this;
        this._selectedCells.forEach(function (item) {
            _this._removeCell(item && item.row, item && item.column);
        });
        this._selectedCells.length && this._removeCells();
    };
    Selection.prototype._init = function () {
        var _this = this;
        this._grid.events.on(types_1.GridEvents.cellClick, function (row, col, e) {
            _this.setCell(row, col, e.ctrlKey || e.metaKey, e.shiftKey);
        });
        this._grid.data.events.on(ts_data_1.DataEvents.beforeRemove, function (item) {
            if (item && _this._selectedCell && _this._selectedCell.row) {
                var index = _this._grid.data.getIndex(String(_this._selectedCell.row.id));
                var id = _this._grid.data.getId(index + 1);
                if (id) {
                    _this.setCell(id);
                }
                else {
                    var newId = _this._grid.data.getId(index - 1);
                    if (newId) {
                        _this.setCell(newId);
                    }
                }
                _this._grid.paint();
            }
        });
    };
    Selection.prototype._toHTML = function (row, column, last) {
        if (last === void 0) { last = false; }
        var rows = this._grid.data.getRawData(0, -1, null, 2);
        var rowInd = core_1.findIndex(rows, function (obj) { return obj.id == row.id; });
        if (rowInd === -1)
            return null;
        var colums = this._grid.config.columns.filter(function (col) { return !col.hidden; });
        var fixedCols = this._grid.config.leftSplit ? colums.slice(0, this._grid.config.leftSplit) : [];
        var fixedColsIds = fixedCols.map(function (col) { return col.id; });
        var fixedColsWidth = fixedCols.reduce(function (total, coll) { return (total += coll.$width); }, 0);
        var fixedCell;
        var cellRect = this._grid.getCellRect(row.id, column.id);
        var scrollState = this._grid.getScrollState();
        if (fixedColsIds.includes(column.id) && last) {
            fixedCell = dom_1.el(".dhx_grid-selected-cell", {
                style: {
                    width: this._grid.config.leftSplit === fixedColsIds.indexOf(column.id) + 1
                        ? cellRect.width - 1
                        : cellRect.width,
                    height: cellRect.height,
                    top: cellRect.y,
                    left: cellRect.x + scrollState.x,
                    position: "absolute",
                    zIndex: 10,
                },
            });
        }
        var isBehindFixedCols = fixedCols.length && fixedColsWidth > cellRect.x - scrollState.x;
        var width = cellRect.width;
        if (isBehindFixedCols) {
            width -= fixedColsWidth - (cellRect.x - scrollState.x);
        }
        var totalWidth = this._grid.config.$totalWidth;
        return dom_1.el(".dhx_grid-selection", {
            style: {
                zIndex: fixedCell ||
                    this._grid.config.selection === "row" ||
                    this._grid.config.selection === "complex"
                    ? 20
                    : 10,
            },
        }, [
            (this._type === "row" || this._type === "complex") &&
                dom_1.el(".dhx_grid-selected-row", {
                    style: {
                        width: fixedCols.length ? totalWidth - scrollState.x : totalWidth,
                        height: cellRect.height - 1,
                        top: cellRect.y,
                        left: fixedCols.length ? scrollState.x : 0,
                        position: "absolute",
                    },
                }),
            ((this._type === "cell" || this._type === "complex") && fixedCell) ||
                ((this._type === "cell" || this._type === "complex") &&
                    last &&
                    dom_1.el(".dhx_grid-selected-cell", {
                        style: {
                            width: width,
                            height: cellRect.height - 1,
                            top: cellRect.y,
                            left: isBehindFixedCols ? fixedColsWidth + scrollState.x : cellRect.x,
                            position: "absolute",
                            display: width > 0 ? "flex" : "none",
                            borderLeft: isBehindFixedCols ? "none" : null,
                        },
                    })),
        ]);
    };
    Selection.prototype._isUnselected = function () {
        return (!this._selectedCell ||
            !this._selectedCell.row ||
            !this._selectedCell.column ||
            this._selectedCells.length === 0);
    };
    Selection.prototype._findIndex = function (cell) {
        var _this = this;
        if (cell === void 0) { cell = this._selectedCell; }
        var cellIndex = -1;
        this._selectedCells.some(function (element, index) {
            if (_this._type === "cell") {
                if (core_1.compare(element.row, cell.row) && core_1.compare(element.column, cell.column)) {
                    cellIndex = index;
                    return true;
                }
            }
            else if (_this._type === "row") {
                if (core_1.compare(element.row, cell.row)) {
                    cellIndex = index;
                    return true;
                }
            }
        });
        return cellIndex;
    };
    Selection.prototype._setBrowserFocus = function () {
        var gridContainer = this._grid.getRootView().data.getRootNode();
        if (gridContainer) {
            var gridDataContainer = gridContainer.querySelector(".dhx_grid_data");
            if (gridDataContainer &&
                this._selectedCell &&
                this._selectedCell.row &&
                this._selectedCell.column) {
                var $row = gridDataContainer.querySelector("[dhx_id=\"" + this._selectedCell.row.id + "\"]");
                var span = this._grid.getSpan(this._selectedCell.row.id, this._selectedCell.column.id);
                if ($row) {
                    var gridSpansContainer = span ? gridContainer.querySelector(".dhx_span-spans") : null;
                    var $focusedCell = gridSpansContainer
                        ? gridSpansContainer.querySelector("[dhx_col_id=\"" + span.column + "\"][dhx_id=\"" + span.row + "\"]")
                        : $row.querySelector("[dhx_col_id=\"" + this._selectedCell.column.id + "\"]");
                    if ($focusedCell) {
                        $focusedCell.tabIndex = 0;
                        $focusedCell.focus({ preventScroll: true });
                        // $focusedCell.focus();
                    }
                }
            }
        }
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(4);
var InputEditor_1 = __webpack_require__(104);
var SelectEditor_1 = __webpack_require__(105);
var DateEditor_1 = __webpack_require__(106);
var CheckboxEditor_1 = __webpack_require__(119);
var ComboboxEditor_1 = __webpack_require__(120);
var TextAreaEditor_1 = __webpack_require__(127);
var lastEditor = {
    cell: {
        row: null,
        col: null,
    },
    editor: null,
    gridId: null,
};
var editHandler;
function getEditor(row, col, conf) {
    var type = col.type === "boolean" ? "checkbox" : conf.$editable.editorType;
    if (typeof type === "undefined")
        type = conf.autoHeight ? "textarea" : "input";
    if (lastEditor.cell.row === row.id &&
        lastEditor.cell.col === col.id &&
        lastEditor.gridId === conf.gridId &&
        conf.$editable.editor) {
        return lastEditor.editor;
    }
    if (type !== "checkbox") {
        lastEditor = {
            cell: {
                row: row.id,
                col: col.id,
            },
            editor: lastEditor.editor,
            gridId: conf.gridId,
        };
    }
    if (!editHandler) {
        editHandler = function () {
            lastEditor = {
                cell: {
                    row: null,
                    col: null,
                },
                editor: null,
                gridId: null,
            };
        };
        conf.events.on(types_1.GridEvents.afterEditEnd, editHandler);
    }
    switch (type) {
        case "input":
            return (lastEditor.editor = new InputEditor_1.InputEditor(row, col, conf));
        case "textarea":
            return (lastEditor.editor = new TextAreaEditor_1.TextAreaEditor(row, col, conf));
        case "select":
            return (lastEditor.editor = new SelectEditor_1.SelectEditor(row, col, conf));
        case "datePicker":
            return (lastEditor.editor = new DateEditor_1.DateEditor(row, col, conf));
        case "checkbox":
            return new CheckboxEditor_1.CheckboxEditor(row, col, conf);
        case "multiselect":
        case "combobox":
            return (lastEditor.editor = new ComboboxEditor_1.ComboboxEditor(row, col, conf));
        default:
            return (lastEditor.editor = new InputEditor_1.InputEditor(row, col, conf));
    }
}
exports.getEditor = getEditor;


/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var types_1 = __webpack_require__(4);
var core_1 = __webpack_require__(1);
var InputEditor = /** @class */ (function () {
    function InputEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._input.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("blur", this._handlers.onBlur);
            this._input.removeEventListener("change", this._handlers.onChange);
            if (this._cell.col.type !== "string" && core_1.isNumeric(value)) {
                value = parseFloat(value);
            }
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    InputEditor.prototype.toHTML = function () {
        var content = this._cell.row[this._cell.col.id];
        if (this._input) {
            content = this._input.value;
        }
        this._config.$editable.editor = this;
        return dom_1.el("input.dhx_cell-editor.dhx_cell-editor__input", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
            value: content,
        });
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var types_1 = __webpack_require__(4);
var SelectEditor = /** @class */ (function () {
    function SelectEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    SelectEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._input.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("blur", this._handlers.onBlur);
            this._input.removeEventListener("keydown", this._handlers.onkeydown);
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    SelectEditor.prototype.toHTML = function () {
        var content = this._cell.col.options || [];
        var selected = this._cell.row[this._cell.col.id];
        if (this._input) {
            selected = this._input.options[this._input.selectedIndex].value;
        }
        var options = content.map(function (item) {
            return dom_1.el("option", {
                selected: item === selected,
            }, item);
        });
        this._config.$editable.editor = this;
        return dom_1.el("select.dhx_cell-editor.dhx_cell-editor__select", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
        }, options);
    };
    SelectEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onkeydown: function (e) {
                if (e.key === "Escape") {
                    _this.endEdit();
                }
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.addEventListener("blur", _this._handlers.onBlur);
                input.addEventListener("keydown", _this._handlers.onkeydown);
            },
        };
    };
    return SelectEditor;
}());
exports.SelectEditor = SelectEditor;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var types_1 = __webpack_require__(4);
var ts_calendar_1 = __webpack_require__(40);
var date_1 = __webpack_require__(12);
var ts_popup_1 = __webpack_require__(18);
var DateEditor = /** @class */ (function () {
    function DateEditor(row, col, config) {
        var _this = this;
        this._config = config;
        this._cell = { row: row, col: col };
        this._calendar = new ts_calendar_1.Calendar(null, { dateFormat: col.format });
        var value = this._cell.row[this._cell.col.id];
        var format = this._calendar.config.dateFormat;
        if (date_1.stringToDate(value, format, true) || value instanceof Date) {
            this._calendar.setValue(value);
            this._value = this._calendar.getValue();
            this._cell.row[this._cell.col.id] = this._value;
        }
        this._popup = new ts_popup_1.Popup({ css: "dhx_widget--bordered" });
        this._popup.attach(this._calendar);
        this._calendar.events.on(ts_calendar_1.CalendarEvents.change, function () {
            _this.endEdit(false, true);
        });
        this._popup.events.on(ts_popup_1.PopupEvents.afterHide, function () {
            _this.endEdit();
        });
        this._initHandlers();
    }
    DateEditor.prototype.endEdit = function (withoutSave, calendarChange) {
        var _this = this;
        if (!this._handlers) {
            return;
        }
        var format = this._calendar.config.dateFormat;
        var value = this._cell.row[this._cell.col.id];
        if (!withoutSave) {
            if (value instanceof Date || calendarChange) {
                this._value = this._calendar.getValue();
                this._input.value = this._value;
                this._popup.hide();
                return;
            }
            else if (date_1.stringToDate(this._input.value, format, true) &&
                ((value && this._input.value.length === value.length) || !value)) {
                this._value = this._input.value;
            }
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [this._value, this._cell.row, this._cell.col])) {
            this._input.removeEventListener("focus", this._handlers.onFocus);
            this._input.removeEventListener("change", this._handlers.onChange);
            document.removeEventListener("mousedown", this._handlers.onOuterClick);
            dom_1.awaitRedraw().then(function () {
                _this._popup.destructor();
                _this._calendar.destructor();
            });
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [this._value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    DateEditor.prototype.toHTML = function () {
        var value = this._cell.row[this._cell.col.id];
        this._config.$editable.editor = this;
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        return dom_1.el("input.dhx_cell-editor.dhx_cell-editor__input.dhx_cell-editor__datepicker", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _key: "cell_editor",
            dhx_id: "cell_editor",
            value: value,
        });
    };
    DateEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onFocus: function () {
                dom_1.awaitRedraw().then(function () {
                    _this._popup.show(_this._input, {
                        centering: true,
                        mode: "bottom",
                    });
                });
            },
            onChange: function () {
                _this.endEdit();
            },
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input && _this._input.contains(e.target);
                    var isPopup = _this._popup &&
                        _this._popup.getRootNode() &&
                        _this._popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this._popup.hide();
                    }
                }
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                _this._input.addEventListener("focus", _this._handlers.onFocus);
                _this._input.addEventListener("change", _this._handlers.onChange);
                input.focus();
                input.setSelectionRange(input.value.length, input.value.length);
            },
        };
    };
    return DateEditor;
}());
exports.DateEditor = DateEditor;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var view_1 = __webpack_require__(7);
var ts_timepicker_1 = __webpack_require__(108);
var helper_1 = __webpack_require__(118);
var date_1 = __webpack_require__(12);
var types_1 = __webpack_require__(62);
var html_1 = __webpack_require__(2);
var Calendar = /** @class */ (function (_super) {
    __extends(Calendar, _super);
    function Calendar(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, core_1.extend({
            weekStart: "sunday",
            thisMonthOnly: false,
            dateFormat: window && window.dhx && window.dhx.dateFormat,
            width: "250px",
        }, config)) || this;
        _this._selected = [];
        _this.events = new events_1.EventSystem();
        _this.config.disabledDates = _this.config.disabledDates || _this.config.block; // TODO: remove suite_7.0
        _this.config.mode = _this.config.mode || _this.config.view; // TODO: remove suite_7.0
        if (!_this.config.dateFormat) {
            if (_this.config.timePicker) {
                if (_this.config.timeFormat === 12) {
                    _this.config.dateFormat = "%d/%m/%y %h:%i %A";
                }
                else {
                    _this.config.dateFormat = "%d/%m/%y %H:%i";
                }
            }
            else {
                _this.config.dateFormat = "%d/%m/%y";
            }
        }
        if (_this.config.value) {
            _this._setSelected(_this.config.value);
        }
        if (_this.config.date) {
            _this._currentDate = date_1.DateHelper.toDateObject(_this.config.date, _this.config.dateFormat);
        }
        else if (_this._getSelected()) {
            _this._currentDate = date_1.DateHelper.copy(_this._getSelected());
        }
        else {
            _this._currentDate = new Date();
        }
        switch (_this.config.mode) {
            case "month":
                _this._currentViewMode = "month";
                break;
            case "year":
                _this._currentViewMode = "year";
                break;
            default:
                _this._currentViewMode = "calendar";
        }
        _this._initHandlers();
        if (_this.config.timePicker) {
            _this._timepicker = new ts_timepicker_1.Timepicker(null, {
                timeFormat: _this.config.timeFormat,
                controls: true,
            });
            var initTime = _this._getSelected() || new Date();
            _this._timepicker.setValue(initTime);
            _this._time = _this._timepicker.getValue();
            _this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterClose, function () {
                _this._timepicker.setValue(_this._time);
                _this.showDate(null, "calendar");
            });
            _this._timepicker.events.on(ts_timepicker_1.TimepickerEvents.afterApply, function () {
                var _a = _this._timepicker.getValue(true), hour = _a.hour, minute = _a.minute, AM = _a.AM;
                var oldDate = _this._getSelected();
                var newDate = date_1.DateHelper.withHoursAndMinutes(_this._getSelected() || new Date(), hour, minute, AM);
                if (_this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                    _this._selected[_this._selected.length - 1] = newDate;
                    _this.events.fire(types_1.CalendarEvents.change, [newDate, oldDate, true]);
                }
                _this._time = _this._timepicker.getValue();
                _this.showDate(null, "calendar");
            });
        }
        var render = function () { return _this._draw(); };
        _this.mount(container, dom_1.create({ render: render }));
        return _this;
    }
    Calendar.prototype.setValue = function (value) {
        if (!value || (value instanceof Array && value.length === 0)) {
            return false;
        }
        this._selected = [];
        var currentDate = value instanceof Array ? value[0] : value;
        var date = date_1.DateHelper.toDateObject(currentDate, this.config.dateFormat);
        var oldDate = date_1.DateHelper.copy(this._getSelected());
        if (!this.events.fire(types_1.CalendarEvents.beforeChange, [date, oldDate, false])) {
            return false;
        }
        this._setSelected(value);
        if (this._timepicker) {
            this._timepicker.setValue(date);
            this._time = this._timepicker.getValue();
        }
        this.showDate(this._getSelected());
        this.events.fire(types_1.CalendarEvents.change, [date, oldDate, false]);
        this.paint();
        return true;
    };
    Calendar.prototype.getValue = function (asDateObject) {
        var _this = this;
        if (asDateObject === void 0) { asDateObject = false; }
        if (!this._selected[0]) {
            return "";
        }
        if (this.config.range) {
            return asDateObject
                ? this._selected.map(function (date) { return date_1.DateHelper.copy(date); })
                : this._selected.map(function (date) { return date_1.getFormattedDate(_this.config.dateFormat, date); });
        }
        return asDateObject
            ? date_1.DateHelper.copy(this._selected[0])
            : date_1.getFormattedDate(this.config.dateFormat, this._selected[0]);
    };
    Calendar.prototype.getCurrentMode = function () {
        return this._currentViewMode;
    };
    Calendar.prototype.showDate = function (date, mode) {
        if (date) {
            this._currentDate = date_1.DateHelper.copy(date);
        }
        if (mode) {
            this._currentViewMode = mode;
        }
        this.paint();
    };
    Calendar.prototype.destructor = function () {
        this._linkedCalendar && this._unlink();
        this._timepicker && this._timepicker.destructor();
        this.events && this.events.clear();
        this.config = this.events = null;
        this._uid = this._selected = this._currentDate = this._currentViewMode = this._handlers = this._timepicker = this._time = null;
        this.unmount();
    };
    Calendar.prototype.clear = function () {
        var oldDate = this.getValue(true);
        if (this.config.timePicker) {
            this._timepicker.clear();
            this._time = this._timepicker.getValue();
        }
        this._selected = [];
        this.showDate(null, this.config.mode);
        this.events.fire(types_1.CalendarEvents.change, [this.getValue(true), oldDate, false]);
    };
    Calendar.prototype.link = function (targetCalendar) {
        var _this = this;
        if (this._linkedCalendar) {
            this._unlink();
        }
        this._linkedCalendar = targetCalendar;
        var rawLowerDate = this.getValue(true);
        var rawUpperDate = targetCalendar.getValue(true);
        var lowerDate = rawLowerDate && date_1.DateHelper.dayStart(rawLowerDate);
        var upperDate = rawUpperDate && date_1.DateHelper.dayStart(rawUpperDate);
        var getRangeClass = function (date) {
            if (date_1.DateHelper.isSameDay(upperDate, lowerDate)) {
                return null;
            }
            var positionInRange = "dhx_calendar-day--in-range";
            if (date_1.DateHelper.isSameDay(date, lowerDate)) {
                positionInRange += " dhx_calendar-day--first-date";
            }
            if (date_1.DateHelper.isSameDay(date, upperDate)) {
                positionInRange += " dhx_calendar-day--last-date";
            }
            return positionInRange;
        };
        var rangeMark = function (date) {
            if (lowerDate && upperDate) {
                return date >= lowerDate && date <= upperDate && getRangeClass(date);
            }
        };
        if (!this.config.$rangeMark || !this._linkedCalendar.config.$rangeMark) {
            this.config.$rangeMark = this._linkedCalendar.config.$rangeMark = rangeMark;
        }
        if (!this.config.disabledDates || !this._linkedCalendar.config.disabledDates) {
            this.config.disabledDates = function (date) {
                if (upperDate) {
                    return date > upperDate;
                }
            };
            this._linkedCalendar.config.disabledDates = function (date) {
                if (lowerDate) {
                    return date < lowerDate;
                }
            };
        }
        this.config.thisMonthOnly = true;
        targetCalendar.config.thisMonthOnly = true;
        this.events.on(types_1.CalendarEvents.change, function (date) {
            lowerDate = date_1.DateHelper.dayStart(date);
            _this._linkedCalendar.paint();
        }, "link");
        this._linkedCalendar.events.on(types_1.CalendarEvents.change, function (date) {
            upperDate = date_1.DateHelper.dayStart(date);
            _this.paint();
        }, "link");
        this._linkedCalendar.paint();
        this.paint();
    };
    Calendar.prototype._unlink = function () {
        if (this._linkedCalendar) {
            this.config.$rangeMark = this._linkedCalendar.config.$rangeMark = null;
            this.config.disabledDates = this._linkedCalendar.config.disabledDates = null;
            this.events.detach(types_1.CalendarEvents.change, "link");
            this._linkedCalendar.events.detach(types_1.CalendarEvents.change, "link");
            this._linkedCalendar.paint();
            this._linkedCalendar = null;
        }
    };
    Calendar.prototype._setSelected = function (value) {
        var _this = this;
        var currentDate = value instanceof Array ? value[0] : value;
        var date = date_1.DateHelper.toDateObject(currentDate, this.config.dateFormat);
        if (value instanceof Array && this.config.range) {
            var filterDate_1 = [];
            value.forEach(function (element, index) {
                if (index < 2) {
                    filterDate_1.push(date_1.DateHelper.toDateObject(element, _this.config.dateFormat));
                }
            });
            if (filterDate_1.length === 2 && filterDate_1[0] < filterDate_1[1]) {
                filterDate_1.forEach(function (element) { return _this._selected.push(element); });
            }
            else {
                this._selected[0] = filterDate_1[0];
            }
        }
        else {
            this._selected[0] = date;
        }
    };
    Calendar.prototype._getSelected = function () {
        return this._selected[this._selected.length - 1];
    };
    Calendar.prototype._draw = function () {
        switch (this._currentViewMode) {
            case "calendar":
                this.events.fire(types_1.CalendarEvents.modeChange, ["calendar"]);
                return this._drawCalendar();
            case "month":
                this.events.fire(types_1.CalendarEvents.modeChange, ["month"]);
                return this._drawMonthSelector();
            case "year":
                this.events.fire(types_1.CalendarEvents.modeChange, ["year"]);
                return this._drawYearSelector();
            case "timepicker":
                this.events.fire(types_1.CalendarEvents.modeChange, ["timepicker"]);
                return this._drawTimepicker();
        }
    };
    Calendar.prototype._initHandlers = function () {
        var _this = this;
        var ie_key_map = {
            Up: "ArrowUp",
            Down: "ArrowDown",
            Right: "ArrowRight",
            Left: "ArrowLeft",
            Esc: "Escape",
            Spacebar: "Space",
        };
        var getKey = function (e) {
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                key = String.fromCharCode(e.which);
            }
            else {
                var keyName = e.which === 32 ? e.code : e.key;
                key = html_1.isIE() ? ie_key_map[keyName] || keyName : keyName;
            }
            return key;
        };
        var getVerticalRange = function (decrease) {
            if (decrease === void 0) { decrease = false; }
            var range = 0;
            switch (_this._currentViewMode) {
                case "calendar":
                    range = decrease ? -7 : 7;
                    break;
                case "month":
                    range = decrease ? -4 : 4;
                    break;
                case "year":
                    range = decrease ? -4 : 4;
            }
            return range;
        };
        this._handlers = {
            onkeydown: {
                ".dhx_calendar-year, .dhx_calendar-month, .dhx_calendar-day": function (_e, vn) {
                    switch (getKey(_e)) {
                        case "Enter":
                            _this._selectDate(_e, vn);
                            break;
                        case "ArrowLeft":
                            _this._moveBrowseFocus(_e, vn, -1);
                            break;
                        case "ArrowRight":
                            _this._moveBrowseFocus(_e, vn, 1);
                            break;
                        case "ArrowUp":
                            _this._moveBrowseFocus(_e, vn, getVerticalRange(true));
                            break;
                        case "ArrowDown":
                            _this._moveBrowseFocus(_e, vn, getVerticalRange());
                            break;
                    }
                },
            },
            onclick: {
                ".dhx_calendar-year, .dhx_calendar-month, .dhx_calendar-day": function (_e, vn) {
                    _this._selectDate(_e, vn);
                },
                ".dhx_calendar-action__cancel": function () {
                    _this.showDate(_this._getSelected(), "calendar");
                    _this.events.fire(types_1.CalendarEvents.cancelClick, []);
                },
                ".dhx_calendar-action__show-month": function () { return _this.showDate(null, "month"); },
                ".dhx_calendar-action__show-year": function () { return _this.showDate(null, "year"); },
                ".dhx_calendar-action__next": function () {
                    var newDate;
                    switch (_this._currentViewMode) {
                        case "calendar":
                            newDate = date_1.DateHelper.addMonth(_this._currentDate, 1);
                            break;
                        case "month":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, 1);
                            break;
                        case "year":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, 12);
                    }
                    _this.showDate(newDate);
                },
                ".dhx_calendar-action__prev": function () {
                    var newDate;
                    switch (_this._currentViewMode) {
                        case "calendar":
                            newDate = date_1.DateHelper.addMonth(_this._currentDate, -1);
                            break;
                        case "month":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, -1);
                            break;
                        case "year":
                            newDate = date_1.DateHelper.addYear(_this._currentDate, -12);
                    }
                    _this.showDate(newDate);
                },
                ".dhx_calendar-action__show-timepicker": function () {
                    _this._currentViewMode = "timepicker";
                    _this.paint();
                },
            },
            onmouseover: {
                ".dhx_calendar-day": function (event, node) {
                    _this.events.fire(types_1.CalendarEvents.dateMouseOver, [new Date(node.attrs._date), event]);
                    _this.events.fire(types_1.CalendarEvents.dateHover, [new Date(node.attrs._date), event]); // TODO: remove suite_7.0
                },
            },
        };
    };
    Calendar.prototype._getData = function (date) {
        var _this = this;
        this._isSelectedInCurrentRange = false;
        var firstDay = this.config.weekStart === "monday" ? 1 : 0;
        var first = date_1.DateHelper.weekStart(date_1.DateHelper.monthStart(date), firstDay);
        var data = [];
        var weeksCount = 6;
        var currentDate = first;
        while (weeksCount--) {
            var currentWeek = date_1.DateHelper.getWeekNumber(currentDate);
            var disabledDays = 0;
            var daysCount = 7;
            var days = [];
            var _loop_1 = function () {
                var isDateWeekEnd = date_1.DateHelper.isWeekEnd(currentDate);
                var isCurrentMonth = date.getMonth() === currentDate.getMonth();
                var isBlocked = this_1.config.disabledDates && this_1.config.disabledDates(currentDate);
                var css = [];
                if (this_1.config.range && this_1._selected[0] && this_1._selected[1]) {
                    var getRangeClass_1 = function () {
                        if (date_1.DateHelper.isSameDay(_this._selected[0], _this._selected[1])) {
                            return null;
                        }
                        return "dhx_calendar-day--in-range";
                    };
                    var rangeMark = function () {
                        if (_this._selected[0] && _this._selected[1]) {
                            var firstDate = date_1.DateHelper.dayStart(_this._selected[0]);
                            var lastDate = date_1.DateHelper.dayStart(_this._selected[1]);
                            return currentDate >= firstDate && currentDate <= lastDate && getRangeClass_1();
                        }
                    };
                    this_1.config.$rangeMark = rangeMark;
                }
                if (isDateWeekEnd && isCurrentMonth) {
                    css.push("dhx_calendar-day--weekend");
                }
                if (!isCurrentMonth) {
                    if (this_1.config.thisMonthOnly) {
                        disabledDays++;
                        css.push("dhx_calendar-day--hidden");
                    }
                    else {
                        css.push("dhx_calendar-day--muffled");
                    }
                }
                if (this_1.config.mark) {
                    var markedCss = this_1.config.mark(currentDate);
                    if (markedCss) {
                        css.push(markedCss);
                    }
                }
                if (this_1.config.$rangeMark) {
                    var rangeMark = this_1.config.$rangeMark(currentDate);
                    if (rangeMark) {
                        css.push(rangeMark);
                    }
                }
                if (isBlocked) {
                    if (isDateWeekEnd) {
                        css.push("dhx_calendar-day--weekend-disabled");
                    }
                    else {
                        css.push("dhx_calendar-day--disabled");
                    }
                }
                this_1._selected.forEach(function (selected, index) {
                    if (selected && date_1.DateHelper.isSameDay(selected, currentDate)) {
                        _this._isSelectedInCurrentRange = true;
                        var dayCss = "dhx_calendar-day--selected";
                        if (_this.config.range) {
                            dayCss += " dhx_calendar-day--selected-" + (index === 0 ? "first " : "last");
                        }
                        css.push(dayCss);
                    }
                });
                days.push({
                    date: currentDate,
                    day: currentDate.getDate(),
                    css: css.join(" "),
                });
                currentDate = date_1.DateHelper.addDay(currentDate);
            };
            var this_1 = this;
            while (daysCount--) {
                _loop_1();
            }
            data.push({
                weekNumber: currentWeek,
                days: days,
                disabledWeekNumber: disabledDays === 7,
            });
        }
        return data;
    };
    Calendar.prototype._drawCalendar = function () {
        var _this = this;
        var date = this._currentDate;
        var _a = this.config, weekStart = _a.weekStart, thisMonthOnly = _a.thisMonthOnly, css = _a.css, timePicker = _a.timePicker, width = _a.width;
        var weekDays = weekStart === "monday" ? __spreadArrays(date_1.locale.daysShort.slice(1), [date_1.locale.daysShort[0]]) : date_1.locale.daysShort;
        var weekDaysHeader = weekDays.map(function (day) { return dom_1.el(".dhx_calendar-weekday", day); });
        var data = this._getData(date);
        var isFirstItem = true;
        var selectedDate = this._getSelected();
        var isDateSelected = function (date) {
            return date && selectedDate && date.getTime() === selectedDate.getTime();
        };
        var getCellAriaAttrs = function (item) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (_this._isSelectedInCurrentRange) {
                    // it is correct that conditions are separated
                    if (isDateSelected(item.date)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        var content = [];
        var weekNumbers = [];
        var weekNumbersWrapper;
        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
            var week = data_1[_i];
            var weekRow = week.days.map(function (item) {
                return dom_1.el("div.dhx_calendar-day", __assign({ class: item.css, _date: item.date }, getCellAriaAttrs(item)), item.day);
            });
            if (this.config.weekNumbers && !(week.disabledWeekNumber && thisMonthOnly)) {
                weekNumbers.push(dom_1.el("div", {
                    class: "dhx_calendar-week-number",
                }, week.weekNumber));
            }
            content = content.concat(weekRow);
        }
        if (this.config.weekNumbers) {
            weekNumbersWrapper = dom_1.el(".dhx_calendar__week-numbers", weekNumbers);
        }
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (this.config.weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        return dom_1.el("div", __assign({ class: widgetClass, style: {
                width: this.config.weekNumbers ? "calc(" + width + " + 48px )" : width,
            } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_calendar-action__show-month.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, date_1.locale.months[date.getMonth()] + " " + date.getFullYear())),
                this.config.weekNumbers &&
                    dom_1.el(".dhx_calendar__dates-wrapper", [
                        dom_1.el(".dhx_calendar__weekdays", weekDaysHeader),
                        dom_1.el(".dhx_calendar__days", content),
                        weekNumbersWrapper,
                    ]),
                !this.config.weekNumbers && dom_1.el(".dhx_calendar__weekdays", weekDaysHeader),
                !this.config.weekNumbers && dom_1.el(".dhx_calendar__days", content),
                timePicker
                    ? dom_1.el(".dhx_timepicker__actions", [
                        dom_1.el("button.dhx_calendar__timepicker-button." +
                            "dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__show-timepicker", { type: "button" }, [
                            dom_1.el("span.dhx_button__icon.dxi.dxi-clock-outline"),
                            dom_1.el("span.dhx_button__text", this._time),
                        ]),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawMonthSelector = function () {
        var date = this._currentDate;
        var currentMonth = date.getMonth();
        var currentYear = this._getSelected() ? this._getSelected().getFullYear() : null;
        var _a = this.config, css = _a.css, timePicker = _a.timePicker, weekNumbers = _a.weekNumbers, width = _a.width, mode = _a.mode;
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        var isFirstItem = true;
        var isCurrentYear = currentYear === date.getFullYear();
        var isMonthSelected = function (i) { return isCurrentYear && currentMonth === i; };
        var getCellAriaAttrs = function (item, i) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (isCurrentYear) {
                    // it is correct that conditions are separated
                    if (isMonthSelected(i)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        return dom_1.el("div", __assign({ class: widgetClass, style: {
                width: weekNumbers ? "calc(" + width + " + 48px)" : width,
            } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_calendar-action__show-year.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, date.getFullYear())),
                dom_1.el(".dhx_calendar__months", date_1.locale.monthsShort.map(function (item, i) {
                    return dom_1.el("div", __assign(__assign({ class: "dhx_calendar-month" +
                            (isMonthSelected(i) ? " dhx_calendar-month--selected" : "") }, getCellAriaAttrs(item, i)), { _date: i }), item);
                })),
                mode !== "month"
                    ? dom_1.el(".dhx_calendar__actions", [
                        dom_1.el("button.dhx_button.dhx_button--color_primary.dhx_button--view_link.dhx_button--size_small.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__cancel", { type: "button" }, date_1.locale.cancel),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawYearSelector = function () {
        var _this = this;
        var date = this._currentDate;
        var yearsDiapason = date_1.DateHelper.getTwelweYears(date);
        var _a = this.config, css = _a.css, timePicker = _a.timePicker, weekNumbers = _a.weekNumbers, width = _a.width, mode = _a.mode;
        var widgetClass = "dhx_calendar dhx_widget" +
            (css ? " " + css : "") +
            (timePicker ? " dhx_calendar--with_timepicker" : "") +
            (weekNumbers ? " dhx_calendar--with_week-numbers" : "");
        var isFirstItem = true;
        var isSelectedYearInRange = this._getSelected() && yearsDiapason.includes(this._getSelected().getFullYear());
        var isYearSelected = function (item) { return _this._getSelected() && item === _this._getSelected().getFullYear(); };
        var getCellAriaAttrs = function (item) {
            var attrs = {
                role: "button",
                tabindex: -1,
                "aria-pressed": "false",
            };
            if (item) {
                if (isSelectedYearInRange) {
                    // it is correct that conditions are separated
                    if (isYearSelected(item)) {
                        attrs["tabindex"] = 0;
                        attrs["aria-pressed"] = "true";
                    }
                }
                else if (isFirstItem) {
                    attrs["tabindex"] = 0;
                }
                isFirstItem = false;
            }
            return attrs;
        };
        return dom_1.el("div", __assign({ class: widgetClass, style: { width: weekNumbers ? "calc(" + width + " + 48px)" : width } }, this._handlers), [
            dom_1.el(".dhx_calendar__wrapper", [
                this._drawHeader(dom_1.el("button.dhx_button.dhx_button--view_link.dhx_button--size_small.dhx_button--color_secondary.dhx_button--circle", {
                    "aria-live": "polite",
                    type: "button",
                }, yearsDiapason[0] + "-" + yearsDiapason[yearsDiapason.length - 1])),
                dom_1.el(".dhx_calendar__years", yearsDiapason.map(function (item) {
                    return dom_1.el("div", __assign({ class: "dhx_calendar-year" +
                            (isYearSelected(item) ? " dhx_calendar-year--selected" : ""), _date: item }, getCellAriaAttrs(item)), item);
                })),
                mode !== "year" && mode !== "month"
                    ? dom_1.el(".dhx_calendar__actions", [
                        dom_1.el("button.dhx_button.dhx_button--color_primary.dhx_button--view_link.dhx_button--size_small.dhx_button--width_full.dhx_button--circle.dhx_calendar-action__cancel", { type: "button" }, date_1.locale.cancel),
                    ])
                    : null,
            ]),
        ]);
    };
    Calendar.prototype._drawHeader = function (actionContent) {
        return dom_1.el(".dhx_calendar__navigation", [
            dom_1.el("button.dhx_calendar-navigation__button.dhx_calendar-action__prev" +
                helper_1.linkButtonClasses +
                ".dhx_button--icon.dhx_button--circle", {
                "aria-label": "prev",
                type: "button",
            }, [dom_1.el(".dhx_button__icon.dxi.dxi-chevron-left")]),
            actionContent,
            dom_1.el("button.dhx_calendar-navigation__button.dhx_calendar-action__next" +
                helper_1.linkButtonClasses +
                ".dhx_button--icon.dhx_button--circle", {
                "aria-label": "next",
                type: "button",
            }, [dom_1.el(".dhx_button__icon.dxi.dxi-chevron-right")]),
        ]);
    };
    Calendar.prototype._drawTimepicker = function () {
        var _a = this.config, css = _a.css, weekNumbers = _a.weekNumbers, width = _a.width;
        return dom_1.el(".dhx_widget.dhx-calendar", {
            class: css ? " " + css : "",
            style: { width: weekNumbers ? "calc(" + width + " + 48px)" : width },
        }, [dom_1.inject(this._timepicker.getRootView())]);
    };
    Calendar.prototype._selectDate = function (_e, vn) {
        var date = vn.attrs._date;
        var oldDate = date_1.DateHelper.copy(this._getSelected());
        switch (this._currentViewMode) {
            case "calendar": {
                var mergedDate = this.config.timePicker
                    ? date_1.DateHelper.mergeHoursAndMinutes(date, this._getSelected() || this._currentDate)
                    : date;
                if (!this.events.fire(types_1.CalendarEvents.beforeChange, [mergedDate, oldDate, true])) {
                    return;
                }
                if (this.config.range && this._selected.length === 1 && this._selected[0] < mergedDate) {
                    this._selected.push(mergedDate);
                }
                else {
                    this._selected = [];
                    this._selected[0] = mergedDate;
                }
                vn.el.blur();
                this.showDate(this._getSelected());
                this.events.fire(types_1.CalendarEvents.change, [date, oldDate, true]);
                break;
            }
            case "month":
                if (this.config.mode !== "month") {
                    date_1.DateHelper.setMonth(this._currentDate, date);
                    this.showDate(null, "calendar");
                    this.events.fire(types_1.CalendarEvents.monthSelected, [date]);
                }
                else {
                    var newDate = date_1.DateHelper.fromYearAndMonth(this._currentDate.getFullYear() || this._getSelected().getFullYear(), date);
                    if (!this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                        return;
                    }
                    this._currentDate = newDate;
                    this._selected[0] = newDate;
                    this.events.fire(types_1.CalendarEvents.change, [this._getSelected(), oldDate, true]);
                    this.events.fire(types_1.CalendarEvents.monthSelected, [date]);
                    this.paint();
                }
                break;
            case "year":
                if (this.config.mode !== "year") {
                    date_1.DateHelper.setYear(this._currentDate, date);
                    this.showDate(null, "month");
                    this.events.fire(types_1.CalendarEvents.yearSelected, [date]);
                }
                else {
                    var newDate = date_1.DateHelper.fromYear(date);
                    if (!this.events.fire(types_1.CalendarEvents.beforeChange, [newDate, oldDate, true])) {
                        return;
                    }
                    this._currentDate = newDate;
                    this._selected[0] = newDate;
                    this.events.fire(types_1.CalendarEvents.change, [this._getSelected(), oldDate, true]);
                    this.events.fire(types_1.CalendarEvents.yearSelected, [date]);
                    this.paint();
                }
        }
    };
    Calendar.prototype._moveBrowseFocus = function (e, node, range) {
        if (node) {
            var nextNode = node.parent.body[node.idx + range];
            if (nextNode) {
                var $nextNode = nextNode.el;
                if ($nextNode) {
                    e.target.tabIndex = -1;
                    $nextNode.tabIndex = 0;
                    $nextNode.focus({ preventScroll: true });
                }
            }
        }
    };
    return Calendar;
}(view_1.View));
exports.Calendar = Calendar;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(109));
__export(__webpack_require__(61));


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var view_1 = __webpack_require__(7);
var ts_layout_1 = __webpack_require__(21);
var ts_slider_1 = __webpack_require__(113);
var en_1 = __webpack_require__(116);
var helper_1 = __webpack_require__(117);
var types_1 = __webpack_require__(61);
var html_1 = __webpack_require__(2);
function validate(value, max) {
    if (isNaN(value)) {
        return 0;
    }
    return Math.min(max, Math.max(0, value));
}
var Timepicker = /** @class */ (function (_super) {
    __extends(Timepicker, _super);
    function Timepicker(container, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, container, core_1.extend({
            timeFormat: 24,
            controls: false,
            valueFormat: "string",
            actions: false,
        }, config)) || this;
        _this.events = new events_1.EventSystem(_this);
        _this._time = {
            hour: 0,
            minute: 0,
            AM: true,
        };
        if (_this.config.timeFormat === 12) {
            _this._time.hour = 12;
        }
        _this.config.controls = _this.config.controls || _this.config.actions; // TODO: remove suite_7.0
        _this.config.value && _this._setValue(_this.config.value);
        _this._initUI(container);
        _this._initHandlers();
        _this._initEvents();
        return _this;
    }
    Timepicker.prototype.getValue = function (asOBject) {
        if (this.config.timeFormat === 12)
            this._time.hour = this._time.hour % 12 || 12;
        var _a = this._time, h = _a.hour, m = _a.minute, isAM = _a.AM;
        if (asOBject) {
            var obj = {
                hour: h,
                minute: m,
            };
            if (this.config.timeFormat === 12) {
                obj.AM = isAM;
            }
            return obj;
        }
        return ((h < 10 ? "0" + h : h) +
            ":" +
            (m < 10 ? "0" + m : m) +
            (this.config.timeFormat === 12 ? (isAM ? "AM" : "PM") : ""));
    };
    Timepicker.prototype.setValue = function (value) {
        this._setValue(value);
        this._hoursSlider.setValue(this._time.hour);
        this._minutesSlider.setValue(this._time.minute);
        this._inputsView.paint();
    };
    Timepicker.prototype.clear = function () {
        if (this.config.timeFormat === 24) {
            this.setValue("00:00");
        }
        else {
            this.setValue("12:00AM");
        }
    };
    Timepicker.prototype.destructor = function () {
        this._minutesSlider && this._minutesSlider.destructor();
        this._hoursSlider && this._hoursSlider.destructor();
        this.events && this.events.clear();
        this.layout && this.layout.destructor();
        this.config = this.events = null;
        this._handlers = this._time = this._inputsView = this._minutesSlider = this._hoursSlider = null;
        this.unmount();
    };
    Timepicker.prototype.getRootView = function () {
        return this.layout.getRootView();
    };
    Timepicker.prototype._setValue = function (value) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var m = 0;
        var h = 0;
        var isPM;
        if (typeof value === "number") {
            value = new Date(value);
        }
        if (value instanceof Date) {
            m = value.getMinutes();
            h = value.getHours();
        }
        else if (Array.isArray(value)) {
            h = validate(value[0], 23);
            m = validate(value[1], 59);
            if (value[2] && value[2].toLowerCase() === "pm") {
                isPM = true;
            }
        }
        else if (typeof value === "string") {
            var matches = value.match(/\d+/g);
            h = validate(+matches[0], 23);
            m = validate(+matches[1], 59);
            if (value.toLowerCase().includes("pm")) {
                isPM = true;
            }
        }
        else if (typeof value === "object" &&
            value.hasOwnProperty("hour") &&
            value.hasOwnProperty("minute")) {
            h = value.hour;
            m = value.minute;
            isPM = !value.AM;
        }
        if (isPM && h < 12) {
            h += 12;
        }
        if (this.config.timeFormat === 12 && !helper_1.isTimeCheck(value) && h >= 12)
            isPM = true;
        return (this._time = {
            hour: h,
            minute: m,
            AM: !isPM,
        });
    };
    Timepicker.prototype._initUI = function (container) {
        var _this = this;
        var layoutConfig = {
            gravity: false,
            css: "dhx_widget dhx_timepicker " +
                (this.config.css ? this.config.css : "") +
                (this.config.controls ? " dhx_timepicker--with-controls" : ""),
            rows: [
                {
                    id: "timepicker",
                    css: "dhx_timepicker__inputs",
                },
                {
                    id: "hour-slider",
                    css: "dhx_timepicker__hour",
                },
                {
                    id: "minute-slider",
                    css: "dhx_timepicker__minute",
                },
            ],
        };
        if (this.config.controls) {
            layoutConfig.rows.unshift({
                id: "close-action",
                css: "dhx_timepicker__close",
            });
            layoutConfig.rows.push({
                id: "save-action",
                css: "dhx_timepicker__save",
            });
        }
        var layout = (this.layout = new ts_layout_1.Layout(container, layoutConfig));
        var timepicker = dom_1.create({
            render: function () { return _this._draw(); },
        });
        var inputsView = (this._inputsView = view_1.toViewLike(timepicker));
        var mSlider = (this._minutesSlider = new ts_slider_1.Slider(null, {
            min: 0,
            max: 59,
            step: 1,
            tooltip: false,
            labelPosition: "top",
            label: en_1.default.minutes,
            value: this.config.value ? this._time.minute : 0,
        }));
        var hSlider = (this._hoursSlider = new ts_slider_1.Slider(null, {
            min: 0,
            max: 23,
            step: 1,
            tooltip: false,
            labelPosition: "top",
            label: en_1.default.hours,
            value: this.config.value ? (this._time.hour === 12 && this._time.AM ? 0 : this._time.hour) : 0,
        }));
        layout.getCell("timepicker").attach(inputsView);
        layout.getCell("hour-slider").attach(hSlider);
        layout.getCell("minute-slider").attach(mSlider);
        if (this.config.controls) {
            var save = function () {
                return dom_1.el("button.dhx_timepicker__button-save.dhx_button.dhx_button--view_flat.dhx_button--color_primary.dhx_button--size_small.dhx_button--circle.dhx_button--width_full", {
                    onclick: _this._outerHandlers.save,
                    type: "button",
                }, en_1.default.save);
            };
            var close_1 = function () {
                return dom_1.el("button.dhx_timepicker__button-close.dhx_button.dhx_button--view_link.dhx_button--size_medium.dhx_button--view_link.dhx_button--color_secondary.dhx_button--icon.dhx_button--circle", {
                    _ref: "close",
                    onclick: _this._outerHandlers.close,
                    type: "button",
                    "aria-label": "close timepicker",
                }, [dom_1.el("span.dhx_button__icon.dxi.dxi-close")]);
            };
            layout.getCell("save-action").attach(save);
            layout.getCell("close-action").attach(close_1);
        }
    };
    Timepicker.prototype._initHandlers = function () {
        var _this = this;
        var setMinutes = function (element) {
            var min = validate(parseInt(element.value, 10), 59);
            element.value = min.toString();
            _this._minutesSlider.setValue(min);
        };
        var setHours = function (element) {
            var hour = validate(parseInt(element.value, 10), 23);
            element.value = hour.toString();
            _this._minutesSlider.setValue(hour);
        };
        this._handlers = {
            onchange: {
                ".dhx_timepicker-input--hour": function (e) { return setHours(e.target); },
                ".dhx_timepicker-input--minutes": function (e) { return setMinutes(e.target); },
            },
            oninput: {
                ".dhx_timepicker-input--hour": function (e) {
                    if (!html_1.isSafari() && !html_1.isFirefox())
                        return;
                    setHours(e.target);
                },
                ".dhx_timepicker-input--minutes": function (e) {
                    if (!html_1.isSafari() && !html_1.isFirefox())
                        return;
                    setMinutes(e.target);
                },
            },
        };
        this._outerHandlers = {
            close: function () {
                if (!_this.events.fire(types_1.TimepickerEvents.beforeClose, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ])) {
                    return;
                }
                _this.events.fire(types_1.TimepickerEvents.afterClose, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]);
                _this.events.fire(types_1.TimepickerEvents.close, []); // TODO: remove suite_7.0
            },
            save: function () {
                if (!_this.events.fire(types_1.TimepickerEvents.beforeApply, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]))
                    return;
                _this.events.fire(types_1.TimepickerEvents.afterApply, [
                    _this.getValue(_this.config.valueFormat === "timeObject"),
                ]);
                _this.events.fire(types_1.TimepickerEvents.apply, [_this.getValue()]); // TODO: remove suite_7.0
                _this.events.fire(types_1.TimepickerEvents.save, [_this._time]); // TODO: remove suite_7.0
            },
        };
    };
    Timepicker.prototype._initEvents = function () {
        var _this = this;
        this._hoursSlider.events.on(ts_slider_1.SliderEvents.change, function (value) {
            if (value < _this._hoursSlider.config.min || value > _this._hoursSlider.config.max) {
                return;
            }
            if (_this.config.timeFormat === 12) {
                _this._time.AM = value < 12;
                _this._time.hour = value % 12 || 12;
            }
            else {
                _this._time.hour = value;
            }
            _this.events.fire(types_1.TimepickerEvents.change, [
                _this.getValue(_this.config.valueFormat === "timeObject"),
            ]);
            _this._inputsView.paint();
        });
        this._minutesSlider.events.on(ts_slider_1.SliderEvents.change, function (value) {
            if (value < _this._minutesSlider.config.min || value > _this._minutesSlider.config.max) {
                return;
            }
            _this._time.minute = value;
            _this.events.fire(types_1.TimepickerEvents.change, [
                _this.getValue(_this.config.valueFormat === "timeObject"),
            ]);
            _this._inputsView.paint();
        });
    };
    Timepicker.prototype._draw = function () {
        return dom_1.el(".dhx_timepicker-inputs", __assign({}, this._handlers), [
            dom_1.el("input.dhx_timepicker-input.dhx_timepicker-input--hour", {
                _key: "hour",
                _ref: "hour",
                value: this.getValue(true).hour.toString().length > 1
                    ? this.getValue(true).hour
                    : "0" + this.getValue(true).hour,
                "aria-label": "hours",
            }),
            dom_1.el("span.dhx_timepicker-delimer", ":"),
            dom_1.el("input.dhx_timepicker-input.dhx_timepicker-input--minutes", {
                _key: "minute",
                value: this.getValue(true).minute.toString().length > 1
                    ? this.getValue(true).minute
                    : "0" + this.getValue(true).minute,
                "aria-label": "minutes",
            }),
            this.config.timeFormat === 12
                ? dom_1.el(".dhx_timepicker-ampm", this._time.AM ? "AM" : "PM")
                : null,
        ]);
    };
    return Timepicker;
}(view_1.View));
exports.Timepicker = Timepicker;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function getBlockRange(block1, block2, isXLayout) {
    if (isXLayout === void 0) { isXLayout = true; }
    if (isXLayout) {
        return {
            min: block1.left + window.pageXOffset,
            max: block2.right + window.pageXOffset,
        };
    }
    return {
        min: block1.top + window.pageYOffset,
        max: block2.bottom + window.pageYOffset,
    };
}
exports.getBlockRange = getBlockRange;
function getMarginSize(config, xLayout) {
    if (!config) {
        return 0;
    }
    if (config.type === "space" || (config.type === "wide" && xLayout)) {
        return 10;
    }
    return 0;
}
exports.getMarginSize = getMarginSize;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Layout_1 = __webpack_require__(57);
var ProCell_1 = __webpack_require__(112);
var ProLayout = /** @class */ (function (_super) {
    __extends(ProLayout, _super);
    function ProLayout(parent, config) {
        return _super.call(this, parent, config) || this;
    }
    ProLayout.prototype._createCell = function (cell) {
        var view;
        if (cell.rows || cell.cols || cell.views) {
            cell.parent = this._root;
            view = new ProLayout(this, cell);
        }
        else {
            view = new ProCell_1.ProCell(this, cell);
        }
        // FIxME
        this._root._all[view.id] = view;
        if (cell.init) {
            cell.init(view, cell);
        }
        return view;
    };
    return ProLayout;
}(Layout_1.Layout));
exports.ProLayout = ProLayout;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var ScrollView_1 = __webpack_require__(29);
var Cell_1 = __webpack_require__(58);
var ProCell = /** @class */ (function (_super) {
    __extends(ProCell, _super);
    function ProCell(parent, config) {
        var _this = _super.call(this, parent, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () {
            return _this._getFirstRootView();
        });
        return _this;
    }
    ProCell.prototype._getFirstRootView = function (self) {
        if (self === void 0) { self = this; }
        return self.getParent() && self.getParent().getRootView()
            ? self.getParent().getRootView()
            : this._getFirstRootView(self.getParent());
    };
    ProCell.prototype.toVDOM = function (nodes) {
        var _a;
        if (this.config === null) {
            this.config = {};
        }
        if (this.config.hidden) {
            return;
        }
        var style = this._calculateStyle();
        var stylePadding = core_1.isDefined(this.config.padding)
            ? !isNaN(Number(this.config.padding))
                ? { padding: this.config.padding + "px" }
                : { padding: this.config.padding }
            : "";
        var fullStyle = this.config.full || this.config.html ? style : __assign(__assign({}, style), stylePadding);
        var kids;
        if (!this.config.html) {
            if (this._ui) {
                var view = this._ui.getRootView();
                if (view.render) {
                    view = dom_1.inject(view);
                }
                // kids = [view];
                kids = view ? [this.scrollView.render(view)] : view || null;
            }
            else {
                // kids = nodes || null;
                kids = nodes ? this.scrollView.render([nodes]) : nodes || null;
            }
        }
        var resizer = this.config.resizable && !this._isLastCell() && !this.config.collapsed
            ? dom_1.el(".dhx_layout-resizer." +
                (this._isXDirection() ? "dhx_layout-resizer--x" : "dhx_layout-resizer--y"), __assign(__assign({}, this._resizerHandlers), { _ref: "resizer_" + this._uid }), [
                dom_1.el("span.dhx_layout-resizer__icon", {
                    class: "dxi " +
                        (this._isXDirection() ? "dxi-dots-vertical" : "dxi-dots-horizontal"),
                }),
            ])
            : null;
        var handlers = {};
        if (this.config.on) {
            for (var key in this.config.on) {
                handlers["on" + key] = this.config.on[key];
            }
        }
        var typeClass = "";
        var isParent = this.config.cols || this.config.rows;
        if (this.config.type && isParent) {
            switch (this.config.type) {
                case "line":
                    typeClass = " dhx_layout-line";
                    break;
                case "wide":
                    typeClass = " dhx_layout-wide";
                    break;
                case "space":
                    typeClass = " dhx_layout-space";
                    break;
                default:
                    break;
            }
        }
        var htmlContent = dom_1.el(".dhx_layout-cell-content", {
            ".innerHTML": this.config.html,
            _key: this._uid + "_html",
            style: stylePadding,
        });
        var cell = dom_1.el("div", __assign(__assign((_a = { _key: this._uid, _ref: this._uid }, _a["aria-label"] = this.config.id ? "tab-content-" + this.config.id : null, _a), handlers), { class: this._getCss(false) +
                (this.config.css ? " " + this.config.css : "") +
                (this.config.collapsed ? " dhx_layout-cell--collapsed" : "") +
                (this.config.resizable ? " dhx_layout-cell--resizable" : "") +
                (this.config.type && !this.config.full ? typeClass : ""), style: fullStyle }), this.config.full
            ? [
                dom_1.el("div", {
                    tabindex: this.config.collapsable ? "0" : "-1",
                    class: "dhx_layout-cell-header" +
                        (this._isXDirection()
                            ? " dhx_layout-cell-header--col"
                            : " dhx_layout-cell-header--row") +
                        (this.config.collapsable ? " dhx_layout-cell-header--collapseble" : "") +
                        (this.config.collapsed ? " dhx_layout-cell-header--collapsed" : "") +
                        (((this.getParent() || {}).config || {}).isAccordion
                            ? " dhx_layout-cell-header--accordion"
                            : ""),
                    style: {
                        height: this.config.headerHeight,
                    },
                    onclick: this._handlers.toggle,
                    onkeydown: this._handlers.enterCollapse,
                }, [
                    this.config.headerIcon &&
                        dom_1.el("span.dhx_layout-cell-header__icon", {
                            class: this.config.headerIcon,
                        }),
                    this.config.headerImage &&
                        dom_1.el(".dhx_layout-cell-header__image-wrapper", [
                            dom_1.el("img", {
                                src: this.config.headerImage,
                                class: "dhx_layout-cell-header__image",
                            }),
                        ]),
                    this.config.header &&
                        dom_1.el("h3.dhx_layout-cell-header__title", this.config.header),
                    this.config.collapsable
                        ? dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: this._getCollapseIcon(),
                        })
                        : dom_1.el("div.dhx_layout-cell-header__collapse-icon", {
                            class: "dxi dxi-empty",
                        }),
                ]),
                !this.config.collapsed
                    ? dom_1.el("div", {
                        style: __assign(__assign({}, stylePadding), { height: "calc(100% - " + (this.config.headerHeight || 37) + "px)" }),
                        ".innerHTML": this.config.html,
                        class: this._getCss(true) +
                            " dhx_layout-cell-content" +
                            (this.config.type ? typeClass : ""),
                    }, kids)
                    : null,
            ]
            : this.config.html &&
                !(this.config.rows &&
                    this.config.cols &&
                    this.config.views)
                ? [
                    !this.config.collapsed
                        ? this.scrollView && this.scrollView.config.enable
                            ? this.scrollView.render([htmlContent], this._uid)
                            : htmlContent
                        : null,
                ]
                : kids);
        return resizer ? [cell, resizer] : cell;
    };
    return ProCell;
}(Cell_1.Cell));
exports.ProCell = ProCell;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(114));
__export(__webpack_require__(60));


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var KeyManager_1 = __webpack_require__(20);
var view_1 = __webpack_require__(7);
var ts_popup_1 = __webpack_require__(18);
var types_1 = __webpack_require__(60);
var html_1 = __webpack_require__(2);
function normalizeValue(value, min, max) {
    if (value < min) {
        return min;
    }
    if (value > max) {
        return max;
    }
    return value;
}
function parseValue(value, min, max) {
    var values;
    if (value === undefined) {
        values = [];
    }
    else if (Array.isArray(value)) {
        values = value;
    }
    else if (typeof value === "string") {
        values = value.split(",").map(function (v) { return parseInt(v, 10); });
    }
    else {
        values = [value];
    }
    values[0] = values[0] === undefined ? min : normalizeValue(values[0], min, max);
    values[1] = values[1] === undefined ? max : normalizeValue(values[1], min, max);
    return values;
}
var Slider = /** @class */ (function (_super) {
    __extends(Slider, _super);
    function Slider(container, config) {
        var _this = _super.call(this, container, core_1.extend({
            mode: "horizontal",
            min: 0,
            max: 100,
            step: 1,
            tooltip: true,
        }, config)) || this;
        _this._disabled = false;
        _this.config.helpMessage = _this.config.helpMessage || _this.config.help; // TODO: remove suite_7.0
        if (_this.config.thumbLabel !== undefined) {
            _this.config.tooltip = _this.config.thumbLabel; // TODO: remove suite_7.0
        }
        if (_this.config.labelInline) {
            _this.config.labelPosition = "left"; // TODO: remove suite_7.0
        }
        _this.events = new events_1.EventSystem(_this);
        _this._axis = _this.config.mode === "horizontal" ? "clientX" : "clientY";
        _this._initStartPosition();
        _this._keyManager = new KeyManager_1.KeyManager(function () {
            var _a;
            var activeEl = document.activeElement;
            var element = (_a = _this.getRootView().refs[_this._isExtraActive ? "extraRunner" : "runner"]) === null || _a === void 0 ? void 0 : _a.el;
            return activeEl === element;
        });
        _this._initHotkeys();
        var vNode = dom_1.create({
            render: function () { return _this._draw(); },
            hooks: {
                didMount: function () { return _this._calcSliderPosition(); },
                didRedraw: function () { return _this._calcSliderPosition(); },
            },
        });
        _this._initHandlers();
        _this.mount(container, vNode);
        return _this;
    }
    Slider.prototype.disable = function () {
        this._disabled = true;
        this.paint();
    };
    Slider.prototype.enable = function () {
        this._disabled = false;
        this.paint();
    };
    Slider.prototype.isDisabled = function () {
        return this._disabled;
    };
    Slider.prototype.focus = function (extra) {
        this.getRootView().refs[extra ? "extraRunner" : "runner"].el.focus();
    };
    Slider.prototype.blur = function () {
        this.getRootView().refs[this._isExtraActive ? "extraRunner" : "runner"].el.blur();
    };
    Slider.prototype.getValue = function () {
        var res;
        if (this.config.range) {
            var a = this._getValue(this._currentPosition);
            var b = this._getValue(this._extraCurrentPosition);
            res = a < b ? [a, b] : [b, a];
        }
        else {
            res = [this._getValue(this._currentPosition)];
        }
        return res;
    };
    Slider.prototype.setValue = function (value) {
        var old = this._getValue(this._currentPosition);
        if (Array.isArray(value) && value.length > 1) {
            var oldExtra = this._getValue(this._extraCurrentPosition);
            this._setValue(value[0], false);
            this.events.fire(types_1.SliderEvents.change, [value[0], old, false]);
            this._setValue(value[1], true);
            this.events.fire(types_1.SliderEvents.change, [value[1], oldExtra, true]);
        }
        else {
            value = parseFloat(value);
            if (!isNaN(value)) {
                this._setValue(value);
                this.events.fire(types_1.SliderEvents.change, [value, old, false]);
            }
            else {
                throw new Error("Wrong value type, for more info check documentation https://docs.dhtmlx.com/suite/slider__api__slider_setvalue_method.html");
            }
        }
        this.paint();
    };
    Slider.prototype.destructor = function () {
        this._keyManager && this._keyManager.destructor();
        document.body.contains(this._tooltip) && document.body.removeChild(this._tooltip);
        this._tooltip = null;
        this.unmount();
    };
    Slider.prototype._calcSliderPosition = function () {
        var root = this.getRootView();
        if (!root) {
            return;
        }
        var tracker = root.refs.track.el;
        var rect = tracker.getBoundingClientRect();
        this._offsets = {
            left: rect.left + window.pageXOffset,
            top: rect.top + window.pageYOffset,
        };
        this._length = this.config.mode === "horizontal" ? rect.width : rect.height;
    };
    Slider.prototype._initHotkeys = function () {
        var _this = this;
        var handlers = {
            arrowLeft: function (e) {
                e.preventDefault();
                _this._move(-_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowRight: function (e) {
                e.preventDefault();
                _this._move(_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowUp: function (e) {
                e.preventDefault();
                _this._move(_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
            arrowDown: function (e) {
                e.preventDefault();
                _this._move(-_this.config.step, e.target.classList.contains("dhx_slider__thumb--extra"));
            },
        };
        for (var key in handlers) {
            this._keyManager.addHotKey(key, handlers[key]);
        }
    };
    Slider.prototype._move = function (value, forExtra) {
        if (this.config.inverse) {
            value = -value;
        }
        var _a = this.config, max = _a.max, min = _a.min;
        var oldValue = forExtra
            ? this._getValue(this._extraCurrentPosition)
            : this._getValue(this._currentPosition);
        var newValue = oldValue + value;
        this._setValue(oldValue + value, forExtra);
        if (newValue > max || newValue < min) {
            newValue = oldValue;
        }
        this.events.fire(types_1.SliderEvents.change, [newValue, oldValue, forExtra]);
        this.paint();
    };
    Slider.prototype._initStartPosition = function () {
        var _a = this.config, max = _a.max, min = _a.min, range = _a.range;
        var _b = parseValue(this.config.value, this.config.min, this.config.max), value = _b[0], extraValue = _b[1];
        this._currentPosition = ((value - min) / (max - min)) * 100;
        if (range) {
            this._extraCurrentPosition = ((max - extraValue) / (max - min)) * 100;
        }
        this._currentPosition = ((value - min) / (max - min)) * 100;
        if (range) {
            this._extraCurrentPosition = ((extraValue - min) / (max - min)) * 100;
        }
        if (this._isInverse()) {
            this._currentPosition = 100 - this._currentPosition;
            if (range) {
                this._extraCurrentPosition = 100 - this._extraCurrentPosition;
            }
        }
    };
    Slider.prototype._getValue = function (value) {
        if (this._isInverse()) {
            value = 100 - value;
        }
        var _a = this.config, min = _a.min, max = _a.max, step = _a.step;
        if (value === 100) {
            return max;
        }
        if (value === 0) {
            return min;
        }
        var val = (value * (max - min)) / 100;
        var remain = val % step;
        var rounder = remain >= step / 2 ? step : 0;
        var result = Number(min) + Number(val) - remain + rounder;
        return +result.toFixed(5);
    };
    Slider.prototype._setValue = function (val, forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        var _a = this.config, max = _a.max, min = _a.min;
        if (val > max || val < min) {
            return false;
        }
        var rawValue = ((val - min) / (max - min)) * 100;
        var newValue = this._isInverse() ? 100 - rawValue : rawValue;
        if (forExtra) {
            this._extraCurrentPosition = newValue;
        }
        else {
            this._currentPosition = newValue;
        }
    };
    Slider.prototype._initHandlers = function () {
        var _this = this;
        var sliderMove = function (e) {
            !e.targetTouches && e.preventDefault();
            var currentPosition = e.targetTouches ? e.targetTouches[0][_this._axis] : e[_this._axis];
            var x = ((currentPosition - _this._getBegining()) / _this._length) * 100;
            if (_this._findNewDirection) {
                if (Math.abs(_this._currentPosition - x) < 1) {
                    return;
                }
                if (x > _this._currentPosition) {
                    _this._possibleRange = [_this._currentPosition, 100];
                }
                else {
                    _this._possibleRange = [0, _this._currentPosition];
                }
                _this._findNewDirection = null;
            }
            if (_this._inSide(x)) {
                _this._updatePosition(x, _this._isExtraActive);
            }
            _this.paint();
        };
        var sliderEnd = function (e) {
            _this.events.fire(types_1.SliderEvents.mouseup, [e]);
            setTimeout(function () {
                _this._isMouseMoving = false;
                _this.paint();
            }, 4);
            if (!e.targetTouches) {
                document.removeEventListener("mouseup", sliderEnd);
                document.removeEventListener("mousemove", sliderMove);
            }
            else {
                document.removeEventListener("touchend", sliderEnd);
                document.removeEventListener("touchmove", sliderMove);
            }
        };
        var sliderStart = function (e) {
            if (_this._disabled || e.which === 3) {
                return;
            }
            _this.events.fire(types_1.SliderEvents.mousedown, [e]);
            _this._isMouseMoving = true;
            var active;
            if (e.target.classList.contains("dhx_slider__thumb--extra")) {
                _this._isExtraActive = true;
                active = _this._extraCurrentPosition;
            }
            else {
                _this._isExtraActive = false;
                active = _this._currentPosition;
            }
            _this._findNewDirection = null;
            // define possible range
            if (_this.config.range) {
                var _a = _this._currentPosition > _this._extraCurrentPosition
                    ? [_this._currentPosition, _this._extraCurrentPosition]
                    : [_this._extraCurrentPosition, _this._currentPosition], more = _a[0], less = _a[1];
                if (_this._currentPosition === _this._extraCurrentPosition) {
                    _this._findNewDirection = active;
                    _this._possibleRange = [0, 100];
                }
                else if (active < more) {
                    _this._possibleRange = [0, more];
                }
                else {
                    _this._possibleRange = [less, 100];
                }
            }
            else {
                _this._possibleRange = [0, 100];
            }
        };
        if (this.config.helpMessage) {
            this._helper = new ts_popup_1.Popup({
                css: "dhx_tooltip dhx_tooltip--forced dhx_tooltip--light",
            });
            this._helper.attachHTML(this.config.helpMessage);
        }
        this._handlers = {
            showHelper: function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this._helper.show(e.target);
            },
            onmousedown: function (e) {
                sliderStart(e);
                document.addEventListener("mousemove", sliderMove);
                document.addEventListener("mouseup", sliderEnd);
            },
            ontouchstart: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                sliderStart(e);
                document.addEventListener("touchmove", sliderMove);
                document.addEventListener("touchend", sliderEnd);
                _this.paint();
            },
            ontouchend: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                _this.paint();
            },
            onlabelClick: function () {
                var refs = _this.getRootView().refs;
                refs.runner.el.focus();
            },
            onclick: function (e) {
                if (_this._disabled || _this._isMouseMoving || e.which === 3) {
                    return;
                }
                var x = ((e[_this._axis] - _this._getBegining()) / _this._length) * 100;
                var refs = _this.getRootView().refs;
                if (_this.config.range) {
                    var dist = Math.abs(_this._currentPosition - x);
                    var extraDist = Math.abs(_this._extraCurrentPosition - x);
                    if (dist < extraDist) {
                        _this._updatePosition(x, false);
                        refs.runner.el.focus();
                    }
                    else {
                        _this._updatePosition(x, true);
                        refs.extraRunner.el.focus();
                    }
                }
                else {
                    _this._updatePosition(x, false);
                    refs.runner.el.focus();
                }
                _this.paint();
            },
            onmouseover: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = true;
                _this.paint();
            },
            onmouseout: function (e) {
                _this._setTooltip(e);
                _this._mouseIn = false;
                _this.paint();
            },
            onfocus: function (e) {
                _this._setTooltip(e);
                _this._focusIn = true;
                _this.events.fire(types_1.SliderEvents.focus, []);
                _this.paint();
            },
            onblur: function (e) {
                _this._setTooltip(e);
                _this._focusIn = false;
                _this.events.fire(types_1.SliderEvents.blur, []);
                _this.paint();
            },
            onkeydown: function (e) {
                _this.events.fire(types_1.SliderEvents.keydown, [e]);
            },
        };
    };
    Slider.prototype._getBegining = function () {
        return this.config.mode === "horizontal"
            ? this._offsets.left - window.pageXOffset
            : this._offsets.top - window.pageYOffset;
    };
    Slider.prototype._inSide = function (x) {
        var range = this._possibleRange;
        if (x < range[0]) {
            this._updatePosition(range[0], this._isExtraActive);
            return false;
        }
        if (x > range[1]) {
            this._updatePosition(range[1], this._isExtraActive);
            return false;
        }
        return true;
    };
    Slider.prototype._updatePosition = function (x, extra) {
        if (extra === void 0) { extra = false; }
        if (x > 100) {
            x = 100;
        }
        if (x < 0) {
            x = 0;
        }
        var _a = this.config, max = _a.max, min = _a.min;
        var position = extra ? this._extraCurrentPosition : this._currentPosition;
        var oldValue = this._getValue(position);
        var newValue = this._getValue(x);
        if (oldValue === newValue) {
            return;
        }
        var rawValue = ((newValue - min) / (max - min)) * 100;
        var value = this._isInverse() ? 100 - rawValue : rawValue;
        if (extra) {
            this._extraCurrentPosition = value;
        }
        else {
            this._currentPosition = value;
        }
        this.events.fire(types_1.SliderEvents.change, [newValue, oldValue, extra]);
    };
    Slider.prototype._getRunnerStyle = function (forExtra) {
        var _a;
        if (forExtra === void 0) { forExtra = false; }
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var pos = forExtra ? this._extraCurrentPosition : this._currentPosition;
        return _a = {},
            _a[direction] = pos + "%",
            _a;
    };
    Slider.prototype._isInverse = function () {
        return ((this.config.inverse && this.config.mode === "horizontal") ||
            (!this.config.inverse && this.config.mode === "vertical"));
    };
    Slider.prototype._getRunnerCss = function (forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        return ("dhx_slider__thumb" +
            (forExtra ? " dhx_slider__thumb--extra" : "") +
            (this._isMouseMoving && ((forExtra && this._isExtraActive) || (!forExtra && !this._isExtraActive))
                ? " dhx_slider__thumb--active"
                : "") +
            (this._disabled ? " dhx_slider__thumb--disabled" : "") +
            (this._isNullable(forExtra ? this._extraCurrentPosition : this._currentPosition) &&
                !this.config.range
                ? " dhx_slider__thumb--nullable"
                : ""));
    };
    Slider.prototype._draw = function () {
        var _a = this.config, labelPosition = _a.labelPosition, mode = _a.mode, hiddenLabel = _a.hiddenLabel, tick = _a.tick, majorTick = _a.majorTick, css = _a.css, helpMessage = _a.helpMessage;
        var labelStyle = html_1.getLabelStyle(__assign(__assign({}, this.config), { required: false }));
        if (this._tooltip && (!this._mouseIn || !this._focusIn || !this._isMouseMoving)) {
            document.body.contains(this._tooltip) && document.body.removeChild(this._tooltip);
        }
        return dom_1.el("div", {
            class: "dhx_slider" +
                " dhx_slider--mode_" +
                mode +
                (labelPosition === "left" ? " dhx_slider--label-inline" : "") +
                (hiddenLabel ? " dhx_slider--label_sr" : "") +
                (tick ? " dhx_slider--ticks" : "") +
                (majorTick ? " dhx_slider--major-ticks" : "") +
                (css ? " " + css : "") +
                (this._disabled ? " dhx_slider--disabled" : ""),
        }, [
            labelStyle
                ? dom_1.el("label.dhx_label.dhx_slider__label", {
                    style: labelStyle.style,
                    class: helpMessage ? "dhx_label--with-help" : "",
                    onclick: this._handlers.onlabelClick,
                }, helpMessage
                    ? [
                        labelStyle.label && dom_1.el("span.dhx_label__holder", labelStyle.label),
                        dom_1.el("span.dhx_label-help.dxi.dxi-help-circle-outline", {
                            tabindex: "0",
                            role: "button",
                            onclick: this._handlers.showHelper,
                        }),
                    ]
                    : labelStyle.label)
                : null,
            this._drawSlider(),
        ]);
    };
    Slider.prototype._drawSlider = function () {
        return dom_1.el(".dhx_widget.dhx_slider__track-holder", {
            dhx_widget_id: this._uid,
        }, [
            dom_1.el(".dhx_slider__track", {
                _ref: "track",
                onmouseover: this._handlers.onmouseover,
                onmouseout: this._handlers.onmouseout,
                onclick: this._handlers.onclick,
            }, [
                this._getDetector(),
                dom_1.el("div", {
                    _ref: "runner",
                    class: this._getRunnerCss(),
                    ontouchstart: this._handlers.ontouchstart,
                    ontouchend: this._handlers.ontouchend,
                    onmousedown: this._handlers.onmousedown,
                    onfocus: this._handlers.onfocus,
                    onblur: this._handlers.onblur,
                    onkeydown: this._handlers.onkeydown,
                    style: this._getRunnerStyle(),
                    tabindex: 0,
                }),
                this.config.tooltip && (this._mouseIn || this._focusIn || this._isMouseMoving)
                    ? this._drawTooltip()
                    : null,
                this.config.tooltip &&
                    this.config.range &&
                    (this._mouseIn || this._focusIn || this._isMouseMoving)
                    ? this._drawTooltip(true)
                    : null,
                this.config.range
                    ? dom_1.el("div", {
                        _ref: "extraRunner",
                        class: this._getRunnerCss(true),
                        ontouchstart: this._handlers.ontouchstart,
                        ontouchend: this._handlers.ontouchend,
                        onmousedown: this._handlers.onmousedown,
                        onfocus: this._handlers.onfocus,
                        onblur: this._handlers.onblur,
                        onkeydown: this._handlers.onkeydown,
                        style: this._getRunnerStyle(true),
                        tabindex: 0,
                    })
                    : null,
            ]),
            this.config.tick ? this._drawTicks() : null,
        ]);
    };
    Slider.prototype._getDetector = function () {
        var _a, _b, _c;
        if (this._disabled) {
            return dom_1.el(".dhx_slider__range");
        }
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var size = this.config.mode === "horizontal" ? "width" : "height";
        if (this.config.range) {
            var _d = this._currentPosition > this._extraCurrentPosition
                ? [this._currentPosition, this._extraCurrentPosition]
                : [this._extraCurrentPosition, this._currentPosition], more = _d[0], less = _d[1];
            return dom_1.el(".dhx_slider__range", {
                style: (_a = {},
                    _a[direction] = less + "%",
                    _a[size] = more - less + "%",
                    _a),
            });
        }
        if (this._isInverse()) {
            return dom_1.el(".dhx_slider__range", {
                style: (_b = {},
                    _b[direction] = this._currentPosition + "%",
                    _b[size] = 100 - this._currentPosition + "%",
                    _b),
            });
        }
        return dom_1.el(".dhx_slider__range", {
            style: (_c = {},
                _c[direction] = 0,
                _c[size] = this._currentPosition + "%",
                _c),
        });
    };
    Slider.prototype._drawTooltip = function (forExtra) {
        if (forExtra === void 0) { forExtra = false; }
        if (this._activeTooltip === "none" || !this.getRootView())
            return;
        var pos = this._activeTooltip === "extraTooltip" ? this._extraCurrentPosition : this._currentPosition;
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        var classNameModifiers = "";
        if ((forExtra && this._isExtraActive) || (!forExtra && !this._isExtraActive)) {
            classNameModifiers += " dhx_slider__thumb-label--active";
        }
        if (!this._tooltip) {
            this._tooltip = document.createElement("div");
        }
        var coords = this._activeTooltip === "tooltip"
            ? this.getRootView().refs.runner.el.getBoundingClientRect()
            : this.getRootView().refs.extraRunner.el.getBoundingClientRect();
        this._tooltip.className = "dhx_slider__thumb-label" + classNameModifiers;
        this._tooltip.style.left = coords.x + (direction === "left" ? 6 : -30) + window.pageXOffset + "px";
        this._tooltip.style.top = coords.y + (direction === "left" ? -30 : 6) + window.pageYOffset + "px";
        this._tooltip.innerText = this._getValue(pos).toString();
        document.body.appendChild(this._tooltip);
    };
    Slider.prototype._getTicks = function () {
        var _a = this.config, max = _a.max, min = _a.min, step = _a.step, tick = _a.tick, majorTick = _a.majorTick;
        var len = max - min;
        var tickLength = (step * tick) / len;
        var positions = [];
        var length = 0;
        var index = 0;
        while (length < 1) {
            var tickValue = +(Number(min) + length * len).toFixed(5);
            var isMultiple = index % majorTick === 0;
            positions.push({
                position: (this._isInverse() ? (1 - length) * 100 : length * 100) + "%",
                isMultiple: isMultiple,
                label: isMultiple && typeof this.config.tickTemplate === "function"
                    ? this.config.tickTemplate(tickValue)
                    : null,
            });
            length += tickLength;
            index++;
        }
        positions.push({
            position: (this._isInverse() ? 0 : 100) + "%",
            isMultiple: true,
            label: typeof this.config.tickTemplate === "function" ? this.config.tickTemplate(max) : null,
        });
        return positions;
    };
    Slider.prototype._drawTicks = function () {
        var direction = this.config.mode === "horizontal" ? "left" : "top";
        return dom_1.el(".dhx_slider__ticks-holder", this._getTicks().map(function (tick) {
            var _a;
            return dom_1.el("div", {
                class: "dhx_slider__tick" + (tick.isMultiple ? " dhx_slider__tick--major" : ""),
                style: (_a = {},
                    _a[direction] = tick.position,
                    _a),
            }, tick.label !== undefined ? [dom_1.el(".dhx_slider__tick-label", tick.label)] : null);
        }));
    };
    Slider.prototype._isNullable = function (value) {
        if (this._isInverse()) {
            return value === 100;
        }
        else {
            return value === 0;
        }
    };
    Slider.prototype._setTooltip = function (e) {
        if (e.target.classList.contains("dhx_slider__thumb--extra")) {
            this._activeTooltip = "extraTooltip";
        }
        else if (e.target.classList.contains("dhx_slider__thumb")) {
            this._activeTooltip = "tooltip";
        }
        else {
            this._activeTooltip = "none";
        }
    };
    return Slider;
}(view_1.View));
exports.Slider = Slider;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var html_1 = __webpack_require__(2);
var view_1 = __webpack_require__(7);
var types_1 = __webpack_require__(59);
var Popup = /** @class */ (function (_super) {
    __extends(Popup, _super);
    function Popup(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, null, core_1.extend({}, config)) || this;
        var popup = (_this._popup = document.createElement("div"));
        popup.className = "dhx_widget dhx_popup" + (_this.config.css ? " " + _this.config.css : "");
        popup.style.position = "absolute";
        popup.setAttribute("role", "dialog");
        popup.setAttribute("aria-modal", "true");
        popup.setAttribute("aria-live", "polite");
        _this.mount(popup, dom_1.create({
            render: function () { return _this.toVDOM(); },
        }));
        _this._clickEvent = function (e) { return _this.events.fire(types_1.PopupEvents.click, [e]); };
        _this.events = config.events || new events_1.EventSystem(_this);
        _this._isActive = false;
        return _this;
    }
    Popup.prototype.show = function (node, config, attached) {
        var _this = this;
        if (config === void 0) { config = {}; }
        if (!this.events.fire(types_1.PopupEvents.beforeShow, [node])) {
            return;
        }
        node = html_1.toNode(node);
        if (this._isActive) {
            this._setPopupSize(node, config);
            return;
        }
        if (attached) {
            this.attach(attached);
        }
        this._popup.style.left = "0";
        this._popup.style.top = "0";
        dom_1.awaitRedraw()
            .then(function () {
            _this._setPopupSize(node, config);
            _this._popup.style.position = "fixed";
            document.body.appendChild(_this._popup);
            _this._isActive = true;
        })
            .then(function () {
            _this._popup.style.position = "absolute";
            _this.events.fire(types_1.PopupEvents.afterShow, [node]);
            _this._outerClickDestructor = _this._detectOuterClick(node);
        });
    };
    Popup.prototype.hide = function () {
        this._hide(false, null);
    };
    Popup.prototype.isVisible = function () {
        return this._isActive;
    };
    Popup.prototype.attach = function (name, config) {
        this._html = null;
        if (typeof name === "object") {
            this._ui = name;
        }
        else if (typeof name === "string") {
            this._ui = new window.dhx[name](null, config);
        }
        else if (typeof name === "function") {
            if (name.prototype instanceof view_1.View) {
                this._ui = new name(null, config);
            }
            else {
                this._ui = {
                    getRootView: function () {
                        return name(config);
                    },
                };
            }
        }
        this.paint();
        return this._ui;
    };
    Popup.prototype.attachHTML = function (html) {
        this._html = html;
        this.paint();
    };
    Popup.prototype.getWidget = function () {
        return this._ui;
    };
    Popup.prototype.getContainer = function () {
        return this.getRootView().refs.content.el;
    };
    Popup.prototype.toVDOM = function () {
        var view;
        if (this._html) {
            view = dom_1.el(".dhx_popup__inner-html-content", {
                ".innerHTML": this._html,
            });
        }
        else {
            view = this._ui ? this._ui.getRootView() : null;
            if (view && view.render) {
                view = dom_1.inject(view);
            }
        }
        return dom_1.el("div", {
            class: "dhx_popup-content",
            tabindex: 0,
            onclick: this._clickEvent,
            _key: this._uid,
            _ref: "content",
        }, [view]);
    };
    Popup.prototype.destructor = function () {
        this.hide();
        if (this._outerClickDestructor) {
            this._outerClickDestructor();
        }
        this._popup = null;
    };
    Popup.prototype._setPopupSize = function (node, config, calls) {
        var _this = this;
        if (calls === void 0) { calls = 3; }
        var _a = this._popup.getBoundingClientRect(), width = _a.width, height = _a.height;
        // TODO: IE popup height = 0
        if (this._timeout) {
            clearTimeout(this._timeout);
            this._timeout = null;
        }
        if (calls && (width === 0 || height === 0)) {
            this._timeout = setTimeout(function () {
                if (!_this._isActive) {
                    return;
                }
                _this._setPopupSize(node, config, calls - 1);
                _this._timeout = null;
            });
            return;
        }
        var _b = html_1.fitPosition(node, __assign(__assign({ centering: true, mode: "bottom" }, config), { width: width,
            height: height })), left = _b.left, top = _b.top;
        this._popup.style.left = left;
        this._popup.style.top = top;
        if (config.indent && config.indent !== 0) {
            switch (config.mode) {
                case "top":
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) -
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "bottom":
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "left":
                    this._popup.style.left =
                        parseInt(this._popup.style.left.slice(0, -2), null) -
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                case "right":
                    this._popup.style.left =
                        parseInt(this._popup.style.left.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
                default:
                    this._popup.style.top =
                        parseInt(this._popup.style.top.slice(0, -2), null) +
                            parseInt(config.indent.toString(), null) +
                            "px";
                    break;
            }
        }
    };
    Popup.prototype._detectOuterClick = function (node) {
        var _this = this;
        var outerClick = function (event) {
            var target = event.target;
            while (target) {
                if (target === node || target === _this._popup) {
                    return;
                }
                target = target.parentNode;
            }
            if (_this._hide(true, event)) {
                document.removeEventListener("mousedown", outerClick);
            }
        };
        document.addEventListener("mousedown", outerClick);
        return function () { return document.removeEventListener("mousedown", outerClick); };
    };
    Popup.prototype._hide = function (fromOuterClick, e) {
        if (this._isActive) {
            if (!this.events.fire(types_1.PopupEvents.beforeHide, [fromOuterClick, e])) {
                return false;
            }
            document.body.removeChild(this._popup);
            this._isActive = false;
            if (this._outerClickDestructor) {
                this._outerClickDestructor();
                this._outerClickDestructor = null;
            }
            this.events.fire(types_1.PopupEvents.afterHide, [e]);
            return true;
        }
    };
    return Popup;
}(view_1.View));
exports.Popup = Popup;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var locale = {
    hours: "Hours",
    minutes: "Minutes",
    save: "Save",
};
exports.default = locale;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This function is designed to resolve conflicts with the time setting for the 12 hour format.
 */
function isTimeCheck(value) {
    return /(^12:[0-5][0-9]?AM$)/i.test(value);
}
exports.isTimeCheck = isTimeCheck;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.linkButtonClasses = ".dhx_button.dhx_button--view_link.dhx_button--icon.dhx_button--size_medium.dhx_button--color_secondary";


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var types_1 = __webpack_require__(4);
var CheckboxEditor = /** @class */ (function () {
    function CheckboxEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    CheckboxEditor.prototype.endEdit = function () {
        var value = this._checked;
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.checked = !value;
        }
    };
    CheckboxEditor.prototype.toHTML = function () {
        if (this._checked === undefined) {
            this._checked = this._cell.row[this._cell.col.id];
        }
        var id = core_1.uid();
        return dom_1.el("div.dhx_checkbox.dhx_cell-editor__checkbox", [
            dom_1.el("label", {
                style: {
                    display: "none",
                },
                for: id,
            }, this._checked || "false"),
            dom_1.el("input.dhx_checkbox__input", {
                type: "checkbox",
                _hooks: {
                    didInsert: this._handlers.didInsert,
                },
                _key: "cell_editor",
                dhx_id: "cell_editor",
                checked: this._checked,
                id: id,
                style: {
                    userSelect: "none",
                },
            }),
            dom_1.el("span.dhx_checkbox__visual-input"),
        ]);
    };
    CheckboxEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onClick: function () {
                var value = !_this._input.checked;
                if (_this._config.events.fire(types_1.GridEvents.beforeEditStart, [
                    _this._cell.row,
                    _this._cell.col,
                    "checkbox",
                ])) {
                    _this._checked = value;
                    _this._config.events.fire(types_1.GridEvents.afterEditStart, [
                        _this._cell.row,
                        _this._cell.col,
                        "checkbox",
                    ]);
                    _this.endEdit();
                }
                else {
                    _this._input.checked = !value;
                }
            },
            didInsert: function (node) {
                _this._checkbox = node.el.parentNode.lastChild;
                _this._input = node.el.parentNode.querySelector("input");
                node.el.parentNode.addEventListener("click", _this._handlers.onClick);
            },
        };
    };
    return CheckboxEditor;
}());
exports.CheckboxEditor = CheckboxEditor;


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var types_1 = __webpack_require__(4);
var ts_combobox_1 = __webpack_require__(63);
var FocusManager_1 = __webpack_require__(10);
var ComboboxEditor = /** @class */ (function () {
    function ComboboxEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._initHandlers();
    }
    ComboboxEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            var val = this._input.getValue();
            value = this._cell.col.editorType === "multiselect" ? val.split(",").join(", ") : val;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._input.popup.hide();
            document.removeEventListener("mousedown", this._handlers.onOuterClick);
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            FocusManager_1.focusManager.setFocusId(this._config.gridId);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._input.focus();
        }
    };
    ComboboxEditor.prototype.toHTML = function () {
        var _this = this;
        var content = this._cell.col.options.map(function (item) {
            return typeof item === "string" ? { id: "" + item, value: item } : item;
        }) || [];
        if (!this._input) {
            this._input = new ts_combobox_1.Combobox(null, {
                cellHeight: 37,
                css: "dhx_cell-editor__combobox",
                multiselection: this._cell.col.editorType === "multiselect",
            });
            this._input.data.parse(content);
            var comboValue = this._cell.row[this._cell.col.id];
            var value = this._cell.col.editorType === "multiselect" ? (comboValue || "").split(", ") : comboValue;
            this._input.setValue(value);
            this._input.events.on("keydown", this._handlers.onkeydown);
        }
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        this._config.$editable.editor = this;
        dom_1.awaitRedraw().then(function () {
            var holderNode = _this._input.getRootView().refs.holder.el;
            _this._input.popup.getContainer().style.width = holderNode.offsetWidth + "px";
            _this._input.popup.show(holderNode);
        });
        FocusManager_1.focusManager.setFocusId(this._input._uid);
        return dom_1.inject(this._input.getRootView());
    };
    ComboboxEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input &&
                        _this._input.getRootNode() &&
                        _this._input.getRootNode().contains(e.target);
                    var isPopup = _this._input.popup &&
                        _this._input.popup.getRootNode() &&
                        _this._input.popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this.endEdit();
                    }
                }
            },
            onkeydown: function (e) {
                if (e.key === "Escape" || e.key === "Tab") {
                    _this.endEdit();
                }
            },
        };
    };
    return ComboboxEditor;
}());
exports.ComboboxEditor = ComboboxEditor;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_CODES = {
    BACKSPACE: 8,
    ENTER: 13,
    ESC: 27,
    DOWN_ARROW: 40,
    UP_ARROW: 38,
    LEFT_ARROW: 37,
    RIGHT_ARROW: 39,
};


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var InputEditor_1 = __webpack_require__(123);
function getEditor(item, list) {
    return new InputEditor_1.InputEditor(item, list);
}
exports.getEditor = getEditor;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var types_1 = __webpack_require__(43);
var InputEditor = /** @class */ (function () {
    function InputEditor(item, list) {
        var _this = this;
        this._list = list;
        this._config = list.config;
        this._item = item;
        this._list.events.on(types_1.ListEvents.focusChange, function (index, id) {
            if (_this._mode && id !== _this._item.id) {
                _this.endEdit();
            }
        });
        this._initHandlers();
    }
    InputEditor.prototype.endEdit = function () {
        if (this._input) {
            var value = this._input.value;
            if (this._list.events.fire(types_1.ListEvents.beforeEditEnd, [value, this._item.id])) {
                this._input.removeEventListener("blur", this._handlers.onBlur);
                this._input.removeEventListener("change", this._handlers.onChange);
                this._handlers = {};
                this._mode = false;
                this._list.events.fire(types_1.ListEvents.afterEditEnd, [value, this._item.id]);
            }
            else {
                this._input.focus();
            }
        }
    };
    InputEditor.prototype.toHTML = function () {
        this._mode = true;
        var itemHeight = this._config.itemHeight;
        return dom_1.el(".dhx_input__wrapper", { role: "presentation" }, [
            dom_1.el("div.dhx_input__container", { role: "presentation" }, [
                dom_1.el("input.dhx_input", {
                    class: this._item.css ? " " + this._item.css : "",
                    style: {
                        height: itemHeight,
                        width: "100%",
                        padding: "8px 12px",
                    },
                    _hooks: {
                        didInsert: this._handlers.didInsert,
                    },
                    _key: this._item.id,
                    dhx_id: this._item.id,
                }),
            ]),
        ]);
    };
    InputEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                input.focus();
                input.value = _this._item.value;
                input.setSelectionRange(0, input.value.length);
                input.addEventListener("change", _this._handlers.onChange);
                input.addEventListener("blur", _this._handlers.onBlur);
            },
        };
    };
    return InputEditor;
}());
exports.InputEditor = InputEditor;


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var ScrollView_1 = __webpack_require__(29);
var List_1 = __webpack_require__(65);
var ProList = /** @class */ (function (_super) {
    __extends(ProList, _super);
    function ProList(container, config) {
        var _this = _super.call(this, container, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); });
        _this.paint();
        return _this;
    }
    ProList.prototype.destructor = function () {
        _super.prototype.destructor.call(this);
        this.scrollView = null;
    };
    ProList.prototype.showItem = function (id) {
        var rootView = this.getRootView();
        if (!rootView || !rootView.node || !rootView.node.el || typeof id === "undefined") {
            return;
        }
        var listEl = this.getRootNode();
        if (!listEl) {
            return;
        }
        var virtual = this.config.virtual;
        var index = this.data.getIndex(id);
        var currentPage = Math.floor(index / listEl.children.length) || 0;
        var el = listEl.children[index - listEl.children.length * currentPage];
        if (!virtual && !el)
            return;
        var height = virtual ? parseInt(this.config.itemHeight) : el.clientHeight;
        var top = virtual ? index * height : el.offsetTop;
        if (top >= listEl.scrollTop + listEl.clientHeight - height) {
            listEl.scrollTo(0, top - listEl.clientHeight + height);
        }
        else if (top < listEl.scrollTop) {
            listEl.scrollTo(0, top);
        }
    };
    ProList.prototype._renderList = function () {
        var _this = this;
        var range = this._getRange();
        // mapRange
        var data = this.data.getRawData(range[0], range[1]);
        var kids = data.map(function (obj, index) { return _this._renderItem(obj, index); });
        if (this.config.virtual) {
            kids = __spreadArrays([
                dom_1.el(".div", { style: { height: range[2] + "px" } })
            ], kids, [
                dom_1.el(".div", { style: { height: range[3] + "px" } }),
            ]);
        }
        var scrollViewEnable = this.scrollView && this.scrollView.config.enable;
        var currentClass = (this.config.css ? this.config.css : "") +
            (this.config.multiselection && this.selection.getItem() ? " dhx_no-select--pointer" : "") +
            (scrollViewEnable ? " dhx_list--scroll-view" : "");
        return dom_1.el("ul.dhx_widget.dhx_list", __assign(__assign({ style: {
                "max-height": this.config.height,
                position: "relative",
            }, class: currentClass, dhx_widget_id: this._uid }, this._handlers), this._getListAriaAttrs(this.config, this.data.getLength())), scrollViewEnable ? [].concat(this.scrollView.render(kids)) : kids);
    };
    return ProList;
}(List_1.List));
exports.ProList = ProList;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CLEAR_TIMEOUT = 2000;
var KeyListener = /** @class */ (function () {
    function KeyListener() {
        var _this = this;
        this._sequence = "";
        document.addEventListener("keydown", function (e) {
            if (!_this._isActive) {
                return;
            }
            var key = e.key;
            if (key === "Backspace" && _this._sequence.length > 0) {
                _this._sequence = _this._sequence.slice(0, _this._sequence.length - 1);
                _this._change();
            }
            if (key.length < 2) {
                // handle only single key value
                _this._sequence += key;
                _this._change();
            }
        });
    }
    KeyListener.prototype.startNewListen = function (action) {
        this._isActive = true;
        this._sequence = "";
        this._currentAction = action;
    };
    KeyListener.prototype.endListen = function () {
        this._currentAction = null;
        this.reset();
        this._isActive = false;
    };
    KeyListener.prototype.reset = function () {
        this._sequence = "";
    };
    KeyListener.prototype._change = function () {
        this._currentAction(this._sequence);
        this._addClearTimeout();
    };
    KeyListener.prototype._addClearTimeout = function () {
        var _this = this;
        if (this._clearTimeout) {
            clearTimeout(this._clearTimeout);
        }
        this._clearTimeout = setTimeout(function () {
            _this.reset();
            _this._clearTimeout = null;
        }, CLEAR_TIMEOUT);
    };
    return KeyListener;
}());
exports.KeyListener = KeyListener;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Combobox_1 = __webpack_require__(64);
var ts_list_1 = __webpack_require__(42);
var ts_layout_1 = __webpack_require__(21);
var helper_1 = __webpack_require__(68);
var ProCombobox = /** @class */ (function (_super) {
    __extends(ProCombobox, _super);
    function ProCombobox(element, config) {
        return _super.call(this, element, config) || this;
    }
    ProCombobox.prototype._createLayout = function () {
        var list = (this.list = new ts_list_1.ProList(null, {
            template: this.config.template,
            virtual: this.config.virtual,
            keyNavigation: false,
            multiselection: this.config.multiselection,
            itemHeight: this.config.itemHeight,
            height: this.config.listHeight,
            data: this.data,
        }));
        var layout = (this._layout = new ts_layout_1.ProLayout(this.popup.getContainer(), {
            css: "dhx_combobox-options dhx_combobox__options",
            rows: [
                {
                    id: "select-unselect-all",
                    hidden: !this.config.multiselection || !this.config.selectAllButton,
                },
                { id: "list", height: "content" },
                {
                    id: "not-found",
                    hidden: true,
                },
            ],
            on: {
                click: {
                    ".dhx_combobox__action-select-all": this._handlers.selectAll,
                },
            },
        }));
        layout.getCell("list").attach(list);
        if (this.config.multiselection && this.config.selectAllButton) {
            layout.getCell("select-unselect-all").attach(helper_1.selectAllView);
        }
    };
    return ProCombobox;
}(Combobox_1.Combobox));
exports.ProCombobox = ProCombobox;


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var types_1 = __webpack_require__(4);
var core_1 = __webpack_require__(1);
var data_1 = __webpack_require__(17);
var TextAreaEditor = /** @class */ (function () {
    function TextAreaEditor(row, col, config) {
        this._config = config;
        this._cell = { row: row, col: col };
        this._width = this._cell.col.$width;
        var widthOffset = 0;
        if (this._config.firstColId === this._cell.col.id && this._cell.row.hasOwnProperty("$level")) {
            widthOffset = data_1.getTreeCellWidthOffset(this._cell.row);
        }
        this._width -= widthOffset - 4;
        this._initHandlers();
    }
    TextAreaEditor.prototype.endEdit = function (withoutSave) {
        var value;
        if (!withoutSave) {
            value = this._editor.value;
        }
        if (this._config.events.fire(types_1.GridEvents.beforeEditEnd, [value, this._cell.row, this._cell.col])) {
            this._editor.removeEventListener("blur", this._handlers.onBlur);
            this._editor.removeEventListener("change", this._handlers.onChange);
            this._editor.removeEventListener("input", this._handlers.onInput);
            if (this._cell.col.type !== "string" && core_1.isNumeric(value)) {
                value = parseFloat(value);
            }
            this._cell.row = this._config.datacollection.getItem(this._cell.row.id);
            this._config.events.fire(types_1.GridEvents.afterEditEnd, [value, this._cell.row, this._cell.col]);
        }
        else {
            this._editor.focus();
        }
    };
    TextAreaEditor.prototype.toHTML = function () {
        var value = this._cell.row[this._cell.col.id];
        if (this._editor) {
            value = this._editor.value;
        }
        this._config.$editable.editor = this;
        var css = typeof this._cell.row.height === "undefined" && !this._cell.col.htmlEnable
            ? "dhx_cell-editor dhx_cell-editor__textarea"
            : "dhx_cell-editor dhx_cell-editor__textarea_constant-height";
        return dom_1.el("textarea", {
            _hooks: {
                didInsert: this._handlers.didInsert,
            },
            _ref: "textarea",
            _key: "cell_editor",
            dhx_id: "cell_editor",
            value: value,
            class: css,
            style: {
                width: this._width,
            },
        });
    };
    TextAreaEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onBlur: function () {
                _this.endEdit();
            },
            onChange: function () {
                _this.endEdit();
            },
            onInput: function (event) {
                var _a;
                if (typeof _this._cell.row.height !== "undefined" || _this._cell.col.htmlEnable)
                    return;
                var currentHeight = _this._getCurrentHeight(_this._editor.value, {
                    width: _this._cell.col.$width - 2,
                    maxHeight: _this._config.rowHeight,
                });
                _this._cell.row[_this._cell.col.id] = _this._editor.value;
                var totalHeight = data_1.getCalculatedRowHeight(data_1.getMaxRowHeight(_this._cell.row, _this._config.columns));
                var currentRowHeight = data_1.getCalculatedRowHeight(data_1.getMaxRowHeight((_a = {}, _a[_this._cell.col.id] = _this._cell.row[_this._cell.col.id], _a), _this._config.columns));
                _this._minHeight = totalHeight === currentRowHeight ? _this._config.rowHeight : totalHeight;
                if (currentHeight >= _this._minHeight && currentHeight !== _this._prevHeight) {
                    if (!_this._config.events.fire(types_1.GridEvents.beforeRowResize, [
                        _this._cell.row,
                        event,
                        currentHeight,
                    ])) {
                        return;
                    }
                    _this._config.events.fire(types_1.GridEvents.afterRowResize, [
                        _this._cell.row,
                        event,
                        currentHeight,
                    ]);
                }
                _this._prevHeight = currentHeight;
            },
            didInsert: function (node) {
                _this._editor = node.el;
                _this._editor.focus();
                _this._editor.setSelectionRange(0, _this._editor.value.length);
                _this._editor.addEventListener("change", _this._handlers.onChange);
                _this._editor.addEventListener("blur", _this._handlers.onBlur);
                _this._editor.addEventListener("input", _this._handlers.onInput);
            },
        };
    };
    TextAreaEditor.prototype._getCurrentHeight = function (value, config) {
        config = __assign({ width: 100, maxHeight: 40, lineHeight: 20 }, config);
        var element = document.createElement("textarea");
        element.className = "dhx_cell-editor dhx_cell-editor__textarea";
        element.value = value;
        element.style.width = config.width + "px";
        element.style.lineHeight = config.lineHeight + "px";
        element.style.maxHeight = config.maxHeight + "px";
        element.style.boxSizing = "border-box";
        document.body.appendChild(element);
        var height = this._getElementHeight(element);
        var currentRows = element.value.split("\n").length;
        var calculateRows = Math.round(height / config.lineHeight);
        var calculateHeight = height < config.maxHeight ? config.maxHeight : height;
        document.body.removeChild(element);
        return currentRows === 1 && currentRows === calculateRows ? config.maxHeight : calculateHeight;
    };
    TextAreaEditor.prototype._getElementHeight = function (element) {
        return element.scrollHeight;
    };
    return TextAreaEditor;
}());
exports.TextAreaEditor = TextAreaEditor;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var html_1 = __webpack_require__(2);
var Cells_1 = __webpack_require__(39);
var FixedRows_1 = __webpack_require__(70);
var main_1 = __webpack_require__(11);
function getFixedColsHeader(renderConfig, layout) {
    if (typeof renderConfig.leftSplit !== "number") {
        return;
    }
    var splitHidden = 0;
    for (var index = 0; index < renderConfig.leftSplit; index++) {
        if (renderConfig.columns[index].hidden)
            splitHidden++;
    }
    if (splitHidden === renderConfig.leftSplit) {
        return;
    }
    var columns = renderConfig.columns.slice(0, renderConfig.leftSplit - splitHidden);
    var width = 0;
    for (var _i = 0, columns_1 = columns; _i < columns_1.length; _i++) {
        var col = columns_1[_i];
        width += col.$width;
    }
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var frozenHeaderCols = renderConfig.leftSplit >= 0 &&
        FixedRows_1.getFixedRows(__assign(__assign({}, renderConfig), { currentColumns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.leftSplit }), scroll: { top: 0, left: 0 }, columns: columns }), __assign(__assign({}, layout), { name: "header", position: "top", shifts: { x: 0, y: 0 } }));
    var headerRowsConfig = __assign(__assign({}, layout), { name: "header", position: "top" });
    return (frozenHeaderCols &&
        dom_1.el(".dhx_" + headerRowsConfig.name + "-fixed-cols", __assign({ style: {
                position: "absolute",
                top: 0,
                left: 0,
                maxWidth: width,
                overflow: "hidden",
            } }, getRowAriaAttrs(frozenHeaderCols.length)), frozenHeaderCols.body));
}
exports.getFixedColsHeader = getFixedColsHeader;
function getFixedCols(renderConfig, layout) {
    if (typeof renderConfig.leftSplit !== "number") {
        return;
    }
    var splitHidden = 0;
    for (var index = 0; index < renderConfig.leftSplit; index++) {
        if (renderConfig.columns[index].hidden)
            splitHidden++;
    }
    if (splitHidden === renderConfig.leftSplit) {
        return;
    }
    var scrollBarWidth = renderConfig.$totalWidth <= layout.wrapper.width ? 0 : html_1.getScrollbarWidth();
    var fixedContentHeight = renderConfig.$totalHeight + renderConfig.headerHeight + renderConfig.footerHeight;
    var fixedColsHeight = fixedContentHeight > layout.gridBodyHeight
        ? fixedContentHeight - scrollBarWidth
        : fixedContentHeight < layout.gridBodyHeight - scrollBarWidth
            ? fixedContentHeight
            : layout.gridBodyHeight;
    var columns = renderConfig.columns.slice(0, renderConfig.leftSplit - splitHidden);
    renderConfig.fixedColumnsWidth = main_1.getTotalWidth(columns);
    var fixedCols = Cells_1.getCells(__assign(__assign({}, renderConfig), { columns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.leftSplit }) }));
    var isSticky = layout.sticky;
    var footerRowsConfig = __assign(__assign({}, layout), { name: "footer", position: "bottom" });
    var frozenFooterCols = renderConfig.leftSplit >= 0 &&
        FixedRows_1.getRows(__assign(__assign({}, renderConfig), { currentColumns: columns, $positions: __assign(__assign({}, renderConfig.$positions), { xStart: 0, xEnd: renderConfig.leftSplit }) }), __assign(__assign({}, layout), { name: "footer", position: "bottom" }));
    var footerHeight = 0;
    if (frozenFooterCols) {
        frozenFooterCols.forEach(function (node) { return (footerHeight += node.attrs.style.height); });
    }
    var getRowAriaAttrs = function (count) { return ({
        role: "rowgroup",
        "aria-rowcount": count,
    }); };
    var frozenFooter = isSticky
        ? frozenFooterCols &&
            dom_1.el(".dhx_" + footerRowsConfig.name + "-fixed-cols", __assign({ style: {
                    position: "absolute",
                    top: fixedColsHeight < layout.gridBodyHeight ? fixedColsHeight - footerHeight : null,
                    left: 0,
                    bottom: fixedColsHeight >= layout.gridBodyHeight
                        ? 0 + (isSticky ? scrollBarWidth : 0) + "px"
                        : null,
                } }, getRowAriaAttrs(frozenFooterCols.length)), frozenFooterCols)
        : null;
    var pos = renderConfig.$positions;
    var spans = Cells_1.getSpans(renderConfig, true);
    var getFixedColAriaAttrs = function () { return ({
        role: "presentation",
        "aria-label": "Fixed column",
    }); };
    return [
        dom_1.el(".dhx_grid-fixed-cols-wrap", __assign({ style: {
                height: fixedColsHeight >= layout.gridBodyHeight
                    ? (isSticky
                        ? layout.gridBodyHeight
                        : layout.gridBodyHeight + renderConfig.headerHeight) - scrollBarWidth
                    : fixedColsHeight,
                paddingTop: renderConfig.headerHeight,
                overflow: "hidden",
                width: renderConfig.fixedColumnsWidth,
            } }, getFixedColAriaAttrs()), [
            dom_1.el(".dhx_grid-fixed-cols", __assign(__assign({ style: {
                    top: -renderConfig.scroll.top + renderConfig.headerHeight - 1 + "px",
                    paddingTop: layout.shifts.y,
                    height: renderConfig.$totalHeight,
                    position: "absolute",
                }, _flags: dom_1.KEYED_LIST }, Cells_1.getHandlers(pos.yStart, pos.xStart, renderConfig)), getRowAriaAttrs(renderConfig.data.length)), __spreadArrays([spans && dom_1.el(".dhx_span-spans", { role: "presentation" }, [spans])], fixedCols)),
            dom_1.el(".dhx_frozen-cols-border", { role: "presentation" }),
        ]),
        renderConfig.$footer ? frozenFooter : null,
    ];
}
exports.getFixedCols = getFixedCols;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var ts_combobox_1 = __webpack_require__(63);
var ts_data_1 = __webpack_require__(8);
var types_1 = __webpack_require__(4);
var data_1 = __webpack_require__(17);
var html_1 = __webpack_require__(2);
var core_1 = __webpack_require__(1);
var inputDelay;
function onInput(eventSystem, colId, filter, filterObj, e) {
    var inputHandler = function () {
        var val = html_1.isIE() || html_1.isSafari() ? e.target.value : e.path ? e.path[0].value : e.explicitOriginalTarget.value;
        filterObj.value[colId] = val;
        eventSystem.fire(types_1.GridEvents.filterChange, [val, colId, filter]);
    };
    if (filter === "selectFilter") {
        inputHandler();
        return;
    }
    if (inputDelay) {
        clearTimeout(inputDelay);
    }
    inputDelay = setTimeout(inputHandler, 250);
}
function applyMathMethod(column, config, method, validate) {
    if (!column || !config || !method) {
        return;
    }
    var id = column.id;
    var columnData = validate
        ? validate(id, config.data)
        : config.data.reduce(function (items, item) {
            if (item[id] !== undefined && item[id] !== "" && !isNaN(item[id])) {
                items.push(parseFloat(item[id]));
            }
            return items;
        }, []);
    // [todo] move to treegrid
    var roots = columnData;
    if (config.type === "tree") {
        roots = config.data.reduce(function (total, item) {
            if (item.$level === 0) {
                if (item[id] !== undefined && item[id] !== "" && !isNaN(item[id])) {
                    total.push(parseFloat(item[id]) || 0);
                }
                else {
                    var value_1 = 0;
                    config.datacollection.eachChild(item.id, function (cell) {
                        if (!config.datacollection.haveItems(cell.id)) {
                            value_1 += parseFloat(cell[id]);
                        }
                    });
                    total.push(value_1);
                }
            }
            return total;
        }, []);
    }
    return method(columnData, roots);
}
function getContent() {
    var _this = this;
    return {
        inputFilter: {
            element: {},
            toHtml: function (column, config) {
                var id = core_1.uid();
                var colId = column.id.toString();
                this.element[colId] = dom_1.el("div.dhx_grid-filter__label.dxi.dxi-magnify", { "aria-label": "Type to search", _ref: column.id + "_filter" }, [
                    dom_1.el("label", {
                        style: {
                            display: "none",
                        },
                        "aria-label": "Type to search",
                        for: id,
                    }, "Type to search"),
                    dom_1.el("input", {
                        type: "text",
                        class: "dhx_input dhx_grid-filter",
                        oninput: [onInput, config.events, column.id, "inputFilter", this],
                        _key: column.id,
                        id: id,
                        value: this.value[column.id] || "",
                    }),
                ]);
                return this.element[colId];
            },
            match: function (value, match) {
                var res = "";
                for (var i = 0; i < match.length; i++) {
                    var char = match.charCodeAt(i);
                    if ((char > 32 && char < 48) || char === 63 || (char > 90 && char < 95) || char === 124) {
                        res += "\\" + match[i];
                    }
                    else {
                        res += match[i];
                    }
                }
                return new RegExp("" + res, "i").test(value);
            },
            value: {},
        },
        selectFilter: {
            element: {},
            toHtml: function (column, config) {
                var _this = this;
                var colId = column.id.toString();
                this.element[colId] = dom_1.el("label.dhx_grid-filter__label.dxi.dxi-menu-down", { _ref: column.id + "_filter" }, [
                    dom_1.el("select.dxi.dxi-menu-down", {
                        type: "text",
                        class: "dhx_input dhx_grid-filter dhx_grid-filter--select",
                        onchange: [onInput, config.events, column.id, "selectFilter", this],
                        _key: column.id,
                    }, __spreadArrays([
                        dom_1.el("option", { value: "" }, "")
                    ], column.$uniqueData.map(function (val) {
                        val = val !== null && val !== void 0 ? val : "";
                        return (val !== "" &&
                            dom_1.el("option", {
                                value: val,
                                selected: _this.value[column.id] === val.toString(),
                            }, val));
                    }))),
                ]);
                return this.element[colId];
            },
            match: function (value, match) { return (match ? value && value.toString() == match : true); },
            value: {},
        },
        comboFilter: {
            element: {},
            toHtml: function (column, config) {
                var combo;
                var colId = column.id.toString();
                if (!this.element[colId] && config.events) {
                    var conf = column.header.filter(function (item) { return item.filterConfig !== undefined; })[0];
                    if (conf && conf.filterConfig) {
                        combo = new ts_combobox_1.Combobox(null, Object.assign({}, conf.filterConfig));
                    }
                    else {
                        combo = new ts_combobox_1.Combobox(null, {});
                    }
                    combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                    config.events.on(ts_data_1.DataEvents.load, function () {
                        combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                    });
                    this.element[colId] = combo;
                    combo.events.on("change", function (id) {
                        if (id) {
                            var value = void 0;
                            var haveIds = Array.isArray(id)
                                ? id.find(function (item) { return combo.data.getItem(item); })
                                : combo.data.getItem(id);
                            if (haveIds) {
                                value = combo.config.multiselection
                                    ? combo.list.selection.getItem().map(function (item) {
                                        if (item && combo.data.getItem(item.id)) {
                                            return item.value;
                                        }
                                    })
                                    : combo.list.selection.getItem().value;
                                config.events.fire(types_1.GridEvents.filterChange, [value, colId, "comboFilter"]);
                            }
                            else {
                                config.events.fire(types_1.GridEvents.filterChange, ["", colId, "comboFilter"]);
                            }
                        }
                    });
                    config.events.on(ts_data_1.DataEvents.change, function (id, status) {
                        if (status === "add" || status === "update" || status === "remove") {
                            combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                            combo.events.fire(ts_combobox_1.ComboboxEvents.change, [combo.list.selection.getItem()]);
                        }
                    });
                    config.events.on(ts_data_1.DataEvents.removeAll, function () {
                        combo.data.parse(column.$uniqueData.map(function (value) { return ({ value: value }); }));
                        combo.events.fire(ts_combobox_1.ComboboxEvents.change, [combo.list.selection.getItem()]);
                    });
                    combo.popup.events.on("afterHide", function () {
                        if (!combo.list.selection.getItem() ||
                            (combo.config.multiselection && !combo.list.selection.getItem().length)) {
                            combo.clear();
                            config.events.fire(types_1.GridEvents.filterChange, ["", colId, "comboFilter"]);
                        }
                    });
                }
                else {
                    combo = this.element[column.id] || new ts_combobox_1.Combobox(null, {});
                }
                return dom_1.inject(combo.getRootView());
            },
            match: function (value, match, obj, multi) {
                if (match === void 0) { match = ""; }
                if (multi === void 0) { multi = false; }
                if (Array.isArray(match)) {
                    var result = void 0;
                    var _loop_1 = function (i) {
                        result = !multi
                            ? match[i] === value
                            : !!value.split(", ").find(function (item) { return item === match[i]; });
                        if (result)
                            return "break";
                    };
                    for (var i = 0; i < match.length; i++) {
                        var state_1 = _loop_1(i);
                        if (state_1 === "break")
                            break;
                    }
                    return match && match.length ? result : true;
                }
                else {
                    return match !== "" ? value === match : true;
                }
            },
            destroy: function () {
                if (_this.content && _this.content.comboFilter.element) {
                    var comboFilters = _this.content.comboFilter.element;
                    for (var combo in comboFilters) {
                        comboFilters[combo].destructor();
                        delete comboFilters[combo];
                    }
                }
            },
            value: {},
        },
        sum: {
            calculate: function (col, roots) { return roots.reduce(function (sum, c) { return (sum += parseFloat(c) || 0); }, 0); },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return data_1.toFormat(value, column.type, column.format);
                }
                else {
                    return value ? value.toFixed(3) : null;
                }
            },
        },
        avg: {
            calculate: function (col, roots) {
                return col.length ? roots.reduce(function (sum, c) { return (sum += c); }, 0) / col.length : null;
            },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return data_1.toFormat(value, column.type, column.format);
                }
                else {
                    return value ? value.toFixed(3) : null;
                }
            },
        },
        min: {
            calculate: function (col) { return (col.length ? Math.min.apply(Math, col) : null); },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return data_1.toFormat(value, column.type, column.format);
                }
                else {
                    return value ? value.toFixed(3) : null;
                }
            },
        },
        max: {
            calculate: function (col) { return (col.length ? Math.max.apply(Math, col) : null); },
            toHtml: function (column, config) {
                var value = applyMathMethod(column, config, this.calculate);
                if (column.format || column.type === "percent") {
                    return data_1.toFormat(value, column.type, column.format);
                }
                else {
                    return value ? value.toFixed(3) : null;
                }
            },
        },
        count: {
            calculate: function (_col, roots) {
                // [todo]
                return roots.reduce(function (count, c) { return (count += c); }, 0);
            },
            validate: function (colId, data) {
                return data.reduce(function (items, item) {
                    if (item[colId] !== undefined && item[colId] !== "") {
                        if (isNaN(item)) {
                            items.push(1);
                        }
                        else {
                            items.push(item);
                        }
                    }
                    return items;
                }, []);
            },
            toHtml: function (column, config) {
                return applyMathMethod(column, config, this.calculate, this.validate);
            },
        },
    };
}
exports.getContent = getContent;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var types_1 = __webpack_require__(4);
var html_1 = __webpack_require__(2);
function startResize(grid, column, ev, cb) {
    ev.targetTouches && ev.preventDefault();
    var initX = ev.targetTouches ? ev.targetTouches[0].clientX : ev.clientX;
    var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
    var initWidth = 0;
    grid.config.$resizing = column;
    var moveHandler = function (e) {
        var i = core_1.findIndex(columns, function (obj) {
            return obj.id === column;
        });
        var currentX = e.targetTouches ? e.targetTouches[0].clientX : e.clientX;
        var containerLeft = currentX - grid.getRootNode().getBoundingClientRect().left;
        var scrollbarY = grid.config.$totalHeight > grid.config.height ? html_1.getScrollbarWidth() : 0;
        if (grid.config.leftSplit === i + 1 && containerLeft >= grid.config.width - scrollbarY - 2) {
            return;
        }
        initWidth = initWidth || columns[i].$width;
        var minWidth = columns[i].minWidth || 40;
        var maxWidth = columns[i].maxWidth;
        var move = currentX - initX;
        var cols = __spreadArrays(columns);
        var size = initWidth + move;
        var final;
        if ((maxWidth && size >= maxWidth) || size <= minWidth) {
            if (size <= minWidth) {
                final = minWidth;
            }
            if (size >= maxWidth) {
                final = maxWidth;
            }
        }
        else {
            final = size;
        }
        cols[i].$width = final;
        cols[i].$fixed = true;
        grid.events.fire(types_1.GridEvents.resize, [columns[i], e]);
        grid.paint();
    };
    var upHandler = function () {
        if (!ev.targetTouches) {
            document.removeEventListener("mousemove", moveHandler);
            document.removeEventListener("mouseup", upHandler);
        }
        else {
            document.removeEventListener("touchmove", moveHandler);
            document.removeEventListener("touchend", upHandler);
        }
        cb();
    };
    if (!ev.targetTouches) {
        document.addEventListener("mousemove", moveHandler);
        document.addEventListener("mouseup", upHandler);
    }
    else {
        document.addEventListener("touchmove", moveHandler);
        document.addEventListener("touchend", upHandler);
    }
    grid.paint();
}
exports.startResize = startResize;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(4);
var html_1 = __webpack_require__(2);
var main_1 = __webpack_require__(11);
function selectionMove(e, grid, dir, range, toEnd, ctrlUp, shiftUp) {
    if (toEnd === void 0) { toEnd = false; }
    if (ctrlUp === void 0) { ctrlUp = false; }
    if (shiftUp === void 0) { shiftUp = false; }
    if (grid.config.$editable || !grid.config.selection || html_1.locateNodeByClassName(e, "dhx_grid-header-cell")) {
        return;
    }
    if (e) {
        e.preventDefault();
    }
    var selected = grid.selection.getCell();
    var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
    if (selected) {
        if (dir === "vertical") {
            if (toEnd) {
                var newItem = range === 1
                    ? grid.data.getItem(grid.data.getId(grid.data.getLength() - 1))
                    : grid.data.getItem(grid.data.getId(0));
                grid.selection.setCell(newItem.id, selected.column.id, ctrlUp, shiftUp);
                grid.scrollTo(newItem.id.toString(), selected.column.id.toString());
            }
            else {
                var index = grid.data.getIndex(selected.row.id.toString());
                if (index + range >= 0 && index + range < grid.data.getLength()) {
                    var newItem = grid.data.getItem(grid.data.getId(index + range));
                    grid.selection.setCell(newItem.id, selected.column.id, ctrlUp, shiftUp);
                    grid.scrollTo(newItem.id.toString(), selected.column.id.toString());
                }
            }
        }
        else {
            if (toEnd) {
                var newItem = range === 1 ? columns[columns.length - 1] : columns[0];
                grid.selection.setCell(selected.row.id, newItem.id, ctrlUp, shiftUp);
                grid.scrollTo(selected.row.id.toString(), newItem.id.toString());
            }
            else {
                var index = columns.indexOf(selected.column);
                if (index + range >= 0 && index + range < columns.length) {
                    grid.selection.setCell(selected.row.id, columns[index + range].id, ctrlUp, shiftUp);
                    grid.scrollTo(selected.row.id.toString(), columns[index + range].id.toString());
                }
            }
        }
    }
}
exports.selectionMove = selectionMove;
function getKeysHandlers(grid) {
    var _a, _b, _c;
    var cellSelection = grid.config.selection === "cell" ||
        grid.config.selection === "complex" ||
        grid.config.selection === true;
    var gridBodyHandlers = {};
    if (grid.getRootView()) {
        var gridBody_1 = (_c = (_b = (_a = grid.getRootView()) === null || _a === void 0 ? void 0 : _a.refs) === null || _b === void 0 ? void 0 : _b.grid_body) === null || _c === void 0 ? void 0 : _c.el;
        if (!gridBody_1) {
            return;
        }
        gridBodyHandlers = {
            pageUp: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop -= gridBody_1.clientHeight;
            },
            pageDown: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop += gridBody_1.clientHeight;
            },
            home: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop = 0;
            },
            end: function (e) {
                e.preventDefault();
                gridBody_1.scrollTop += gridBody_1.scrollHeight;
            },
        };
    }
    return __assign({ enter: function (e) {
            var $col = html_1.locateNodeByClassName(e, "dhx_grid-header-cell");
            if ($col) {
                // sort by enter on header
                var id = $col.getAttribute("dhx_id");
                var isResizable = e.target.getAttribute("dhx_resized");
                if (id) {
                    var column = grid.getColumn(id);
                    if (column && main_1.isSortable(grid.config, column) && !isResizable) {
                        grid.events.fire(types_1.GridEvents.afterSort, [id]);
                    }
                }
            }
            if (cellSelection) {
                var selected = grid.selection.getCell();
                if (selected &&
                    ((selected.column.editable !== false && grid.config.editable) || selected.column.editable)) {
                    if (!grid.config.$editable) {
                        if (selected.column.type !== "boolean") {
                            grid.editCell(selected.row.id, selected.column.id, selected.column.editorType);
                        }
                        else {
                            grid.events.fire(types_1.GridEvents.afterEditEnd, [
                                !selected.row[selected.column.id],
                                selected.row,
                                selected.column,
                            ]);
                        }
                    }
                    else {
                        grid.editEnd();
                    }
                }
            }
            else {
                if (grid.config.$editable) {
                    grid.editEnd();
                }
            }
        }, space: function (e) {
            var _a;
            var selected = grid.selection.getCell();
            if (cellSelection &&
                ((_a = selected === null || selected === void 0 ? void 0 : selected.column.editable) !== null && _a !== void 0 ? _a : grid.config.editable) &&
                !grid.config.$editable) {
                if (selected && selected.column.type === "boolean") {
                    e.preventDefault();
                    grid.events.fire(types_1.GridEvents.afterEditEnd, [
                        !selected.row[selected.column.id],
                        selected.row,
                        selected.column,
                    ]);
                }
            }
        }, escape: function () {
            if (grid.config.$editable) {
                grid.editEnd(true);
            }
        }, tab: function (e) {
            if (!grid.config.selection || html_1.locateNodeByClassName(e, "dhx_grid-header-cell")) {
                return;
            }
            if (grid.config.$editable) {
                grid.editEnd();
            }
            var selected = grid.selection.getCell();
            var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
            if (selected) {
                var index = columns.indexOf(selected.column) + 1;
                if (index >= 0 && index < columns.length) {
                    e && e.preventDefault();
                    grid.selection.setCell(selected.row.id, columns[index].id);
                    grid.scrollTo(selected.row.id.toString(), columns[index].id.toString());
                }
                else if (index >= 0) {
                    var newLineIndex = grid.data.getIndex(selected.row.id.toString()) + 1;
                    if (newLineIndex < grid.data.getLength()) {
                        e && e.preventDefault();
                        grid.selection.setCell(grid.data.getId(newLineIndex), columns[0].id);
                        grid.scrollTo(grid.data.getId(newLineIndex).toString(), columns[0].id.toString());
                    }
                }
            }
        }, "shift+tab": function (e) {
            if (!grid.config.selection || html_1.locateNodeByClassName(e, "dhx_grid-header-cell")) {
                return;
            }
            if (grid.config.$editable) {
                grid.editEnd();
            }
            var selected = grid.selection.getCell();
            var columns = grid.config.columns.filter(function (col) { return !col.hidden; });
            if (selected) {
                var index = columns.indexOf(selected.column) - 1;
                if (index >= 0 && index < columns.length) {
                    e && e.preventDefault();
                    grid.selection.setCell(selected.row.id, columns[index].id);
                    grid.scrollTo(selected.row.id.toString(), columns[index].id.toString());
                }
                else if (index < grid.data.getLength()) {
                    var newLineIndex = grid.data.getIndex(selected.row.id.toString()) - 1;
                    if (newLineIndex >= 0) {
                        e && e.preventDefault();
                        grid.selection.setCell(grid.data.getId(newLineIndex), columns[columns.length - 1].id);
                        grid.scrollTo(grid.data.getId(newLineIndex).toString(), columns[columns.length - 1].id.toString());
                    }
                }
            }
        }, arrowUp: function (e) {
            selectionMove(e, grid, "vertical", -1);
        }, "ctrl+arrowUp": function (e) {
            selectionMove(e, grid, "vertical", -1, true);
        }, "shift+arrowUp": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", -1, false, false, true);
            }
        }, "ctrl+shift+arrowUp": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", -1, true, false, true);
            }
        }, arrowDown: function (e) {
            selectionMove(e, grid, "vertical", 1);
        }, "ctrl+arrowDown": function (e) {
            selectionMove(e, grid, "vertical", 1, true);
        }, "shift+arrowDown": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", 1, false, false, true);
            }
        }, "ctrl+shift+arrowDown": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "vertical", 1, true, false, true);
            }
        }, arrowRight: function (e) {
            selectionMove(e, grid, "horizontal", 1);
        }, "ctrl+arrowRight": function (e) {
            selectionMove(e, grid, "horizontal", 1, true);
        }, "shift+arrowRight": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", 1, false, false, true);
            }
        }, "ctrl+shift+arrowRight": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", 1, true, false, true);
            }
        }, arrowLeft: function (e) {
            selectionMove(e, grid, "horizontal", -1);
        }, "ctrl+arrowLeft": function (e) {
            selectionMove(e, grid, "horizontal", -1, true);
        }, "shift+arrowLeft": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", -1, false, false, true);
            }
        }, "ctrl+shift+arrowLeft": function (e) {
            if (grid.config.multiselection) {
                selectionMove(e, grid, "horizontal", -1, true, false, true);
            }
        } }, gridBodyHandlers);
}
exports.getKeysHandlers = getKeysHandlers;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Grid_1 = __webpack_require__(55);
var types_1 = __webpack_require__(4);
var ts_data_1 = __webpack_require__(8);
var html_1 = __webpack_require__(2);
var data_1 = __webpack_require__(17);
var render_1 = __webpack_require__(56);
var dom_1 = __webpack_require__(0);
var ScrollView_1 = __webpack_require__(29);
var ProGrid = /** @class */ (function (_super) {
    __extends(ProGrid, _super);
    function ProGrid(container, config) {
        var _this = _super.call(this, container, __assign({ autoHeight: false }, config)) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); }, {
            scrollHandler: function (e) {
                return _this.events.fire(types_1.GridEvents.scroll, [
                    {
                        y: e.target.scrollTop,
                        x: e.target.scrollLeft,
                    },
                ]);
            },
        });
        return _this;
    }
    ProGrid.prototype._createView = function () {
        var _this = this;
        return dom_1.create({
            render: function (vm, obj) {
                return render_1.proRender(vm, obj, _this._htmlEvents, _this.selection, _this._uid);
            },
        }, this);
    };
    ProGrid.prototype._setEventHandlers = function () {
        var _this = this;
        _super.prototype._setEventHandlers.call(this);
        this.events.on(types_1.GridEvents.headerCellMouseDown, function (col, e) {
            if (!e.targetTouches) {
                _this._dragStartColumn(e, col);
            }
            else {
                _this._touch.timer = setTimeout(function () {
                    _this._dragStartColumn(e, col);
                }, _this._touch.duration);
            }
        });
        this._events.on(types_1.GridSystemEvents.headerCellTouchMove, function (_col, e) {
            _this._touch.start && e.preventDefault();
            _this._clearTouchTimer();
        });
        this._events.on(types_1.GridSystemEvents.headerCellTouchEnd, function () {
            _this._touch.start = false;
            _this._clearTouchTimer();
        });
        this.events.on(types_1.GridEvents.resize, function () {
            _this._parseColumns();
            _this._checkFilters();
        });
        this.events.on(types_1.GridEvents.afterResizeEnd, function () {
            if (_this.config.autoHeight) {
                _this.config.data = _this.data.map(function (row) {
                    var height = data_1.getMaxRowHeight(row, _this.config.columns);
                    row.$height = data_1.getCalculatedRowHeight(height, {
                        rowHeight: _this.config.rowHeight,
                        padding: 8,
                    });
                    return row;
                });
            }
        });
        this.events.on(types_1.GridEvents.afterRowResize, function (row, _e, currentHeight) {
            var _a = _this.data.getItem(row.id), id = _a.id, height = _a.height, $height = _a.$height;
            if (height && height !== $height) {
                _this.data.update(id, { height: currentHeight });
            }
            _this.data.update(id, { $height: currentHeight }, true);
            _this.config.data = _this.data.map(function (row) { return row; });
            _this.paint();
        });
        this.events.on(types_1.GridEvents.scroll, function () {
            _this._lazyLoad();
        });
    };
    ProGrid.prototype._prepareData = function (data) {
        var _this = this;
        this._adjustColumns();
        var convertedData;
        if (Array.isArray(data) || ts_data_1.isTreeCollection(data)) {
            convertedData = data;
        }
        else {
            var initData = data.getInitialData() || [];
            convertedData = initData.length !== 0 ? initData : data.getRawData(0, data.getLength());
        }
        return convertedData.map(function (row) {
            if (_this.config.autoHeight && typeof row.height === "undefined") {
                var height = data_1.getMaxRowHeight(row, _this.config.columns);
                row.$height =
                    data_1.getCalculatedRowHeight(height, {
                        rowHeight: _this.config.rowHeight,
                        padding: 8,
                    }) || _this.config.rowHeight;
            }
            else {
                row.$height = row.height || _this.config.rowHeight;
            }
            return row;
        });
    };
    ProGrid.prototype._prepareDataFromTo = function (data, from, to) {
        var _this = this;
        return data.mapRange(from, to, function (row) {
            var height = data_1.getMaxRowHeight(row, _this.config.columns);
            row.$height =
                data_1.getCalculatedRowHeight(height, {
                    rowHeight: _this.config.rowHeight,
                    padding: 8,
                }) || _this.config.rowHeight;
            return row;
        });
    };
    ProGrid.prototype._lazyLoad = function () {
        var _this = this;
        var _a, _b;
        var proxy = this.data.dataProxy;
        if (proxy && proxy.config) {
            var data = this.data.getRawData(0, -1, null, 2);
            var renderConfig = render_1.getRenderConfig(this, data, {
                width: this.config.width,
                height: this.config.height,
            });
            var from_1 = this.data.getIndex((_a = renderConfig.currentRows[0]) === null || _a === void 0 ? void 0 : _a.id.toString());
            var to_1 = this.data.getIndex((_b = renderConfig.currentRows[renderConfig.currentRows.length - 1]) === null || _b === void 0 ? void 0 : _b.id.toString());
            if (!this.data.isDataLoaded(from_1, to_1) && this.data.events.fire(ts_data_1.DataEvents.beforeLazyLoad, [])) {
                proxy.updateUrl(null, { from: from_1, limit: proxy.config.limit });
                this.data.load(proxy).then(function () {
                    _this.config.autoHeight && _this._prepareDataFromTo(_this.data, from_1, to_1);
                });
            }
        }
    };
    ProGrid.prototype._getColumnGhost = function (col) {
        var container = this._container || html_1.toNode(this._uid);
        var headerRow = container.querySelector(".dhx_header-row");
        var colHeaderCell = headerRow.querySelector(".dhx_grid-header-cell[dhx_id=\"" + col.id + "\"]");
        var headerCols = Array.from(headerRow.childNodes);
        var n = headerCols.indexOf(colHeaderCell) + 1;
        var colHeaderCells = container.querySelectorAll(".dhx_grid-header-cell[dhx_id=\"" + col.id + "\"]:not(.dhx_span-cell)");
        var ghostGridNodes = container.querySelectorAll(".dhx_grid_data .dhx_grid-cell:nth-child(" + n + ")");
        var ghostContainer = document.createElement("div");
        colHeaderCells.forEach(function (node) { return ghostContainer.appendChild(node.cloneNode(true)); });
        ghostGridNodes.forEach(function (node) { return ghostContainer.appendChild(node.cloneNode(true)); });
        return ghostContainer;
    };
    ProGrid.prototype._dragStartColumn = function (e, col) {
        var target = e.target;
        var testCustom = function (el) { return el.classList.contains("dhx_grid-custom-content-cell"); };
        var isCustom = testCustom(target.parentElement) || testCustom(target.parentElement.parentElement);
        if (!isCustom &&
            (col.draggable ||
                (this.config.dragItem === "column" && col.draggable !== false) ||
                (this.config.dragItem === "both" && col.draggable !== false)) &&
            !html_1.locateNodeByClassName(e, "dhx_resizer_grip_wrap")) {
            if (e.targetTouches) {
                this._touch.start = true;
            }
            ts_data_1.dragManager.onMouseDown(e, [col.id], [this._getColumnGhost(col)]);
        }
    };
    return ProGrid;
}(Grid_1.Grid));
exports.ProGrid = ProGrid;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var CollectionStore = /** @class */ (function () {
    function CollectionStore() {
        this._store = {};
    }
    CollectionStore.prototype.setItem = function (id, target) {
        this._store[id] = target;
    };
    CollectionStore.prototype.getItem = function (id) {
        if (!this._store[id]) {
            return null;
        }
        return this._store[id];
    };
    return CollectionStore;
}());
var dhx = (window.dhxHelpers = window.dhxHelpers || {});
dhx.collectionStore = dhx.collectionStore || new CollectionStore();
exports.collectionStore = dhx.collectionStore;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dataproxy_1 = __webpack_require__(23);
var core_1 = __webpack_require__(1);
var ajax_1 = __webpack_require__(38);
var LazyDataProxy = /** @class */ (function (_super) {
    __extends(LazyDataProxy, _super);
    function LazyDataProxy(url, config) {
        var _this = _super.call(this, url) || this;
        _this.config = core_1.extend({
            from: 0,
            limit: 50,
            delay: 50,
            prepare: 0,
        }, config);
        _this.updateUrl(url, { from: _this.config.from, limit: _this.config.limit });
        return _this;
    }
    LazyDataProxy.prototype.load = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (!_this._timeout) {
                ajax_1.ajax.get(_this.url, { responseType: "text" }).then(resolve);
                _this._cooling = true;
                _this._timeout = setTimeout(function () {
                    return;
                });
            }
            else {
                clearTimeout(_this._timeout);
                _this._timeout = setTimeout(function () {
                    ajax_1.ajax.get(_this.url, { responseType: "text" }).then(resolve);
                    _this._cooling = true;
                }, _this.config.delay);
                if (_this._cooling) {
                    resolve(null);
                    _this._cooling = false;
                }
            }
        });
    };
    return LazyDataProxy;
}(dataproxy_1.DataProxy));
exports.LazyDataProxy = LazyDataProxy;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = __webpack_require__(5);
var types_1 = __webpack_require__(30);
var types_2 = __webpack_require__(15);
var Selection = /** @class */ (function () {
    function Selection(config, data, events) {
        var _this = this;
        this.events = events || new events_1.EventSystem(this);
        this._data = data;
        this.config = config;
        this._data.events.on(types_2.DataEvents.removeAll, function () {
            _this._selected = null;
        });
        this._data.events.on(types_2.DataEvents.change, function () {
            if (_this._selected) {
                var near = _this._data.getNearId(_this._selected);
                if (near !== _this._selected) {
                    _this._selected = null;
                    if (near) {
                        _this.add(near);
                    }
                }
            }
        });
    }
    Selection.prototype.getId = function () {
        return this._selected;
    };
    Selection.prototype.getItem = function () {
        if (this._selected) {
            return this._data.getItem(this._selected);
        }
        return null;
    };
    Selection.prototype.remove = function (id) {
        id = id || this._selected;
        if (!id) {
            return true;
        }
        if (this.events.fire(types_1.SelectionEvents.beforeUnSelect, [id])) {
            this._data.update(id, { $selected: false }, true);
            this._selected = null;
            this.events.fire(types_1.SelectionEvents.afterUnSelect, [id]);
            return true;
        }
        return false;
    };
    Selection.prototype.add = function (id) {
        if (this._selected === id || !!this.config.disabled || !this._data.exists(id)) {
            return;
        }
        this.remove();
        this._addSingle(id);
    };
    Selection.prototype.enable = function () {
        this.config.disabled = false;
    };
    Selection.prototype.disable = function () {
        this.remove();
        this.config.disabled = true;
    };
    Selection.prototype._addSingle = function (id) {
        if (this.events.fire(types_1.SelectionEvents.beforeSelect, [id])) {
            this._selected = id;
            this._data.update(id, { $selected: true }, true);
            this.events.fire(types_1.SelectionEvents.afterSelect, [id]);
        }
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var events_1 = __webpack_require__(5);
var html_1 = __webpack_require__(2);
var KeyManager_1 = __webpack_require__(20);
var view_1 = __webpack_require__(7);
var ts_data_1 = __webpack_require__(8);
var types_1 = __webpack_require__(31);
function addInGroups(groups, item) {
    if (groups[item.group]) {
        if (item.active) {
            groups[item.group].active = item.id;
        }
        groups[item.group].elements.push(item.id);
    }
    else {
        groups[item.group] = {
            active: item.active ? item.id : null,
            elements: [item.id],
        };
    }
}
var Navbar = /** @class */ (function (_super) {
    __extends(Navbar, _super);
    function Navbar(element, config) {
        var _this = 
        // super(element, extend({}, config));
        _super.call(this, element, config) || this;
        _this._isContextMenu = false;
        _this._documentHaveListener = false;
        _this.config = core_1.extend({
            rootId: (typeof element === "string" && element) || _this._uid,
        }, config);
        _this._rootItem = {};
        if (Array.isArray(_this.config.data)) {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({ rootId: _this.config.rootId }, _this.events);
        }
        else if (_this.config.data && _this.config.data.events) {
            _this.data = _this.config.data;
            _this.events = _this.data.events;
            _this.events.context = _this;
        }
        else {
            _this.events = new events_1.EventSystem(_this);
            _this.data = new ts_data_1.TreeCollection({ rootId: _this.config.rootId }, _this.events);
        }
        _this._documentClick = function (e) {
            if (_this._documentHaveListener) {
                var element_1 = html_1.locateNode(e);
                var root = _this.data.getRoot();
                var id = element_1 && element_1.getAttribute("dhx_id");
                var parent_1 = _this.data.getParent(id);
                var supportsTouch = "ontouchstart" in window || navigator.msMaxTouchPoints;
                document.removeEventListener("mousedown", _this._documentClick);
                _this._documentHaveListener = false;
                if ((((supportsTouch && !element_1) || !_this._isContextMenu) &&
                    (root === parent_1 || !parent_1 || !_this.data.getItem(id))) ||
                    !parent_1 ||
                    !_this.data.getItem(id)) {
                    _this._close(e);
                }
            }
        };
        _this._currentRoot = _this.data.getRoot();
        _this._factory = _this._getFactory();
        _this._initHandlers();
        // this._init();
        _this._keyManager = new KeyManager_1.KeyManager(function (_, focusId) { return focusId === _this._uid; });
        _this._initEvents();
        if (Array.isArray(_this.config.data)) {
            _this.data.parse(_this.config.data);
        }
        return _this;
    }
    Navbar.prototype.paint = function () {
        _super.prototype.paint.call(this);
        if (this._isContextMenu && !this._vpopups) {
            this._init();
        }
        if (this._vpopups) {
            this._vpopups.redraw();
        }
    };
    Navbar.prototype.disable = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "disabled", true);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "disabled", true);
            });
        }
    };
    Navbar.prototype.enable = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "disabled", false);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "disabled", false);
            });
        }
    };
    Navbar.prototype.isDisabled = function (id) {
        var item = this.data.getItem(id);
        if (item) {
            return item.disabled || false;
        }
    };
    Navbar.prototype.show = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "hidden", false);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "hidden", false);
            });
        }
    };
    Navbar.prototype.hide = function (ids) {
        var _this = this;
        if (typeof ids !== "undefined") {
            this._setProp(ids, "hidden", true);
        }
        else {
            this.data.forEach(function (_a) {
                var id = _a.id;
                return _this._setProp(id, "hidden", true);
            });
        }
    };
    Navbar.prototype.destructor = function () {
        this.events.clear();
        this._keyManager && this._keyManager.destructor();
        this._vpopups && !!this._vpopups.node && this._vpopups.unmount();
        this.unmount();
    };
    Navbar.prototype.select = function (id, unselect) {
        var _this = this;
        if (unselect === void 0) { unselect = true; }
        if (!id) {
            throw new Error("Function argument cannot be empty, for more info check documentation https://docs.dhtmlx.com");
        }
        unselect && this.unselect();
        this.data.update(id, { active: true });
        this.data.eachParent(id, function (parent) {
            _this.data.update(parent.id, { active: true });
        });
    };
    Navbar.prototype.unselect = function (id) {
        var _this = this;
        if (!id) {
            this.data.forEach(function (item) {
                _this.data.update(item.id, { active: false });
            });
        }
        else {
            this.data.update(id, { active: false });
            this.data.eachChild(id, function (parent) {
                _this.data.update(parent.id, { active: false });
            });
        }
    };
    Navbar.prototype.isSelected = function (id) {
        if (!id || !this.data.getItem(id)) {
            return;
        }
        return !!this.data.getItem(id).active;
    };
    Navbar.prototype.getSelected = function () {
        var selected = [];
        this.data.forEach(function (item) {
            item.active && selected.push(item.id);
        });
        return selected;
    };
    Navbar.prototype._customHandlers = function () {
        return {};
    };
    Navbar.prototype._close = function (e) {
        var _this = this;
        if (!this._popupActive || !this.events.fire(types_1.NavigationBarEvents.beforeHide, [this._activeMenu, e])) {
            return;
        }
        if (this._activeParents) {
            this._activeParents.forEach(function (parentId) { return _this.data.exists(parentId) && _this.data.update(parentId, { $activeParent: false }); });
        }
        if (this.config.navigationType === "click") {
            this._isActive = false;
        }
        clearTimeout(this._currentTimeout);
        this._popupActive = false;
        this._activeMenu = null;
        !!this._vpopups.node && this._vpopups.unmount();
        this._vpopups = null;
        this.events.fire(types_1.NavigationBarEvents.afterHide, [e]);
        this.paint();
    };
    Navbar.prototype._init = function () {
        var _this = this;
        var render = function () {
            return dom_1.el("div", {
                dhx_widget_id: _this._uid,
                class: (_this._isContextMenu ? " dhx_context-menu" : "") + " " + (_this.config.css
                    ? _this.config.css
                        .split(" ")
                        .map(function (i) { return i + "--context-menu"; })
                        .join(" ")
                    : ""),
                onmousemove: _this._handlers.onmousemove,
                onmouseleave: _this._handlers.onmouseleave,
                onclick: _this._handlers.onclick,
                onmousedown: _this._handlers.onmousedown,
            }, _this._drawPopups());
        };
        this._vpopups = dom_1.create({
            render: render,
        });
        this._vpopups.mount(document.body);
    };
    Navbar.prototype._initHandlers = function () {
        var _this = this;
        /*
            for navigation type click:
            first click open menu, _isActive = true
            after navigation use mousemove
            can be closed after outer click or menu leaf item click
        */
        this._isActive = this.config.navigationType !== "click";
        this._handlers = __assign({ onmousemove: function (e) {
                if (!_this._isActive) {
                    return;
                }
                var elem = html_1.locateNode(e);
                if (!elem) {
                    return;
                }
                var id = elem.getAttribute("dhx_id");
                if (_this._activeMenu !== id) {
                    if (_this.data.haveItems(id)) {
                        if (!_this._vpopups) {
                            _this._init();
                        }
                        var position = html_1.getRealPosition(elem);
                        _this.data.update(id, { $position: position }, false);
                    }
                    _this._activeItemChange(id, e);
                }
            }, onmouseleave: function (e) {
                if (_this.config.navigationType !== "click") {
                    // maybe all time when mouse leave close menu
                    if (_this._popupActive) {
                        var element = html_1.locateNode(e, "dhx_id", "relatedTarget");
                        if (element) {
                            var id = element.getAttribute("dhx_id");
                            if (!_this.data.getItem(id)) {
                                _this._close(e);
                            }
                        }
                        else {
                            _this._close(e);
                        }
                    }
                    _this._activeItemChange(null, e);
                }
            }, onclick: function (e) {
                var element = html_1.locateNode(e);
                if (!element) {
                    return;
                }
                var id = element.getAttribute("dhx_id");
                if (_this.isDisabled(id)) {
                    return;
                }
                var item = _this.data.getItem(id);
                if (item.multiClick) {
                    return;
                }
                if (_this.data.haveItems(id)) {
                    if (!_this._vpopups) {
                        _this._init();
                    }
                    if (id === _this._currentRoot) {
                        return;
                    }
                    if (!_this._isActive) {
                        _this._isActive = true;
                    }
                    _this._setRoot(id);
                    var position = html_1.getRealPosition(element);
                    _this.data.update(id, { $position: position }, false);
                    _this._activeItemChange(id, e);
                    _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                }
                else {
                    switch (item.type) {
                        case "input":
                        case "title":
                            break;
                        case "menuItem":
                        case "selectButton":
                            _this._onMenuItemClick(id, e);
                            break;
                        case "imageButton":
                        case "button":
                        case "customButton":
                        case "customHTML":
                        case "navItem":
                            if (item.twoState) {
                                _this.data.update(item.id, { active: !item.active });
                            }
                            _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                            _this._close(e);
                            break;
                        default:
                            _this._close(e);
                    }
                }
            }, onmousedown: function (e) {
                var element = html_1.locateNode(e);
                if (!element) {
                    return;
                }
                var id = element.getAttribute("dhx_id");
                var item = _this.data.getItem(id);
                if (!item.multiClick) {
                    return;
                }
                var fireTime = 365;
                var timeout;
                var fireAction = function () {
                    _this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
                    if (fireTime > 50) {
                        fireTime -= 55;
                    }
                    timeout = setTimeout(fireAction, fireTime);
                };
                var mouseup = function () {
                    clearTimeout(timeout);
                    document.removeEventListener("mouseup", mouseup);
                };
                fireAction();
                document.addEventListener("mouseup", mouseup);
            } }, this._customHandlers());
    };
    Navbar.prototype._initEvents = function () {
        var _this = this;
        var timeout = null;
        this.data.events.on(types_1.DataEvents.change, function () {
            _this.paint();
            if (timeout) {
                clearTimeout(timeout);
            }
            timeout = setTimeout(function () {
                var groups = {};
                _this.data.eachChild(_this.data.getRoot(), function (item) {
                    if (item.group) {
                        item.twoState = true;
                        addInGroups(groups, item);
                    }
                }, true);
                _this._groups = groups;
                _this._resetHotkeys();
                timeout = null;
                _this.paint();
            }, 100);
        });
        this.events.on(types_1.NavigationBarEvents.click, function (id) {
            var item = _this.data.getItem(id);
            var parent = _this.data.getItem(item.parent);
            if (parent && parent.type === "selectButton") {
                _this.data.update(item.parent, { value: item.value, icon: item.icon });
            }
            if (item.group) {
                var group = _this._groups[item.group];
                if (group.active) {
                    _this.data.update(group.active, { active: false });
                }
                group.active = item.id;
                _this.data.update(item.id, { active: true });
            }
        });
        this.events.on(types_1.NavigationBarEvents.inputChange, function (id, newValue) {
            _this.data.update(id, { value: newValue });
        });
        this._customInitEvents();
    };
    Navbar.prototype._getMode = function (item, root, _active) {
        if (_active === void 0) { _active = false; }
        return item.parent === root ? "bottom" : "right";
    };
    Navbar.prototype._drawMenuItems = function (id, asMenuItem) {
        var _this = this;
        if (asMenuItem === void 0) { asMenuItem = true; }
        return this.data.map(function (item) { return _this._factory(item, asMenuItem); }, id, false);
    };
    Navbar.prototype._setRoot = function (_id) {
        return; // need only for toolbar
    };
    Navbar.prototype._getParents = function (id, root) {
        var parentIds = [];
        var afterRoot = false;
        var currentItem = this.data.getItem(id);
        var disabled = currentItem && currentItem.disabled;
        this.data.eachParent(id, function (item) {
            if (item.id === root) {
                parentIds.push(item.id);
                afterRoot = true;
            }
            else if (!afterRoot) {
                parentIds.push(item.id);
            }
        }, !disabled);
        if (this._isContextMenu && this._activePosition) {
            parentIds.push(root);
        }
        return parentIds;
    };
    Navbar.prototype._listenOuterClick = function () {
        if (this._documentHaveListener) {
            return;
        }
        document.addEventListener("mousedown", this._documentClick, true);
        this._documentHaveListener = true;
    };
    Navbar.prototype._customInitEvents = function () {
        return;
    };
    Navbar.prototype._drawPopups = function () {
        var _this = this;
        var id = this._activeMenu;
        if (!this._isContextMenu && !id) {
            return null;
        }
        var rootNode = this.getRootNode();
        var offsetParent = rootNode && rootNode.offsetParent && rootNode.offsetParent.offsetParent;
        var zIndex = null;
        if (offsetParent &&
            offsetParent.classList.contains("dhx_popup--window") &&
            offsetParent.classList.contains("dhx_popup--window_active")) {
            zIndex = 2147483647;
        }
        var root = this._currentRoot;
        if (this._isContextMenu && !this._activePosition) {
            return null;
        }
        var parentIds = this._getParents(id, root);
        this._activeParents = parentIds;
        parentIds.forEach(function (parentId) {
            return _this.data.exists(parentId) && _this.data.update(parentId, { $activeParent: true }, false);
        });
        return parentIds
            .map(function (itemId) {
            if (!_this.data.haveItems(itemId)) {
                return null;
            }
            var getAriaAttrs = function (item) { return ({
                role: "menu",
                "aria-labeledby": item.id,
                "aria-live": "polite",
            }); };
            var item = _this.data.getItem(itemId) || _this._rootItem; // for root item
            _this._popupActive = true;
            return dom_1.el("ul", __assign({ class: "dhx_widget dhx_menu" + (_this.config.menuCss ? " " + _this.config.menuCss : ""), _key: itemId, _hooks: {
                    didInsert: function (vnode) {
                        var _a = vnode.el.getBoundingClientRect(), width = _a.width, height = _a.height;
                        var position = _this._isContextMenu && _this._activePosition && itemId === root
                            ? _this._activePosition
                            : item.$position;
                        var mode = _this._getMode(item, root, position === _this._activePosition);
                        var style = html_1.calculatePosition(position, {
                            mode: mode,
                            auto: true,
                            width: width,
                            height: height,
                        });
                        item.$style = __assign(__assign({}, style), { zIndex: _this._activePosition
                                ? _this._activePosition.zIndex || zIndex
                                : zIndex });
                        vnode.patch({ style: item.$style });
                    },
                    didRecycle: function (_, vnode) {
                        if (_this._isContextMenu && _this._activePosition && itemId === root) {
                            var _a = vnode.el.getBoundingClientRect(), width = _a.width, height = _a.height;
                            var style = html_1.calculatePosition(_this._activePosition, {
                                mode: _this._getMode(item, root, true),
                                width: width,
                                height: height,
                            });
                            item.$style = __assign(__assign({}, style), { zIndex: _this._activePosition.zIndex || zIndex });
                            vnode.patch({ style: item.$style });
                        }
                    },
                }, tabindex: 0, style: item.$style || {
                    position: "absolute",
                } }, getAriaAttrs(item)), _this._drawMenuItems(itemId));
        })
            .reverse();
    };
    Navbar.prototype._onMenuItemClick = function (id, e) {
        var item = this.data.getItem(id);
        if (item.disabled) {
            return;
        }
        if (item.twoState) {
            this.data.update(item.id, { active: !item.active });
        }
        this.events.fire(types_1.NavigationBarEvents.click, [id, e]);
        this._close(e);
    };
    Navbar.prototype._activeItemChange = function (id, e) {
        var _this = this;
        if (this._activeParents) {
            var parentIds_1 = this._getParents(id, this._currentRoot);
            this._activeParents.forEach(function (parentId) {
                if (_this.data.exists(parentId) && !parentIds_1.includes(parentId)) {
                    _this.data.update(parentId, { $activeParent: false }, false);
                }
            });
        }
        if (id && !this._documentHaveListener) {
            this._listenOuterClick();
        }
        if (id && this.data.haveItems(id)) {
            if (this._activeMenu !== id || !this._popupActive) {
                this.events.fire(types_1.NavigationBarEvents.openMenu, [id]);
            }
            clearTimeout(this._currentTimeout);
            this.paint();
        }
        else {
            clearTimeout(this._currentTimeout);
            this._currentTimeout = setTimeout(function () { return _this.paint(); }, 400);
        }
        this._activeMenu = id;
    };
    Navbar.prototype._resetHotkeys = function () {
        var _this = this;
        this._keyManager.removeHotKey(null, this);
        this.data.map(function (item) {
            if (item.hotkey) {
                _this._keyManager.addHotKey(item.hotkey, function () { return _this._onMenuItemClick(item.id, null); });
            }
        });
    };
    Navbar.prototype._setProp = function (id, key, value) {
        var _a;
        var _this = this;
        if (Array.isArray(id)) {
            id.forEach(function (itemId) {
                var _a;
                return _this.data.update(itemId, (_a = {}, _a[key] = value, _a));
            });
        }
        else {
            this.data.update(id, (_a = {}, _a[key] = value, _a));
        }
    };
    return Navbar;
}(view_1.View));
exports.Navbar = Navbar;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var button_1 = __webpack_require__(138);
var navItem_1 = __webpack_require__(139);
var customHTMLButton_1 = __webpack_require__(140);
var imageButton_1 = __webpack_require__(141);
var input_1 = __webpack_require__(142);
var menuItem_1 = __webpack_require__(143);
var separator_1 = __webpack_require__(144);
var spacer_1 = __webpack_require__(145);
var title_1 = __webpack_require__(146);
var datePicker_1 = __webpack_require__(147);
var helpers_1 = __webpack_require__(25);
function itemfactory(item, events, widgetName, props) {
    switch (item.type) {
        case "navItem":
        case "selectButton":
            return navItem_1.navItem(item, widgetName, props.collapsed);
        case "button":
            return button_1.button(item, widgetName);
        case "title":
            return title_1.title(item, widgetName);
        case "separator":
            return separator_1.separator(item, widgetName);
        case "spacer":
            return spacer_1.spacer(item, widgetName);
        case "input":
            return input_1.input(item, events, widgetName);
        case "imageButton":
            return imageButton_1.imageButton(item, widgetName);
        case "menuItem":
            return menuItem_1.menuItem(item, widgetName, props.asMenuItem);
        case "customHTMLButton":
            return customHTMLButton_1.customHTMLButton(item, widgetName, props.asMenuItem);
        case "datePicker":
            return datePicker_1.datePicker(item, events, widgetName);
        case "block":
        default:
            throw new Error("unknown item type " + item.type);
    }
}
function normalizeOpenIcon(widgetName, item, data) {
    switch (widgetName) {
        case "sidebar":
        case "context-menu":
            item.$openIcon = "right";
            break;
        case "toolbar":
            if (item.parent === data.getRoot()) {
                item.$openIcon = "right";
            }
            else {
                item.$openIcon = "bottom";
            }
            break;
        case "menu":
            if (item.parent !== this.data.getRoot()) {
                item.$openIcon = "right";
            }
            break;
        case "ribbon": {
            var parent_1 = data.getItem(item.parent);
            if (parent_1 && item.type !== "block") {
                if (parent_1.type === "block") {
                    item.$openIcon = "bottom";
                }
                else {
                    item.$openIcon = "right";
                }
            }
            break;
        }
    }
}
function createFactory(_a) {
    var defaultType = _a.defaultType, allowedTypes = _a.allowedTypes, widgetName = _a.widgetName, widget = _a.widget;
    var allowedSet = new Set();
    for (var _i = 0, allowedTypes_1 = allowedTypes; _i < allowedTypes_1.length; _i++) {
        var type = allowedTypes_1[_i];
        allowedSet.add(type);
    }
    var config = widget.config, events = widget.events, data = widget.data;
    return function (item, asMenuItem) {
        if (item.hidden) {
            return null;
        }
        if (!item.type || item.type === "button" || item.type === "navItem" || item.type === "menuItem") {
            if (!item.value && !item.icon && !item.html) {
                return null;
            }
        }
        item.type = item.type || defaultType;
        if (allowedSet && !allowedSet.has(item.type)) {
            item.type = defaultType;
        }
        if (item.type === "imageButton" && widgetName !== "ribbon") {
            item.active = false;
        }
        if (asMenuItem && item.type !== "spacer" && item.type !== "separator" && item.type !== "customHTML") {
            item.type = "menuItem";
        }
        if (data.haveItems(item.id)) {
            normalizeOpenIcon(widgetName, item, data);
        }
        if (widgetName === "toolbar" && item.items) {
            item.items.forEach(function (element) {
                if (!element.type) {
                    element.type = "menuItem";
                }
            });
        }
        var itemVNode = item.type !== "customHTML" &&
            itemfactory(item, events, widgetName, {
                asMenuItem: asMenuItem,
                collapsed: widgetName !== "sidebar" || config.collapsed,
            });
        return helpers_1.navbarComponentMixin(widgetName, item, asMenuItem, itemVNode);
    };
}
exports.createFactory = createFactory;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(25);
function button(item, widgetName) {
    var getAriaAttrs = function (item) {
        var isItemActivated = item.active || item.$activeParent;
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
            "aria-label": item.value || item.tooltip || item.id || "" + (" " + (item.count || "")),
        };
        if (item.items) {
            // as menu
            attrs["id"] = item.id;
            attrs["aria-haspopup"] = "menu"; // menu has hot keys, listbox doesn't have
            if (isItemActivated) {
                attrs["aria-expanded"] = "true";
            }
        }
        return attrs;
    };
    var isIconButton = item.icon && !item.value;
    var counterClass = isIconButton ? " dhx_navbar-count--absolute" : " dhx_navbar-count--button-inline";
    return dom_1.el("button.dhx_button", __assign({ class: helpers_1.getNavbarButtonCSS(item, widgetName), dhx_id: item.id, disabled: item.disabled, type: "button" }, getAriaAttrs(item)), [
        item.icon ? helpers_1.getIcon(item.icon, "button") : null,
        item.html
            ? dom_1.el("div.dhx_button__text", { ".innerHTML": item.html })
            : item.value && dom_1.el("span.dhx_button__text", item.value),
        item.count > 0 && helpers_1.getCount(item, counterClass, isIconButton),
        item.value && item.$openIcon
            ? dom_1.el("span.dhx_button__icon.dhx_button__icon--menu.dxi.dxi-menu-right", {
                "aria-hidden": "true",
            })
            : null,
        item.loading &&
            dom_1.el("span.dhx_button__loading", {
                "aria-hidden": "true",
            }, [dom_1.el("span.dhx_button__loading-icon.dxi.dxi-loading")]),
    ]);
}
exports.button = button;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(25);
function navItem(item, widgetName, collapsed) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
            "aria-label": item.value || " ",
        };
        var isItemActivated = item.active || item.$activeParent;
        if (item.type === "selectButton" || item.items) {
            attrs["id"] = item.id;
            attrs["aria-haspopup"] = "menu"; // menu has hot keys, listbox doesn't have
            if (isItemActivated) {
                attrs["aria-expanded"] = "true";
            }
        }
        else {
            if (item.twoState || isItemActivated) {
                attrs["aria-pressed"] = isItemActivated ? "true" : "false";
            }
            if (!item.value && item.icon && item.tooltip) {
                attrs["aria-label"] = item.tooltip + " " + (item.count || "");
            }
        }
        return attrs;
    };
    var baseClass = " dhx_" + widgetName + "-button";
    return dom_1.el("button", __assign({ class: "dhx_button" +
            baseClass +
            (item.active || item.$activeParent ? baseClass + "--active" : "") +
            (item.disabled ? baseClass + "--disabled" : "") +
            (item.$openIcon ? baseClass + "--select" : "") +
            (item.circle ? baseClass + "--circle" : "") +
            (item.size ? " " + baseClass + "--" + item.size : "") +
            (!item.value && item.icon ? baseClass + "--icon" : "") +
            (item.css ? " " + item.css : ""), dhx_id: item.id, disabled: item.disabled, type: "button" }, getAriaAttrs(item)), [
        item.icon &&
            dom_1.el("span", {
                class: item.icon + baseClass + "__icon",
                "aria-hidden": "true",
            }),
        item.html &&
            dom_1.el("div", {
                class: baseClass.trim() + "__html",
                ".innerHTML": item.html,
            }),
        !item.html &&
            item.value &&
            dom_1.el("span", {
                class: baseClass.trim() + "__text",
            }, item.value),
        item.count > 0 && helpers_1.getCount(item, baseClass + "__count", collapsed),
        item.$openIcon &&
            dom_1.el("span.dxi.dxi-menu-right", {
                class: baseClass + "__caret",
                "aria-hidden": "true",
            }),
    ]);
}
exports.navItem = navItem;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
function customHTMLButton(item, widgetName, asMenuItem) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.twoState || item.active || item.$activeParent) {
            attrs["aria-pressed"] = item.active || item.$activeParent ? "true" : "false";
        }
        return attrs;
    };
    var baseClass = asMenuItem ? " dhx_button dhx_menu-button" : " dhx_button dhx_nav-menu-button";
    return dom_1.el("button", __assign({ class: "dhx_custom-button" + baseClass + (item.$activeParent ? baseClass + "--active" : ""), dhx_id: item.id, type: "button", ".innerHTML": item.html }, getAriaAttrs(item)), item.html ? "" : item.value);
}
exports.customHTMLButton = customHTMLButton;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(25);
function imageButton(item, widgetName) {
    var getAriaAttrs = function (item) {
        var attrs = {
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.twoState || item.active) {
            attrs["aria-pressed"] = item.active ? "true" : "false";
        }
        if (!item.value && item.src && item.tooltip) {
            attrs["aria-label"] = item.tooltip + " " + (item.count || "");
        }
        return attrs;
    };
    var baseClass = "dhx_" + widgetName + "-button-image";
    var isRibbon = widgetName === "ribbon";
    return dom_1.el("button.dhx_button", __assign({ class: baseClass +
            (item.size ? " " + baseClass + "--" + item.size : "") +
            (!item.value && item.src ? " " + baseClass + "--icon" : "") +
            (isRibbon && item.$openIcon ? " " + baseClass + "--select" : "") +
            (item.active ? " " + baseClass + "--active" : ""), dhx_id: item.id, type: "button" }, getAriaAttrs(item)), [
        isRibbon &&
            item.value &&
            item.$openIcon &&
            dom_1.el("span.dxi.dxi-menu-right", {
                class: baseClass + "__caret",
                "aria-hidden": "true",
            }),
        item.html
            ? dom_1.el("div", {
                class: baseClass + "__text",
                ".innerHTML": item.html,
            })
            : item.value &&
                dom_1.el("span", {
                    class: baseClass + "__text",
                }, item.value),
        item.src &&
            dom_1.el("span", {
                class: baseClass + "__image",
                style: { backgroundImage: "url(" + item.src + ")" },
                role: "presentation",
            }),
        item.count > 0 && helpers_1.getCount(item, baseClass + "__count", true),
    ]);
}
exports.imageButton = imageButton;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var types_1 = __webpack_require__(31);
function onBlur(events, id) {
    events.fire(types_1.NavigationBarEvents.inputBlur, [id]);
}
function onFocus(events, id) {
    events.fire(types_1.NavigationBarEvents.inputFocus, [id]);
}
function onInput(events, id, e) {
    events.fire(types_1.NavigationBarEvents.inputChange, [id, e.target.value]);
}
function input(item, events, widgetName) {
    return dom_1.el(".dhx_form-group.dhx_form-group--no-message-holder.dhx_form-group--label_sr" +
        (".dhx_" + widgetName + "__input"), {
        style: {
            width: item.width ? item.width : "200px",
        },
        role: "presentation",
    }, [
        item.label && dom_1.el("label.dhx_label", { for: item.id }, item.label),
        dom_1.el(".dhx_input__wrapper", {
            role: "presentation",
        }, [
            dom_1.el("input.dhx_input", {
                placeholder: item.placeholder,
                class: item.icon ? "dhx_input--icon-padding" : "",
                value: item.value,
                disabled: item.disabled,
                onblur: [onBlur, events, item.id],
                onfocus: [onFocus, events, item.id],
                oninput: [onInput, events, item.id],
                dhx_id: item.id,
                _hooks: {
                    didInsert: function (node) {
                        if (events) {
                            events.fire(types_1.NavigationBarEvents.inputCreated, [item.id, node.el]);
                        }
                    },
                },
                _key: item.id,
                "aria-label": item.label ||
                    item.helpMessage ||
                    "type " + (item.placeholder ? "text like " + item.placeholder : "text"),
            }),
            item.icon
                ? dom_1.el(".dhx_input__icon", {
                    class: item.icon,
                    "aria-hidden": "true",
                })
                : null,
        ]),
    ]);
}
exports.input = input;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var helpers_1 = __webpack_require__(25);
function menuItem(item, widgetName, asMenuItem) {
    var getAriaAttrs = function (item) {
        var attrs = {
            role: "menuitem",
            "aria-disabled": item.disabled ? "true" : "false",
        };
        if (item.items) {
            attrs["aria-haspopup"] = "true";
        }
        return attrs;
    };
    var baseClass = asMenuItem ? " dhx_menu-button" : " dhx_nav-menu-button";
    return dom_1.el("button", __assign({ class: "dhx_button" +
            baseClass +
            (item.disabled ? baseClass + "--disabled" : "") +
            (item.active || item.$activeParent ? baseClass + "--active" : ""), disabled: item.disabled, dhx_id: item.id, type: "button" }, getAriaAttrs(item)), asMenuItem
        ? [
            item.icon || item.value || item.html
                ? dom_1.el("span.dhx_menu-button__block.dhx_menu-button__block--left", [
                    item.icon &&
                        dom_1.el("span.dhx_menu-button__icon", {
                            class: item.icon,
                        }),
                    item.html
                        ? dom_1.el("div.dhx_menu-button__text", { ".innerHTML": item.html })
                        : item.value && dom_1.el("span.dhx_menu-button__text", item.value),
                ])
                : null,
            item.count > 0 || item.hotkey || item.items
                ? dom_1.el("span.dhx_menu-button__block.dhx_menu-button__block--right", [
                    item.count > 0 && helpers_1.getCount(item, " dhx_menu-button__count", false),
                    item.hotkey && dom_1.el("span.dhx_menu-button__hotkey", item.hotkey),
                    item.items && dom_1.el("span.dhx_menu-button__caret.dxi.dxi-menu-right"),
                ])
                : null,
        ]
        : [
            item.icon &&
                dom_1.el("span.dhx_menu-button__icon", {
                    class: item.icon,
                }),
            item.html
                ? dom_1.el("div.dhx_menu-button__text", { ".innerHTML": item.html })
                : item.value && dom_1.el("span.dhx_nav-menu-button__text", item.value),
        ]);
}
exports.menuItem = menuItem;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function separator(item, widgetName) {
    return null;
}
exports.separator = separator;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function spacer(item, widgetName) {
    return null;
}
exports.spacer = spacer;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
function title(item, widgetName) {
    return dom_1.el("span", {
        class: "dhx_navbar-title" + " dhx_navbar-title--" + widgetName,
        dhx_id: item.id,
        ".innerHTML": item.html,
        "aria-label": item.value || "",
    }, !item.html ? item.value : null);
}
exports.title = title;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var ts_calendar_1 = __webpack_require__(40);
var ts_popup_1 = __webpack_require__(18);
var types_1 = __webpack_require__(31);
var isInit;
var calendar;
var popup;
function onBlur(events, id) {
    events.fire(types_1.NavigationBarEvents.inputBlur, [id]);
}
function onFocus(events, id, e) {
    dom_1.awaitRedraw().then(function () { return popup.show(e.target); });
    events.fire(types_1.NavigationBarEvents.inputFocus, [id]);
}
function datePicker(item, events, widgetName) {
    if (!isInit) {
        popup = new ts_popup_1.Popup();
        calendar = new ts_calendar_1.Calendar(null, {
            dateFormat: item.dateFormat || "%d/%m/%y",
            value: item.value,
            css: "dhx_widget--bordered",
        });
        popup.attach(calendar);
        calendar.events.on("change", function () {
            popup.hide();
            events.fire(types_1.NavigationBarEvents.inputChange, [item.id, calendar.getValue()]);
        });
        isInit = true;
    }
    return dom_1.el(".dhx_form-group.dhx_form-group--no-message-holder.dhx_form-group--label_sr" +
        (".dhx_" + widgetName + "__input"), {
        style: {
            width: item.width ? item.width : "200px",
        },
        role: "presentation",
    }, [
        item.label && dom_1.el("label.dhx_label", { for: item.id }, item.label),
        dom_1.el(".dhx_input__wrapper", {
            role: "presentation",
        }, [
            dom_1.el("input.dhx_input", {
                placeholder: item.placeholder,
                class: item.icon ? "dhx_input--icon-padding" : "",
                value: calendar.getValue(),
                disabled: item.disabled,
                onblur: [onBlur, events, item.id],
                onfocus: [onFocus, events, item.id],
                dhx_id: item.id,
                readOnly: true,
                _hooks: {
                    didInsert: function (node) {
                        if (events) {
                            events.fire(types_1.NavigationBarEvents.inputCreated, [item.id, node.el]);
                        }
                    },
                },
                _key: item.id,
                "aria-label": item.label ||
                    item.helpMessage ||
                    "type " + (item.placeholder ? "text like " + item.placeholder : "text"),
            }),
            item.icon
                ? dom_1.el(".dhx_input__icon", {
                    class: item.icon,
                    "aria-hidden": "true",
                })
                : null,
        ]),
    ]);
}
exports.datePicker = datePicker;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Toolbar_1 = __webpack_require__(71);
var ScrollView_1 = __webpack_require__(29);
var dom_1 = __webpack_require__(0);
var html_1 = __webpack_require__(2);
var ts_message_1 = __webpack_require__(19);
var ProToolbar = /** @class */ (function (_super) {
    __extends(ProToolbar, _super);
    function ProToolbar(element, config) {
        var _this = _super.call(this, element, config) || this;
        _this.scrollView = new ScrollView_1.ScrollView(function () { return _this.getRootView(); });
        return _this;
    }
    ProToolbar.prototype._draw = function (element) {
        var _this = this;
        var getAriaAttrs = function (element) { return ({
            role: "toolbar",
            "aria-label": element || "",
        }); };
        var toolbarHeight = this.data.getLength()
            ? this.data.reduce(function (result, item) {
                switch (item.type) {
                    case "title":
                        return !result ? 20 : result;
                    case "button":
                        return item.size === "small" && (!result || result <= 28) ? 28 : result || 32;
                    default:
                        return 32;
                }
            }, 0) + 24
            : null;
        var navBar = [
            dom_1.el("ul.dhx_navbar.dhx_navbar--horizontal", __assign(__assign({ dhx_widget_id: this._uid, tabindex: 0 }, getAriaAttrs(element)), { onclick: this._handlers.onclick, onmousedown: this._handlers.onmousedown, oninput: this._handlers.input, onmouseover: this._handlers.tooltip, _hooks: {
                    didInsert: function (node) {
                        node.el.addEventListener("keyup", function (e) {
                            if (e.which !== 9) {
                                return;
                            }
                            var elem = html_1.locateNode(document.activeElement);
                            if (!elem) {
                                return;
                            }
                            var id = elem.getAttribute("dhx_id");
                            var item = _this.data.getItem(id);
                            if (item.tooltip) {
                                ts_message_1.tooltip(item.tooltip, {
                                    node: elem,
                                    position: ts_message_1.Position.bottom,
                                    force: true,
                                });
                            }
                        }, true);
                    },
                } }), this.data.map(function (item) { return _this._factory(item); }, this.data.getRoot(), false)),
        ];
        return dom_1.el("nav.dhx_widget.dhx_toolbar", {
            style: { height: toolbarHeight },
            class: this.config.css ? this.config.css : "",
        }, this.scrollView && this.scrollView.config.enable
            ? [].concat(this.scrollView.render(navBar))
            : navBar);
    };
    return ProToolbar;
}(Toolbar_1.Toolbar));
exports.ProToolbar = ProToolbar;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(150));
__export(__webpack_require__(151));


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var html_1 = __webpack_require__(2);
var ts_message_1 = __webpack_require__(19);
var ts_navbar_1 = __webpack_require__(22);
var ContextMenu = /** @class */ (function (_super) {
    __extends(ContextMenu, _super);
    function ContextMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._isContextMenu = true;
        return _this;
    }
    ContextMenu.prototype.showAt = function (elem, showAt) {
        if (showAt === void 0) { showAt = "bottom"; }
        if (elem instanceof MouseEvent) {
            this._close(elem);
            this._changeActivePosition({
                left: window.pageXOffset + elem.x + 1,
                right: window.pageXOffset + elem.x + 1,
                top: window.pageYOffset + elem.y,
                bottom: window.pageYOffset + elem.y,
                zIndex: ts_message_1.getZIndex(elem.currentTarget),
            }, showAt);
        }
        else if (elem instanceof TouchEvent) {
            this._close(elem);
            this._changeActivePosition({
                left: window.pageXOffset + elem.touches[0].clientX,
                right: window.pageXOffset + elem.touches[0].clientX,
                top: window.pageYOffset + elem.touches[0].clientY,
                bottom: window.pageYOffset + elem.touches[0].clientY,
                zIndex: ts_message_1.getZIndex(elem.currentTarget),
            }, showAt);
        }
        else {
            var node = html_1.toNode(elem);
            this._changeActivePosition(html_1.getRealPosition(node), showAt);
        }
    };
    ContextMenu.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "menuItem",
            allowedTypes: [
                "menuItem",
                "spacer",
                "separator",
                "customHTML",
                // TODO: deprecated
                "customHTMLButton",
            ],
            widgetName: "context-menu",
        });
    };
    ContextMenu.prototype._close = function (e) {
        var _this = this;
        this.events.on(ts_navbar_1.NavigationBarEvents.afterHide, function () {
            _this._activeMenu = null;
            _this._changeActivePosition(null, null);
        });
        _super.prototype._close.call(this, e);
    };
    ContextMenu.prototype._getMode = function (_item, _root, active) {
        return active ? this._mode : "right";
    };
    ContextMenu.prototype._changeActivePosition = function (position, mode) {
        this._activePosition = position;
        this._mode = mode;
        this._listenOuterClick();
        this.paint();
    };
    return ContextMenu;
}(ts_navbar_1.Navbar));
exports.ContextMenu = ContextMenu;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var ts_navbar_1 = __webpack_require__(22);
var Menu = /** @class */ (function (_super) {
    __extends(Menu, _super);
    function Menu(element, config) {
        var _this = _super.call(this, element, config) || this;
        var render = function () { return _this._draw(); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    Menu.prototype._getFactory = function () {
        return ts_navbar_1.createFactory({
            widget: this,
            defaultType: "menuItem",
            allowedTypes: ["navItem", "menuItem", "spacer", "separator", "customHTML", "customHTMLButton"],
            widgetName: "menu-nav",
        });
    };
    Menu.prototype._draw = function () {
        return dom_1.el("ul.dhx_widget", {
            dhx_widget_id: this._uid,
            onmousemove: this._handlers.onmousemove,
            onmouseleave: this._handlers.onmouseleave,
            onclick: this._handlers.onclick,
            onmousedown: this._handlers.onmousedown,
            class: "dhx_menu-nav " + (this.config.css ? this.config.css : ""),
        }, this._drawMenuItems(this.data.getRoot(), false));
    };
    return Menu;
}(ts_navbar_1.Navbar));
exports.Menu = Menu;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var AddColumn = /** @class */ (function () {
    function AddColumn(config) {
        this.config = config;
        this._store = config.dataStore;
        this.activeSheetName = config.spreadsheet.getActiveSheet().name;
    }
    AddColumn.prototype.do = function () {
        var cell = this.config.cell;
        if (!this._index) {
            this._index = main_1.getCellIndex(cell).col - 1;
        }
        var activePage = this._store.getPage(this.activeSheetName);
        activePage.addColumn(this._index, 1);
        this.config.spreadsheet.selection.setSelectedCell(cell);
    };
    AddColumn.prototype.undo = function () {
        var activePage = this._store.getPage(this.activeSheetName);
        activePage.removeColumn(this._index, 1);
        this.config.grid.paint();
        this.config.spreadsheet.selection.setSelectedCell(this.config.cell);
    };
    return AddColumn;
}());
exports.AddColumn = AddColumn;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var AddRow = /** @class */ (function () {
    function AddRow(config) {
        this.config = config;
        this._store = config.dataStore;
        this._activeSheetName = config.spreadsheet.getActiveSheet().name;
    }
    AddRow.prototype.do = function () {
        var cell = this.config.cell;
        if (!this._index) {
            this._index = main_1.getCellIndex(cell).row;
        }
        var activePage = this._store.getPage(this._activeSheetName);
        activePage.addRow(this._index, 1);
        this.config.grid.paint();
        this.config.spreadsheet.selection.setSelectedCell(cell);
    };
    AddRow.prototype.undo = function () {
        var activePage = this._store.getPage(this._activeSheetName);
        activePage.removeRow(this._index, 1);
        this.config.grid.paint();
        this.config.spreadsheet.selection.setSelectedCell(this.config.cell);
    };
    return AddRow;
}());
exports.AddRow = AddRow;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(6);
var AddSheet = /** @class */ (function () {
    function AddSheet(config) {
        this.config = config;
        this._store = config.dataStore;
    }
    AddSheet.prototype.do = function () {
        var _a = this.config, sheets = _a.sheets, val = _a.val;
        if (sheets.find(function (i) { return i.value === val; }))
            return;
        this._store.addPage(val);
        var cols = [];
        var rows = [];
        for (var i = 0; i < this.config.spreadsheet.config.colsCount; i++) {
            cols.push({ width: 120 });
        }
        for (var i = 0; i < this.config.spreadsheet.config.rowsCount; i++) {
            rows.push({ height: this.config.spreadsheet._grid.config.rowHeight });
        }
        this._store.getPage(val).setMeta({ focusedCell: { cell: "A1" }, selectedCells: ["A1"], cols: cols, rows: rows });
        var currentSheetId = this.config.spreadsheet.getActiveSheet().id;
        var currentSheetIndex = sheets.getIndex(currentSheetId);
        this._id = sheets.add({ value: val, id: this._id || null }, currentSheetIndex + 1);
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterSheetAdd, [{ name: val, id: this._id }]);
        this.config.spreadsheet._changeSheet(this._id);
        this.config.grid.paint();
    };
    AddSheet.prototype.undo = function () {
        this._store.removePage(this.config.val);
        this.config.sheets.remove(this._id);
        this.config.spreadsheet._changeSheet(this.config.prev);
    };
    return AddSheet;
}());
exports.AddSheet = AddSheet;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var DeleteColumn = /** @class */ (function () {
    function DeleteColumn(config) {
        this.config = config;
        this._store = config.dataStore;
        this._activeSheetName = config.spreadsheet.getActiveSheet().name;
    }
    DeleteColumn.prototype.do = function () {
        var cell = this.config.cell;
        var col = main_1.getCellIds(cell).col;
        if (!this._col) {
            this._col = col;
        }
        var activePage = this._store.getPage(this._activeSheetName);
        var rowCount = activePage.getSize()[0];
        this._cells = activePage.getCellRange(0, col, rowCount - 1, col);
        activePage.removeColumn(this._col, 1);
        this.config.spreadsheet.selection.setSelectedCell(cell);
        this.config.grid.paint();
    };
    DeleteColumn.prototype.undo = function () {
        var activePage = this._store.getPage(this._activeSheetName);
        activePage.addColumn(this._col, 1);
        for (var i = 0; i < this._cells.length; i++) {
            if (this._cells[i]) {
                activePage.setCell(i, this._col, this._cells[i]);
            }
        }
        this.config.spreadsheet.selection.setSelectedCell(this.config.cell);
        this.config.grid.paint();
    };
    return DeleteColumn;
}());
exports.DeleteColumn = DeleteColumn;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var DeleteRow = /** @class */ (function () {
    function DeleteRow(config) {
        this.config = config;
        this._store = config.dataStore;
        this._activeSheetName = config.spreadsheet.getActiveSheet().name;
    }
    DeleteRow.prototype.do = function () {
        var cell = this.config.cell;
        var row = main_1.getCellIds(cell).row;
        if (!this._row) {
            this._row = row;
        }
        var activePage = this._store.getPage(this._activeSheetName);
        var collCount = activePage.getSize()[1];
        this._cells = activePage.getCellRange(row, 0, row, collCount - 1);
        activePage.removeRow(this._row, 1);
        this.config.spreadsheet.selection.setSelectedCell(cell);
        this.config.grid.paint();
    };
    DeleteRow.prototype.undo = function () {
        var activePage = this._store.getPage(this._activeSheetName);
        activePage.addRow(this._row, 1);
        for (var i = 0; i < this._cells.length; i++) {
            if (this._cells[i]) {
                activePage.setCell(this._row, i, this._cells[i]);
            }
        }
        this.config.spreadsheet.selection.setSelectedCell(this.config.cell);
    };
    return DeleteRow;
}());
exports.DeleteRow = DeleteRow;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var DeleteSheet = /** @class */ (function () {
    function DeleteSheet(config) {
        this.config = config;
        this._store = config.dataStore;
        this._deletedSheet = __assign({}, config.sheets.getItem(config.prev));
    }
    DeleteSheet.prototype.do = function () {
        var _a = this.config, sheets = _a.sheets, spreadsheet = _a.spreadsheet, val = _a.val;
        var page = this._store.getPage(val);
        this._data = page ? page.serialize(true) : [];
        this._sheetMeta = page ? page.getMeta() : {};
        this._store.removePage(val);
        var index = (this._index = sheets.getIndex(this._deletedSheet.id));
        if (val === spreadsheet.getActiveSheet().name) {
            spreadsheet._changeSheet(sheets.getId(index === 1 ? index + 1 : index - 1));
        }
        sheets.remove(this._deletedSheet.id);
        this.config.grid.paint();
    };
    DeleteSheet.prototype.undo = function () {
        var _a = this.config, sheets = _a.sheets, spreadsheet = _a.spreadsheet, val = _a.val;
        this._store.addPage(val);
        sheets.add(this._deletedSheet, this._index);
        var page = this._store.getPage(val);
        page.setMeta(this._sheetMeta);
        page.parse(this._data);
        this._store.getStore().recalculate(true, page.getContext());
        spreadsheet._changeSheet(this._deletedSheet.id);
        this.config.grid.paint();
    };
    return DeleteSheet;
}());
exports.DeleteSheet = DeleteSheet;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var ActionsManager_1 = __webpack_require__(32);
var GroupAction = /** @class */ (function () {
    function GroupAction(config) {
        this.config = config;
        this._actions = [];
    }
    GroupAction.prototype.do = function () {
        var _this = this;
        var spreadsheet = this.config.spreadsheet;
        if (!this._actions.length) {
            var val_1 = this.config.val;
            var valueIndex_1 = 0;
            if (Array.isArray(val_1)) {
                val_1 = val_1[valueIndex_1];
            }
            this.config.spreadsheet.eachCell(function (cell) {
                var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
                var newCell = main_1.getCellIds(cell);
                var action = new ActionsManager_1.actions[_this.config.action](__assign(__assign({}, _this.config), { row: row || newCell.row, col: col || newCell.col, cell: cell,
                    val: val_1 }));
                _this._actions.push(action);
                if (Array.isArray(_this.config.val)) {
                    if (valueIndex_1 + 1 >= _this.config.val.length) {
                        valueIndex_1 = 0;
                    }
                    else {
                        valueIndex_1 += 1;
                    }
                    val_1 = _this.config.val[valueIndex_1];
                }
            }, this.config.cell);
        }
        for (var _i = 0, _a = this._actions; _i < _a.length; _i++) {
            var action = _a[_i];
            action.do();
        }
    };
    GroupAction.prototype.undo = function () {
        for (var _i = 0, _a = this._actions; _i < _a.length; _i++) {
            var action = _a[_i];
            action.undo();
        }
        var firstCell = this.config.cell.split(":")[0];
        this.config.spreadsheet.selection.setSelectedCell(firstCell);
    };
    return GroupAction;
}());
exports.GroupAction = GroupAction;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var ActionsManager_1 = __webpack_require__(32);
var GroupColAction = /** @class */ (function () {
    function GroupColAction(config) {
        this.config = config;
        this._actions = [];
    }
    GroupColAction.prototype.do = function () {
        var _this = this;
        if (!this._actions.length) {
            var id = main_1.getCellIds(this.config.cell);
            var startRow_1 = id.start.row;
            var firstCell_1 = this.config.cell.split(":")[0];
            this.config.spreadsheet.eachCell(function (cell) {
                var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
                if (row === startRow_1) {
                    var action = new ActionsManager_1.actions[_this.config.action](__assign(__assign({}, _this.config), { row: row,
                        col: col, cell: firstCell_1 }));
                    _this._actions.push(action);
                }
            }, this.config.cell);
        }
        for (var i = this._actions.length - 1; i >= 0; i--) {
            this._actions[i].do();
        }
    };
    GroupColAction.prototype.undo = function () {
        for (var i = 0; i < this._actions.length; i++) {
            this._actions[i].undo();
        }
    };
    return GroupColAction;
}());
exports.GroupColAction = GroupColAction;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var ActionsManager_1 = __webpack_require__(32);
var GroupRowAction = /** @class */ (function () {
    function GroupRowAction(config) {
        this.config = config;
        this._actions = [];
    }
    GroupRowAction.prototype.do = function () {
        var _this = this;
        if (!this._actions.length) {
            var id = main_1.getCellIds(this.config.cell);
            var startCol_1 = id.start.col;
            var firstCell_1 = this.config.cell.split(":")[0];
            this.config.spreadsheet.eachCell(function (cell) {
                var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
                if (col === startCol_1) {
                    var action = new ActionsManager_1.actions[_this.config.action](__assign(__assign({}, _this.config), { row: row,
                        col: col, cell: firstCell_1 }));
                    _this._actions.push(action);
                }
            }, this.config.cell);
        }
        for (var i = this._actions.length - 1; i >= 0; i--) {
            this._actions[i].do();
        }
    };
    GroupRowAction.prototype.undo = function () {
        for (var i = this._actions.length - 1; i >= 0; i--) {
            this._actions[i].undo();
        }
    };
    return GroupRowAction;
}());
exports.GroupRowAction = GroupRowAction;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var types_1 = __webpack_require__(6);
var LockCell = /** @class */ (function () {
    function LockCell(config) {
        this.config = config;
        this._store = config.dataStore;
        this._page = config.page;
    }
    LockCell.prototype.do = function () {
        var _a = this.config, val = _a.val, cell = _a.cell;
        var _b = main_1.getCellIds(cell), row = _b.row, col = _b.col;
        this._page.setCell(row, col, { locked: val });
        if (val) {
            this.config.editLine.lock();
        }
        else {
            this.config.editLine.unlock();
        }
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterFocusSet, [cell]);
    };
    LockCell.prototype.undo = function () {
        var _a = this.config, val = _a.val, cell = _a.cell;
        var _b = main_1.getCellIds(cell), row = _b.row, col = _b.col;
        this._page.setCell(row, col, { locked: !val });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterFocusSet, [cell]);
        if (val) {
            this.config.editLine.unlock();
        }
        else {
            this.config.editLine.lock();
        }
    };
    return LockCell;
}());
exports.LockCell = LockCell;


/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var types_1 = __webpack_require__(6);
var RemoveCellStyles = /** @class */ (function () {
    function RemoveCellStyles(config) {
        this.config = config;
        this._page = config.page;
    }
    RemoveCellStyles.prototype.do = function () {
        var cell = this.config.cell;
        var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
        var cellInfo = main_1.getCellInfo(cell, this._page);
        if (cellInfo.locked) {
            return;
        }
        this.config.prev = cellInfo.css;
        this._page.setCell(row, col, { css: "" });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterStyleChange, [cell, {}]);
        this.config.grid.paint();
    };
    RemoveCellStyles.prototype.undo = function () {
        var cell = this.config.cell;
        var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
        var cellInfo = main_1.getCellInfo(cell, this._page);
        if (cellInfo.locked) {
            return;
        }
        this._page.setCell(row, col, { css: this.config.prev });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterStyleChange, [cell, {}]);
    };
    return RemoveCellStyles;
}());
exports.RemoveCellStyles = RemoveCellStyles;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var RenameSheet = /** @class */ (function () {
    function RenameSheet(config) {
        this.config = config;
        this.page = config.activePage;
    }
    RenameSheet.prototype.do = function () {
        var _a = this.config, sheets = _a.sheets, dataStore = _a.dataStore, val = _a.val, prev = _a.prev;
        var item = sheets.getItem(prev);
        var activeSheet = this.config.spreadsheet.getActiveSheet().name;
        if (!item.prevValue) {
            sheets.update(item.id, { prevValue: item.value });
        }
        if (activeSheet === item.prevValue) {
            this.config.spreadsheet._activeSheetName = { name: val, id: item.id };
        }
        dataStore.renamePage(item.prevValue, val);
        sheets.update(prev, { value: val, prevValue: item.prevValue });
        this.config.grid.paint();
        this.config.spreadsheet.selection.setFocusedCell(this.config.spreadsheet.selection.getFocusedCell());
    };
    RenameSheet.prototype.undo = function () {
        var _a = this.config, sheets = _a.sheets, dataStore = _a.dataStore, val = _a.val, prev = _a.prev;
        var item = sheets.getItem(prev);
        dataStore.renamePage(val, item.prevValue);
        var activeSheet = this.config.spreadsheet.getActiveSheet().name;
        if (activeSheet === val) {
            this.config.spreadsheet._activeSheetName = { name: val, id: item.id };
        }
        sheets.update(prev, { value: item.prevValue, prevValue: item.prevValue });
        this.config.grid.paint();
        this.config.spreadsheet.selection.setFocusedCell(this.config.spreadsheet.selection.getFocusedCell());
    };
    return RenameSheet;
}());
exports.RenameSheet = RenameSheet;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var format_1 = __webpack_require__(13);
var main_1 = __webpack_require__(3);
var types_1 = __webpack_require__(6);
var SetCellFormat = /** @class */ (function () {
    function SetCellFormat(config) {
        this.config = config;
        this._page = config.page;
    }
    SetCellFormat.prototype.do = function () {
        var _a;
        var cell = this.config.cell;
        var val = this.config.val;
        var _b = main_1.getCellIds(cell), row = _b.row, col = _b.col;
        var format = format_1.getFormat(val);
        val = (format && format.mask) || val;
        var cellInfo = main_1.getCellInfo(cell, this._page);
        if (cellInfo.locked) {
            return;
        }
        if (!this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.beforeFormatChange, [cell, val])) {
            return;
        }
        var cellFormat = cellInfo.format;
        this.config.prev = (_a = cellInfo.format) === null || _a === void 0 ? void 0 : _a.id;
        var math = this.config.spreadsheet.getFormula(cell);
        if (((cellFormat === null || cellFormat === void 0 ? void 0 : cellFormat.mask) !== "@" && val === "@")) {
            this._page.setValue(row, col, "" + (math ? "=" + math : cellInfo.value || ""), 1);
        }
        if ((cellFormat === null || cellFormat === void 0 ? void 0 : cellFormat.mask) === "@" && val !== "@") {
            this._page.setValue(row, col, math ? "=" + math : cellInfo.value, 0);
        }
        this._page.setCell(row, col, {
            format: format || format_1.getFormat("common"),
        });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterFormatChange, [cell, val]);
        this.config.grid.paint();
    };
    SetCellFormat.prototype.undo = function () {
        var val = this.config.val;
        var prev = this.config.prev;
        this.config.val = prev;
        this.config.prev = val;
        this.do();
        this.config.val = val;
        this.config.prev = prev;
    };
    return SetCellFormat;
}());
exports.SetCellFormat = SetCellFormat;


/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var types_1 = __webpack_require__(6);
var SetCellStyle = /** @class */ (function () {
    function SetCellStyle(config) {
        this.config = config;
        this._page = config.page;
    }
    SetCellStyle.prototype.do = function () {
        var cell = this.config.cell;
        var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
        var cellInfo = main_1.getCellInfo(cell, this._page);
        if (cellInfo.locked) {
            return;
        }
        if (this.config.val === null) {
            this.config.val = "";
        }
        if (typeof this.config.val !== "string") {
            var styles = dhx.css.get(cellInfo.css) || {};
            if (Array.isArray(this.config.val)) {
                this.config.val = this.config.val[0];
            }
            var css = void 0;
            if (this.config.replace) {
                css = dhx.css.add(__assign({}, this.config.val));
            }
            else {
                css = dhx.css.add(__assign(__assign({}, styles), this.config.val));
            }
            this.config.val = css;
        }
        var val = this.config.val;
        if (!this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.beforeStyleChange, [
            cell,
            dhx.css.get(val),
        ])) {
            return;
        }
        this.config.prev = cellInfo.css;
        this._page.setCell(row, col, { css: val });
        this.config.spreadsheet.events.fire(types_1.SpreadsheetEvents.afterStyleChange, [
            this.config.cell,
            dhx.css.get(val),
        ]);
        this.config.grid.paint();
    };
    SetCellStyle.prototype.undo = function () {
        var val = this.config.val;
        var prev = this.config.prev;
        this.config.val = prev || "";
        this.config.prev = val || "";
        this.do();
        this.config.val = val;
        this.config.prev = prev;
    };
    return SetCellStyle;
}());
exports.SetCellStyle = SetCellStyle;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var date_1 = __webpack_require__(12);
var date_2 = __webpack_require__(27);
var format_1 = __webpack_require__(13);
var main_1 = __webpack_require__(3);
var types_1 = __webpack_require__(6);
var SetCellValue = /** @class */ (function () {
    function SetCellValue(config) {
        this.config = config;
        this._page = config.page;
    }
    SetCellValue.prototype.do = function () {
        var cell = this.config.cell;
        var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
        var value = this.config.val;
        var spreadsheet = this.config.spreadsheet;
        if (spreadsheet.isLocked(cell)) {
            return;
        }
        if (!spreadsheet.events.fire(types_1.SpreadsheetEvents.beforeValueChange, [cell, value])) {
            return;
        }
        var math = spreadsheet.getFormula(cell);
        this.config.prev = math ? "=" + math : spreadsheet.getValue(cell);
        var format = main_1.getCellInfo(cell, this._page).format;
        if (typeof value === "string" && value.startsWith("=") && (format === null || format === void 0 ? void 0 : format.mask) !== "@") {
            try {
                this._page.setValue(+row, +col, value);
            }
            catch (e) {
                // do nothing
            }
        }
        else if ((format === null || format === void 0 ? void 0 : format.id) === "date" && value) {
            var val = void 0;
            if (format_1.isNumeric(value)) {
                val = +value;
            }
            else if (date_1.stringToDate(value, format.dateFormat, true)) {
                val = date_2.getExcelDateFromJs(date_1.stringToDate(value, format.dateFormat));
            }
            else {
                val = value;
            }
            this.config.val = val;
            this._page.setValue(+row, +col, this.config.val);
        }
        else if ((format === null || format === void 0 ? void 0 : format.id) === "percent" && value.toString().endsWith("%")) {
            var clean = format_1.getCleanValue(value);
            var val = +(parseFloat(clean) / 100).toFixed(4);
            // tslint:disable-next-line
            this._page.setValue(+row, +col, val);
        }
        else if ((format === null || format === void 0 ? void 0 : format.id) !== "text") {
            var numValue = parseFloat(value);
            // tslint:disable-next-line
            this._page.setValue(+row, +col, numValue == value ? numValue : value);
        }
        else {
            this._page.setValue(+row, +col, value, 1);
        }
        this._page.setCell(row, col, {
            nextValue: undefined,
            edited: false,
            format: format || format_1.getDefaultFormats().filter(function (i) { return i.id === "common"; })[0],
        });
        this._page.setMeta({ inserted: true });
        this.config.grid.paint();
        spreadsheet.events.fire(types_1.SpreadsheetEvents.afterValueChange, [this.config.cell, value]);
    };
    SetCellValue.prototype.undo = function () {
        var val = this.config.val;
        var prev = this.config.prev;
        this.config.val = prev;
        this.config.prev = val;
        this.do();
        this.config.val = val;
        this.config.prev = prev;
    };
    return SetCellValue;
}());
exports.SetCellValue = SetCellValue;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var Clear = /** @class */ (function () {
    function Clear(config) {
        this.config = config;
    }
    Clear.prototype.do = function () {
        var spreadsheet = this.config.spreadsheet;
        this._data = spreadsheet.serialize();
        spreadsheet.parse([]);
    };
    Clear.prototype.undo = function () {
        var spreadsheet = this.config.spreadsheet;
        spreadsheet.parse(this._data);
    };
    return Clear;
}());
exports.Clear = Clear;


/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ClearSheet = /** @class */ (function () {
    function ClearSheet(config) {
        this.config = config;
        this._store = config.dataStore;
    }
    ClearSheet.prototype.do = function () {
        var _a = this.config, val = _a.val, spreadsheet = _a.spreadsheet;
        this._page = this._store.getPage(val);
        this._data = this._page ? this._page.serialize(true) : [];
        this._page.parse([]);
        spreadsheet._math.recalculate();
        spreadsheet.selection.setFocusedCell(spreadsheet.selection.getSelectedCell());
        spreadsheet._grid.paint();
    };
    ClearSheet.prototype.undo = function () {
        var spreadsheet = this.config.spreadsheet;
        this._page.parse(this._data);
        this._store.getStore().recalculate(true, this._page.getContext());
        spreadsheet.selection.setFocusedCell(spreadsheet.selection.getSelectedCell());
        spreadsheet._math.recalculate();
        spreadsheet._grid.paint();
    };
    return ClearSheet;
}());
exports.ClearSheet = ClearSheet;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var en_1 = __webpack_require__(14);
function getContextMenuStruct() {
    return [
        { id: "lock", value: en_1.default.lockCell, icon: "dxi dxi-key" },
        {
            id: "clear",
            value: en_1.default.clear,
            icon: "dxi dxi-eraser",
            items: [
                {
                    id: "clear-value",
                    value: en_1.default.clearValue,
                },
                {
                    id: "clear-styles",
                    value: en_1.default.clearStyles,
                },
                {
                    id: "clear-all",
                    value: en_1.default.clearAll,
                },
            ],
        },
        {
            id: "columns",
            value: en_1.default.columns,
            icon: "dxi dxi-table-column",
            items: [
                {
                    id: "add-col",
                    value: en_1.default.addColumn,
                    icon: "dxi dxi-table-column-plus-before",
                },
                {
                    id: "remove-col",
                    value: en_1.default.removeColumn,
                    icon: "dxi dxi-table-column-remove",
                },
            ],
        },
        {
            id: "rows",
            value: en_1.default.rows,
            icon: "dxi dxi-table-row",
            items: [
                {
                    id: "add-row",
                    value: en_1.default.addRow,
                    icon: "dxi dxi-table-row-plus-before",
                },
                {
                    id: "remove-row",
                    value: en_1.default.removeRow,
                    icon: "dxi dxi-table-row-remove",
                },
            ],
        },
    ];
}
exports.getContextMenuStruct = getContextMenuStruct;
function getSheetsContextMenuStruct(multisheets) {
    return [
        { id: "delete", value: en_1.default.deleteSheet, icon: "dxi dxi-delete-forever", disabled: !multisheets },
        { id: "rename", value: en_1.default.renameSheet, icon: "dxi dxi-pencil" },
    ];
}
exports.getSheetsContextMenuStruct = getSheetsContextMenuStruct;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var toolbar_1 = __webpack_require__(33);
var en_1 = __webpack_require__(14);
function getMenuStruct(config) {
    return [
        {
            id: "file",
            open: true,
            value: en_1.default.file,
            items: [
                {
                    id: "import",
                    value: en_1.default.importAs,
                    icon: "dxi dxi-file-import",
                    items: [
                        {
                            id: "import-xlsx",
                            value: "Microsoft Excel(.xlsx)",
                            icon: "dxi dxi-file-excel",
                        },
                    ],
                },
                {
                    id: "download",
                    value: en_1.default.downloadAs,
                    icon: "dxi dxi-file-export",
                    items: [
                        {
                            id: "export-xlsx",
                            value: "Microsoft Excel(.xlsx)",
                            icon: "dxi dxi-file-excel",
                        },
                    ],
                },
            ],
        },
        {
            id: "edit",
            value: en_1.default.edit,
            items: [
                { id: "undo", value: en_1.default.undo, icon: "dxi dxi-undo" },
                { id: "redo", value: en_1.default.redo, icon: "dxi dxi-redo" },
                { type: "separator" },
                { id: "lock", value: en_1.default.lockCell, icon: "dxi dxi-key" },
                { type: "separator" },
                {
                    id: "clear",
                    value: en_1.default.clear,
                    icon: "dxi dxi-eraser",
                    items: [
                        {
                            id: "clear-value",
                            value: en_1.default.clearValue,
                        },
                        {
                            id: "clear-styles",
                            value: en_1.default.clearStyles,
                        },
                        {
                            id: "clear-all",
                            value: en_1.default.clearAll,
                        },
                    ],
                },
            ],
        },
        {
            id: "insert",
            value: en_1.default.insert,
            items: [
                {
                    id: "columns",
                    value: en_1.default.columns,
                    icon: "dxi dxi-table-column",
                    items: [
                        {
                            id: "add-col",
                            value: en_1.default.addColumn,
                            icon: "dxi dxi-table-column-plus-before",
                        },
                        {
                            id: "remove-col",
                            value: en_1.default.removeColumn,
                            icon: "dxi dxi-table-column-remove",
                        },
                    ],
                },
                {
                    id: "rows",
                    value: en_1.default.rows,
                    icon: "dxi dxi-table-row",
                    items: [
                        {
                            id: "add-row",
                            value: en_1.default.addRow,
                            icon: "dxi dxi-table-row-plus-before",
                        },
                        {
                            id: "remove-row",
                            value: en_1.default.removeRow,
                            icon: "dxi dxi-table-row-remove",
                        },
                    ],
                },
            ],
        },
        {
            id: "configuration",
            value: en_1.default.format,
            items: [
                {
                    id: "font-weight-bold",
                    value: en_1.default.bold,
                    icon: "dxi dxi-format-bold",
                },
                {
                    id: "font-style-italic",
                    value: en_1.default.italic,
                    icon: "dxi dxi-format-italic",
                },
                {
                    id: "text-decoration-underline",
                    value: en_1.default.underline,
                    icon: "dxi dxi-format-underline",
                },
                { type: "separator" },
                {
                    id: "align",
                    value: en_1.default.halign,
                    items: [
                        {
                            id: "align-left",
                            value: en_1.default.left,
                            icon: "dxi dxi-format-align-left",
                        },
                        {
                            id: "align-center",
                            value: en_1.default.center,
                            icon: "dxi dxi-format-align-center",
                        },
                        {
                            id: "align-right",
                            value: en_1.default.right,
                            icon: "dxi dxi-format-align-right",
                        },
                    ],
                },
                {
                    id: "format",
                    type: "navItem",
                    value: en_1.default.numberFormat,
                    items: toolbar_1.getFormatsDropdown(config),
                },
            ],
        },
        {
            id: "help",
            value: en_1.default.help,
        },
    ];
}
exports.getMenuStruct = getMenuStruct;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var toolbar_1 = __webpack_require__(33);
var en_1 = __webpack_require__(14);
var hotKeys = {
    undo: "z",
    redo: "y",
    bold: "b",
    italic: "i",
    underline: "u",
};
function getHotKey(name) {
    // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
    var isMac = !!navigator.platform.match(/(Mac)/i);
    if (isMac) {
        return "\u2318+" + hotKeys[name];
    }
    return "ctrl+" + hotKeys[name];
}
exports.getHotKey = getHotKey;
function getToolbarStruct(elements, config) {
    var toolbarBlocks = {
        undo: [
            {
                id: "undo",
                type: "navItem",
                icon: "dxi dxi-undo",
                tooltip: en_1.default.undo + " (" + getHotKey("undo") + ")",
            },
            {
                id: "redo",
                type: "navItem",
                icon: "dxi dxi-redo",
                tooltip: en_1.default.redo + " (" + getHotKey("redo") + ")",
            },
        ],
        colors: [
            {
                id: "color",
                css: "dhx_button-toolbar-colorPicker",
                type: "HTMLButton",
                html: toolbar_1.getColorpickerTemplate("#4C4C4C", "format-color-text"),
                tooltip: en_1.default.textColor,
            },
            {
                id: "background",
                css: "dhx_button-toolbar-colorPicker",
                type: "HTMLButton",
                html: toolbar_1.getColorpickerTemplate("#FFF", "format-color-fill"),
                tooltip: en_1.default.backgroundColor,
            },
        ],
        lock: [
            {
                id: "lock",
                type: "navItem",
                icon: "dxi dxi-key",
                tooltip: en_1.default.lockCell,
            },
        ],
        file: [
            {
                id: "export",
                type: "navItem",
                icon: "dxi dxi-file-export",
                tooltip: en_1.default.export,
                items: [
                    {
                        id: "export-xlsx",
                        value: "Microsoft Excel(.xlsx)",
                        icon: "dxi dxi-file-excel",
                    },
                ],
            },
            {
                id: "import",
                type: "navItem",
                icon: "dxi dxi-file-import",
                tooltip: en_1.default.import,
                items: [
                    {
                        id: "import-xlsx",
                        value: "Microsoft Excel(.xlsx)",
                        icon: "dxi dxi-file-excel",
                    },
                ],
            },
        ],
        columns: [
            {
                id: "add-col",
                type: "navItem",
                icon: "dxi dxi-table-column-plus-before",
                tooltip: en_1.default.addColumn,
            },
            {
                id: "remove-col",
                type: "navItem",
                icon: "dxi dxi-table-column-remove",
                tooltip: en_1.default.removeColumn,
            },
        ],
        rows: [
            {
                id: "add-row",
                type: "navItem",
                icon: "dxi dxi-table-row-plus-before",
                tooltip: en_1.default.addRow,
            },
            {
                id: "remove-row",
                type: "navItem",
                icon: "dxi dxi-table-row-remove",
                tooltip: en_1.default.removeRow,
            },
        ],
        clear: [
            {
                type: "navItem",
                icon: "dxi dxi-eraser",
                id: "clear-group",
                tooltip: en_1.default.clear,
                items: [
                    {
                        id: "clear-value",
                        value: en_1.default.clearValue,
                    },
                    {
                        id: "clear-styles",
                        value: en_1.default.clearStyles,
                    },
                    {
                        id: "clear-all",
                        value: en_1.default.clearAll,
                    },
                ],
            },
        ],
        align: [
            {
                id: "halign",
                type: "navItem",
                icon: "dxi dxi-format-align-left",
                tooltip: en_1.default.halign,
                items: [
                    {
                        id: "halign-left",
                        type: "navItem",
                        value: en_1.default.left,
                        icon: "dxi dxi-format-align-left",
                        group: "halign",
                    },
                    {
                        id: "halign-center",
                        type: "navItem",
                        value: en_1.default.center,
                        icon: "dxi dxi-format-align-center",
                        group: "halign",
                    },
                    {
                        id: "halign-right",
                        type: "navItem",
                        value: en_1.default.right,
                        icon: "dxi dxi-format-align-right",
                        group: "halign",
                    }
                ]
            },
            {
                id: "valign",
                type: "navItem",
                icon: "dxi dxi-format-align-left",
                tooltip: en_1.default.valign,
                items: [
                    {
                        id: "valign-top",
                        type: "navItem",
                        group: "valign",
                        value: en_1.default.top,
                        icon: "dxi dxi-format-vertical-align-top",
                    },
                    {
                        id: "valign-center",
                        type: "navItem",
                        group: "valign",
                        value: en_1.default.center,
                        icon: "dxi dxi-format-vertical-align-center",
                    },
                    {
                        id: "valign-bottom",
                        type: "navItem",
                        group: "valign",
                        value: en_1.default.bottom,
                        icon: "dxi dxi-format-vertical-align-bottom",
                    }
                ]
            },
        ],
        decoration: [
            {
                id: "font-weight-bold",
                type: "navItem",
                icon: "dxi dxi-format-bold",
                tooltip: en_1.default.bold + " (" + getHotKey("bold") + ")",
            },
            {
                id: "font-style-italic",
                type: "navItem",
                icon: "dxi dxi-format-italic",
                tooltip: en_1.default.italic + " (" + getHotKey("italic") + ")",
            },
            {
                id: "text-decoration-underline",
                type: "navItem",
                icon: "dxi dxi-format-underline",
                tooltip: en_1.default.underline + " (" + getHotKey("underline") + ")",
            },
        ],
        help: [
            {
                id: "help",
                type: "navItem",
                icon: "dxi dxi-help-circle-outline",
                tooltip: en_1.default.help,
            },
        ],
        format: [
            {
                id: "format",
                type: "navItem",
                tooltip: en_1.default.numberFormat,
                css: "dhx_format-dropdown",
                items: toolbar_1.getFormatsDropdown(config),
            },
        ],
    };
    var defaultBlocks = ["undo", "colors", "decoration", "align", "format", "help"];
    elements = elements || defaultBlocks;
    var defaultBlockIndex = elements.indexOf("default");
    if (defaultBlockIndex !== -1) {
        elements.splice.apply(elements, __spreadArrays([defaultBlockIndex, 1], defaultBlocks));
    }
    elements = elements.filter(function (item, i, arr) { return arr.indexOf(item) === i; });
    return elements.reduce(function (struct, item, i, arr) {
        if (toolbarBlocks[item]) {
            struct.push.apply(struct, toolbarBlocks[item]);
            if (i !== arr.length - 1) {
                struct.push({
                    type: "separator",
                });
            }
        }
        return struct;
    }, []);
}
exports.getToolbarStruct = getToolbarStruct;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var view_1 = __webpack_require__(7);
var types_1 = __webpack_require__(6);
var main_1 = __webpack_require__(3);
var muon_1 = __webpack_require__(26);
var EditPopup_1 = __webpack_require__(173);
var core_1 = __webpack_require__(1);
var EditLine = /** @class */ (function (_super) {
    __extends(EditLine, _super);
    function EditLine(element, config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, element, config) || this;
        _this._store = config.math;
        _this._activePage = config.activePage;
        _this._suggest = new EditPopup_1.default(function (x, s, e, c) { return _this.setAtCursor(x, s, e, c); });
        _this._prevStyles = [];
        _this._htmlEvents = {
            oninput: function (e) {
                if (!_this._isEdit) {
                    e.target.value = _this._value;
                }
                _this._value = e.target.value;
                _this._isMath =
                    _this._value && _this._value.toString().startsWith("=") ? _this._parse(_this._value) : null;
                if (_this._isMath) {
                    _this._suggest.show(_this._value, e.target, _this._isMath, _this.config.spreadsheet._grid.config.height);
                }
                if (!_this._editMode) {
                    _this.config.events.fire(types_1.SpreadsheetEvents.editLineInput, [e.target.value]);
                }
                else {
                    _this.setValue(_this._value);
                }
            },
            onfocus: function (e) {
                if (!_this._editMode) {
                    _this.config.events.fire(types_1.SpreadsheetEvents.editLineFocus, [e.target.value, e]);
                }
            },
            onblur: function (e) {
                if (!_this._editMode) {
                    _this.config.events.fire(types_1.SpreadsheetEvents.editLineBlur, [e.target.value, e]);
                }
                else {
                    _this.focus();
                }
            },
            onclick: function (e) {
                var cursor = _this._input.selectionStart;
                if (cursor !== _this._prevCursorPosition && _this._isMath) {
                    _this._suggest.show(_this._value, e.target, _this._isMath);
                    _this._prevCursorPosition = cursor;
                }
            },
            onselectionchange: function () {
                var view = _this.getRootView();
                var wrapper = view && view.refs && view.refs.input_wrapper;
                var left = "0px";
                if (_this._isEdit && _this._value && _this._input) {
                    var cursor = _this._input.selectionStart;
                    var valWidth = core_1.getStringWidth(("" + _this._value).substr(0, cursor)) + 12;
                    var node = _this.getRootNode();
                    var nodeWidth = node.offsetWidth;
                    if (wrapper && nodeWidth < valWidth) {
                        left = nodeWidth - valWidth + "px";
                    }
                }
                if (wrapper) {
                    wrapper.el.style.left = left;
                    _this.paint();
                }
                return;
            }
        };
        document.addEventListener("selectionchange", _this._htmlEvents.onselectionchange);
        _this.config.events.on(types_1.SpreadsheetEvents.cellInput, function (_cell, val) {
            _this._setValue(val);
        });
        _this.config.events.on(types_1.SpreadsheetEvents.afterSheetChange, function () {
            _this._activePage = _this.config.spreadsheet._activePage;
            var edit = _this.config.spreadsheet._editMode;
            var cursor = _this._input && _this._input.selectionStart;
            if (edit) {
                _this._editMode = edit;
                _this._removeStyles();
                _this._setValue(_this._value);
                _this.focus();
                _this.setCursor(cursor);
                if (edit.pageName === _this.config.spreadsheet.getActiveSheet().name) {
                    _this._editMode = null;
                }
            }
            else {
                _this._editMode = null;
            }
        });
        _this.config.events.on(types_1.SpreadsheetEvents.afterEditStart, function () {
            _this._isEdit = true;
        });
        _this.config.events.on(types_1.SpreadsheetEvents.afterEditEnd, function () {
            _this._isEdit = false;
        });
        var render = function () { return _this._render(); };
        _this.mount(element, dom_1.create({ render: render }));
        return _this;
    }
    EditLine.prototype._parse = function (text, ctx) {
        if (ctx === void 0) { ctx = this._activePage.getContext(); }
        return this._store.parse(text, ctx);
    };
    EditLine.prototype.navigate = function (key) {
        if (key === "enter" && this._isMath) {
            this._presedEnter = true;
        }
        if (this._editMode && this._presedEnter) {
            this.setCellMath();
            return false;
        }
        return this._suggest.navigate(key);
    };
    EditLine.prototype.setAtCursor = function (value, from, to, cursor) {
        if (!this._input)
            return;
        var startStr = this._value.substr(0, from);
        var endStr = this._value.substr(to);
        var newVal = startStr + value + endStr;
        if (!this._editMode) {
            this.config.events.fire(types_1.SpreadsheetEvents.editLineInput, [newVal]);
        }
        else {
            this.setValue(newVal);
        }
        this._prevCursorPosition = from + cursor;
        this._input.setSelectionRange(from + cursor, from + cursor);
    };
    EditLine.prototype.focus = function () {
        if (this._input) {
            this._input.focus();
        }
    };
    EditLine.prototype.blur = function () {
        if (this._input) {
            this._input.blur();
        }
    };
    EditLine.prototype.lock = function () {
        this._locked = true;
        this.paint();
    };
    EditLine.prototype.unlock = function () {
        this._locked = false;
        this.paint();
    };
    EditLine.prototype.setValueAtRedactor = function (val) {
        var cursor = this._input && this._input.selectionStart;
        this.setAtCursor(val, cursor, cursor, val.length);
    };
    EditLine.prototype.setValue = function (val) {
        this.unlock();
        this._setValue(val);
    };
    EditLine.prototype._setValue = function (val) {
        this._value = val;
        this._isMath =
            this._value && this._value.toString().startsWith("=") ? this._parse(this._value) : null;
        this._colored = this._parseColors(val);
        if (this._input)
            this._input.value = val;
        this._presedEnter = false;
        this._htmlEvents.onselectionchange();
        this.paint();
    };
    EditLine.prototype.setCellMath = function () {
        if (!this._editMode)
            return;
        this._removeStyles();
        var _a = main_1.getCellIds(this._editMode.cell), row = _a.row, col = _a.col;
        var page = this._editMode.page;
        this._editMode = null;
        page.setCell(row, col, { nextValue: this._value });
        this.config.spreadsheet._changeSheet(page.getMeta().toolbarId);
        this.blur();
        this._presedEnter = false;
        return;
    };
    EditLine.prototype.getValue = function () {
        return this._value;
    };
    EditLine.prototype.clean = function () {
        var _this = this;
        // [dirty]
        setTimeout(function () {
            _this._setValue("");
        }, 1);
    };
    EditLine.prototype.destructor = function () {
        this._suggest.destructor();
    };
    EditLine.prototype.getInput = function () {
        return this._input;
    };
    EditLine.prototype.setCursor = function (cursor) {
        this._input && this._input.setSelectionRange(cursor, cursor);
    };
    EditLine.prototype.isCellExpected = function (cell, needToSet, editor) {
        if (this._presedEnter) {
            this._presedEnter = false;
            return;
        }
        if (this._isMath && this._isEdit) {
            var val = this._value;
            var commaIndex = cell.lastIndexOf(",");
            var cursorStart = editor
                ? editor.selectionStart
                : this._input
                    ? this._input.selectionStart
                    : this._value.length;
            var code = this._isMath.code;
            if (commaIndex > -1) {
                var parse = this._parse(this._isMath.source.substr(0, cursorStart)).code.reverse();
                var sumbolBeforeCursor = parse[2] === 12 ? parse[5] : parse[2];
                if (sumbolBeforeCursor !== muon_1.T_OPERATOR) {
                    cell = cell.substr(commaIndex);
                }
                else {
                    cell = cell.substr(commaIndex + 1);
                }
            }
            for (var i = 0; i < code.length; i += 3) {
                var isCursorAfter = code[i + 1] + code[i + 2] == cursorStart;
                var char = code[i] === muon_1.T_SPACE ? code[i - 3] : code[i];
                if (isCursorAfter &&
                    ((char == muon_1.T_OPERATOR && val[code[i + 1]] !== ")") || cell.includes(","))) {
                    if (needToSet) {
                        var active = this.config.spreadsheet.getActiveSheet().name;
                        if (this._editMode && this._editMode.pageName !== active) {
                            if (cell.includes(",")) {
                                cell = ",'" + active + "'!" + cell.substr(1);
                            }
                            else {
                                cell = "'" + active + "'!" + cell;
                            }
                        }
                        var startStr = val.substr(0, cursorStart);
                        var endStr = val.substr(cursorStart);
                        var newval = startStr + cell + endStr;
                        if (!this._editMode) {
                            this.config.events.fire(types_1.SpreadsheetEvents.editLineInput, [newval]);
                        }
                        else {
                            this.setValue(newval);
                            this.setCursor(startStr.length + cell.length);
                        }
                        return startStr.length + cell.length;
                    }
                    return cursorStart;
                }
            }
        }
        return 0;
    };
    EditLine.prototype._render = function () {
        var _this = this;
        return dom_1.el(".dhx_edit_line", {}, [
            dom_1.el(".input__wrapper", [
                dom_1.el(".input_value", {
                    ".innerHTML": this._colored,
                    _ref: "input_wrapper",
                }),
                dom_1.el("input.dhx_edit_line_input", {
                    _hooks: {
                        didInsert: function (n) {
                            _this._input = n.el;
                        },
                        didUnmount: function () {
                            document.removeEventListener("selectionchange", _this._htmlEvents.onselectionchange);
                        }
                    },
                    oninput: this._htmlEvents.oninput,
                    onfocus: this._htmlEvents.onfocus,
                    onblur: this._htmlEvents.onblur,
                    onclick: this._htmlEvents.onclick,
                    value: this._value || "",
                    _ref: "input",
                    disabled: this._locked,
                }),
                dom_1.el(".input-animation"),
            ]),
        ]);
    };
    EditLine.prototype._parseColors = function (val) {
        this._removeStyles();
        var styleNum = 1;
        var result = val;
        if (val && val[0] === "=") {
            var code = this._parse(val).code;
            result = "";
            var valCursor = 0;
            var _loop_1 = function (i) {
                switch (code[i]) {
                    case muon_1.T_SPACE:
                        for (var c = 0; c < code[i + 2]; c++) {
                            result += "&nbsp;";
                            valCursor++;
                        }
                        break;
                    case muon_1.T_ARG:
                    case muon_1.T_RANGE:
                        // eslint-disable-next-line no-case-declarations
                        var str_1 = val.substr(code[i + 1], code[i + 2]);
                        // eslint-disable-next-line no-case-declarations
                        var isSelected = this_1._prevStyles.find(function (item) { return item && item.cell === str_1; });
                        styleNum = styleNum === 9 ? 1 : styleNum;
                        if (code[i + 1] > valCursor) {
                            result += val.substr(valCursor, code[i + 1] - valCursor);
                        }
                        valCursor = code[i + 1] + code[i + 2];
                        result += "<span class=text_range_" + (isSelected ? isSelected.styleNum : styleNum) + ">" + str_1 + "</span>";
                        if (!isSelected && code[i - 3] !== muon_1.T_ERROR) {
                            this_1._setStyles(str_1, styleNum);
                            this_1._prevStyles.push({ cell: str_1, styleNum: styleNum });
                            ++styleNum;
                        }
                        break;
                    case muon_1.T_DATA:
                    case muon_1.T_ERROR:
                        break;
                    case muon_1.T_PAGE:
                        if (code[i + 3] !== muon_1.T_ARG && code[i + 3] !== muon_1.T_RANGE && code[i + 3] !== muon_1.T_ERROR) {
                            if (code[i + 1] !== valCursor) {
                                result += val.substr(valCursor, code[i + 1] - valCursor);
                            }
                            valCursor = code[i + 1] + code[i + 2];
                            result += val.substr(code[i + 1], code[i + 2]);
                        }
                        break;
                    default:
                        if (code[i + 1] > valCursor) {
                            result += val.substr(valCursor, code[i + 1] - valCursor);
                        }
                        valCursor = code[i + 1] + code[i + 2];
                        result += val.substr(code[i + 1], code[i + 2]);
                }
            };
            var this_1 = this;
            for (var i = 0; i < code.length; i += 3) {
                _loop_1(i);
            }
            if (valCursor !== val.length) {
                result += val.substr(valCursor, val.length - valCursor);
            }
        }
        return result;
    };
    EditLine.prototype._setStyles = function (cell, i) {
        if (cell.includes("$")) {
            cell = cell = cell.split("$").join("");
        }
        if (!cell.includes("!")) {
            cell =
                (this._editMode ? this._editMode.pageName : this.config.spreadsheet.getActiveSheet().name) +
                    "!" +
                    cell;
        }
        var grid = this.config.grid;
        var code = this._parse(cell).code;
        if (muon_1.fromId(code[7])[2] !== this._activePage.getID()) {
            return;
        }
        else if (cell.includes("!")) {
            cell = cell.substr(cell.indexOf("!") + 1);
        }
        if (cell.indexOf(":") !== -1) {
            this.config.spreadsheet.eachCell(function (c) {
                var _a = main_1.getCellIds(c), row = _a.row, col = _a.col;
                grid.addCellCss("" + (row + 1), "" + (col + 1), "range_" + i);
            }, cell);
        }
        else {
            var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
            grid.addCellCss("" + (row + 1), "" + (col + 1), "range_" + i);
        }
    };
    EditLine.prototype._removeStyles = function () {
        var _loop_2 = function (item) {
            if (!item)
                return { value: void 0 };
            var grid = this_2.config.grid;
            var cell = item.cell;
            if (cell.includes("$")) {
                cell = cell.split("$").join("");
            }
            if (cell.includes("!")) {
                cell = cell.substr(cell.indexOf("!") + 1);
            }
            if (cell.includes(":")) {
                this_2.config.spreadsheet.eachCell(function (c) {
                    var _a = main_1.getCellIds(c), row = _a.row, col = _a.col;
                    grid.removeCellCss("" + (row + 1), "" + (col + 1), "range_" + item.styleNum);
                }, cell);
            }
            else {
                var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
                grid.removeCellCss("" + (row + 1), "" + (col + 1), "range_" + item.styleNum);
            }
        };
        var this_2 = this;
        for (var _i = 0, _a = this._prevStyles; _i < _a.length; _i++) {
            var item = _a[_i];
            var state_1 = _loop_2(item);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        this._prevStyles = [];
    };
    return EditLine;
}(view_1.View));
exports.EditLine = EditLine;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ts_popup_1 = __webpack_require__(18);
var ts_list_1 = __webpack_require__(42);
var muon_1 = __webpack_require__(26);
var EditPopup = /** @class */ (function () {
    function EditPopup(cb) {
        this._suggestCallback = cb;
    }
    EditPopup.prototype.isVisible = function () {
        return this._popup && this._popup.isVisible();
    };
    EditPopup.prototype.hide = function () {
        if (this.isVisible())
            this._popup.hide();
    };
    EditPopup.prototype.destructor = function () {
        if (this._popup)
            this._popup.destructor();
    };
    EditPopup.prototype.navigate = function (key) {
        if (!this.isVisible()) {
            return false;
        }
        var list = this._list;
        var count = list.data.getLength();
        if (!count)
            return false;
        if (key === "arrowUp" || key === "arrowDown") {
            var dir = key === "arrowDown" ? 1 : -1;
            var index = list.data.getIndex(list.getFocus());
            if (typeof index === "undefined")
                index = dir === -1 ? count : -1;
            this._list.setFocus(list.data.getId((index + dir + count) % count));
            return true;
        }
        // enter key
        var suggest = list.getFocusItem();
        if (!suggest) {
            var id = this._list.data.getId(0);
            suggest = this._list.data.getItem(id);
        }
        this._insertSuggest(suggest.value);
        return true;
    };
    EditPopup.prototype.show = function (val, input, fm, maxHeight, cursor) {
        var cursorStart = cursor || input.selectionStart;
        var code = fm.code;
        var popup = this._getPopup(maxHeight);
        var _loop_1 = function (i) {
            if (code[i] == muon_1.T_NAME && cursorStart == code[i + 1] + code[i + 2]) {
                // cursor after name
                var check_1 = val.substr(code[i + 1], code[i + 2]).toUpperCase();
                this_1._list.data.filter(function (item) { return item.value.startsWith(check_1); });
                if (this_1._list.data.getLength()) {
                    this_1._cursorStart = cursorStart;
                    this_1._startTrim = code[i + 1];
                    popup.show(input, { centering: false });
                }
                else {
                    popup.hide();
                }
                return { value: void 0 };
            }
        };
        var this_1 = this;
        for (var i = 0; i < code.length; i += 3) {
            var state_1 = _loop_1(i);
            if (typeof state_1 === "object")
                return state_1.value;
        }
        // unfilter if any
        popup.hide();
    };
    EditPopup.prototype._insertSuggest = function (suggest) {
        this._suggestCallback(suggest + "()", this._startTrim, this._cursorStart, suggest.length + 1);
        this._popup.hide();
    };
    EditPopup.prototype._getPopup = function (maxHeight) {
        var _this = this;
        if (!this._popup) {
            var data = Object.keys(muon_1.methods).map(function (i) { return ({ value: i }); });
            this._popup = new ts_popup_1.Popup({
                css: "dhx_suggest_list",
            });
            this._list = new ts_list_1.List(null);
            this._list.data.parse(data);
            this._list.events.on("Click", function (id) {
                var suggest = _this._list.selection.getItem();
                _this._insertSuggest(suggest.value);
                _this._list.selection.remove(suggest.id);
            });
            this._popup.attach(this._list);
        }
        var popup = this._popup.getRootNode();
        if (!popup.style.maxHeight && maxHeight) {
            popup.style.maxHeight = maxHeight + "px";
        }
        return this._popup;
    };
    return EditPopup;
}());
exports.default = EditPopup;


/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
function getHeaderCell(letter, index) {
    return "<div class=\"dhx_custom_header_cell\">" + letter + "\n\t<div class=\"dhx_resizer_grip_wrap\">\n\t\t\t<div class=\"dhx_resizer_grip\" dhx_id=" + index + ">\n\t\t\t\t<div class=\"dhx_resizer_grip_line\"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>";
}
exports.getHeaderCell = getHeaderCell;
function getIndexRowCell(index) {
    return "<div class=\"dhx_custom_index_cell\">" + index + "\n\t<div class=\"dhx_resizer_grip_wrap\">\n\t\t\t<div class=\"dhx_resizer_grip\" dhx_id=" + (index - 1) + ">\n\t\t\t\t<div class=\"dhx_resizer_grip_line\"></div>\n\t\t\t</div>\n\t\t</div>\n\t</div>";
}
exports.getIndexRowCell = getIndexRowCell;
function updateColumns(config) {
    var columns = config.columns;
    var totalWidth = 0;
    columns.map(function (col, i) {
        col.width = col.width || 120;
        totalWidth += col.hidden ? 0 : col.width;
        if (col.id !== "$index") {
            var letter = main_1.getLetterFromNumber(i);
            col.header = [
                {
                    text: getHeaderCell(letter, i),
                    css: "",
                },
            ];
            col.$letter = letter;
        }
    });
    config.$totalWidth = totalWidth;
}
exports.updateColumns = updateColumns;
function updateRowsIndex(data) {
    data.map(function (row, i) {
        row.$index = i + 1;
    });
}
exports.updateRowsIndex = updateRowsIndex;
function removeRowsCss(grid) {
    grid.data.map(function (row) {
        grid.removeRowCss(row.id, "dhx_selected_row");
    });
}
exports.removeRowsCss = removeRowsCss;


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(6);
var main_1 = __webpack_require__(3);
var BufferManager = /** @class */ (function () {
    function BufferManager(spreadsheet, grid, callAction, page, dataStore) {
        this._spreadsheet = spreadsheet;
        this._grid = grid;
        this._activePage = page;
        this._math = dataStore.getStore();
        this._dataStore = dataStore;
        // [dirty]
        this._callAction = callAction.bind(spreadsheet);
        this._buffer = {
            value: "",
            math: [],
            styles: {},
            cell: "",
            cells: "",
            operation: "",
            inserted: false,
            formats: [],
            html: "",
        };
        this._setHandlers();
    }
    BufferManager.prototype.store = function (operation, col, row) {
        var _this = this;
        if (col === void 0) { col = null; }
        if (row === void 0) { row = null; }
        var focus = this._spreadsheet.selection.getFocusedCell();
        var cellInfo = main_1.getCellInfo(focus, this._activePage);
        var cell = this._spreadsheet.selection.getSelectedCell();
        if (this._prevCopyPage) {
            this._prevCopyPage.setMeta({ inserted: true });
        }
        if (cellInfo.edited) {
            return;
        }
        var range = main_1.isRangeId(cell);
        var arrOfCells = [cell];
        if (range && cell.includes(",")) {
            arrOfCells = cell.split(",");
            var lastCopyCell = arrOfCells[arrOfCells.length - 1];
            if (!cell.includes(":")) {
                cell = lastCopyCell;
                arrOfCells = [cell];
            }
            else if (!lastCopyCell.includes(":")) {
                cell = lastCopyCell;
                arrOfCells = [cell];
            }
            else {
                var firstRange = void 0;
                var prevItem = void 0;
                var resArr = void 0;
                var firstRangeCoords = void 0;
                var dir = void 0;
                for (var i = 0; i < arrOfCells.length; i++) {
                    var item = arrOfCells[i];
                    if (item.includes(":") && !firstRange) {
                        firstRange = item;
                        firstRangeCoords = {
                            start: main_1.getCellIds(firstRange.split(":")[0]),
                            end: main_1.getCellIds(firstRange.split(":")[1]),
                        };
                    }
                    if (i) {
                        if (!item.includes(":") && !prevItem.includes(":")) {
                            var checkFirstRange = firstRangeCoords.start.row === firstRangeCoords.end.row ||
                                firstRangeCoords.start.col === firstRangeCoords.end.col;
                            if (checkFirstRange) {
                                var dir_1 = firstRangeCoords.start.row === firstRangeCoords.end.row ? "row" : "col";
                                var cellId = main_1.getCellIds(item)[dir_1];
                                if (firstRangeCoords.start[dir_1] === cellId[dir_1]) {
                                    resArr.push(item);
                                }
                            }
                            else {
                                cell = lastCopyCell;
                                i = arrOfCells.length;
                                resArr = [cell];
                            }
                        }
                        if (item.includes(":") && item !== firstRange) {
                            var firstCellId = main_1.getCellIds(item.split(":")[0]);
                            var lastCellId = main_1.getCellIds(item.split(":")[1]);
                            var firstCellCheck = firstCellId.row === firstRangeCoords.start.row ||
                                firstCellId.row === firstRangeCoords.end.row ||
                                firstCellId.col === firstRangeCoords.start.col ||
                                firstCellId.col === firstRangeCoords.end.col;
                            var lastCellCheck = lastCellId.row === firstRangeCoords.start.row ||
                                lastCellId.row === firstRangeCoords.end.row ||
                                lastCellId.col === firstRangeCoords.start.col ||
                                lastCellId.col === firstRangeCoords.end.col;
                            var isSameRange = firstCellCheck && lastCellCheck;
                            var currentDir = firstCellId.row === firstRangeCoords.start.row ? "col" : "row";
                            if (!dir) {
                                dir = currentDir;
                            }
                            if (isSameRange && dir === currentDir) {
                                resArr.push(item);
                            }
                            else {
                                cell = lastCopyCell;
                                i = arrOfCells.length;
                                resArr = [cell];
                            }
                        }
                    }
                    else {
                        resArr = [item];
                    }
                    prevItem = item;
                }
                arrOfCells = resArr;
                if (arrOfCells.length > 1) {
                    cell = arrOfCells.join();
                }
            }
        }
        if (main_1.isRangeId(cell) && !cell.includes(":")) {
            this._buffer.cell = null;
            return;
        }
        var res = [];
        var isColDir;
        if (main_1.isRangeId(arrOfCells[0])) {
            var firstCellRow = main_1.getCellIds(arrOfCells[0].split(":")[0]).row;
            var lastCellRow = main_1.getCellIds(arrOfCells[0].split(":")[1]).row;
            var nextCellRow = arrOfCells[1] && main_1.getCellIds(arrOfCells[1].split(":")[0]).row;
            isColDir = nextCellRow && (nextCellRow === firstCellRow || nextCellRow === lastCellRow);
        }
        var currentRow = 0;
        var _loop_1 = function (i) {
            var index = 0;
            var prevCell;
            currentRow = isColDir ? 0 : currentRow;
            var range_1 = arrOfCells[i];
            this_1._spreadsheet.eachCell(function (c, val) {
                if (!val) {
                    val = " ";
                }
                if (!index) {
                    res[currentRow] ? (res[currentRow] += "\t" + val) : res.push("" + val);
                }
                else {
                    var prevCellId = main_1.getCellIds(prevCell);
                    var cellId = main_1.getCellIds(c);
                    if (prevCellId.row === cellId.row) {
                        res[currentRow] ? (res[currentRow] += "\t" + val) : res.push("" + val);
                    }
                    else {
                        currentRow++;
                        res[currentRow] ? (res[currentRow] += "\t" + val) : res.push("" + val);
                    }
                }
                prevCell = c;
                index++;
            }, range_1);
            currentRow++;
        };
        var this_1 = this;
        for (var i = 0; i < arrOfCells.length; i++) {
            _loop_1(i);
        }
        this._buffer.value = res.join("\n");
        this._buffer.styles = this._spreadsheet.getStyle(cell);
        if (main_1.isRangeId(cell)) {
            var math_1 = [];
            this._spreadsheet.eachCell(function (c) {
                math_1.push(_this._spreadsheet._getMath(c));
            }, cell);
            this._buffer.math = math_1;
        }
        else {
            var math = this._spreadsheet._getMath(cell);
            this._buffer.math = [math];
        }
        this._buffer.cells = cell;
        this._buffer.formats = this._spreadsheet.getFormat(cell);
        this._buffer.cell = focus;
        this._buffer.operation = operation;
        this._activePage.setMeta({ inserted: false });
        this._prevCopyPage = this._activePage;
        this._grid.paint();
    };
    BufferManager.prototype.paste = function () {
        var _this = this;
        if (!this._buffer.cell) {
            return;
        }
        this._activePage.setMeta({ inserted: true });
        var cell = this._buffer.cell;
        var format = this._buffer.formats;
        var newCell = cell;
        var isRangeCells = false;
        if (main_1.isRangeId(this._buffer.cells)) {
            isRangeCells = true;
            var index = main_1.getRangeIndexes(this._buffer.cells);
            var to = main_1.getCellIndex(cell);
            var diff = {
                row: index.end.row - index.start.row,
                col: index.end.col - index.start.col,
            };
            var lastCell = main_1.getCellNameByIndex(to.row + diff.row, to.col + diff.col);
            if (main_1.isRangeId(cell)) {
                var bufferCellsLength = main_1.getCellsArray(this._buffer.cells).length;
                var targetCellsLength = main_1.getCellsArray(cell).length;
                if (bufferCellsLength > targetCellsLength) {
                    newCell = cell.split(":")[0] + ":" + lastCell;
                }
            }
            else {
                newCell += ":" + lastCell;
            }
        }
        var isRangeTarget = main_1.isRangeId(newCell);
        var styles = Array.isArray(this._buffer.styles)
            ? this._buffer.styles.map(function (obj) { return dhx.css.add(obj); })
            : dhx.css.add(this._buffer.styles);
        var actionsGroup = [];
        if (this._buffer.operation === "cut") {
            actionsGroup.push({
                cell: this._buffer.cells,
                action: types_1.Actions.setCellFormat,
                groupAction: isRangeTarget ? types_1.Actions.groupAction : null,
                val: "",
                page: this._activePage,
                dataStore: this._dataStore,
            }, {
                cell: this._buffer.cells,
                action: types_1.Actions.setCellValue,
                val: "",
                page: this._activePage,
                groupAction: isRangeCells ? types_1.Actions.groupAction : null,
                dataStore: this._dataStore,
            }, {
                cell: this._buffer.cells,
                action: types_1.Actions.setCellStyle,
                val: "",
                page: this._activePage,
                groupAction: isRangeCells ? types_1.Actions.groupAction : null,
                dataStore: this._dataStore,
            });
            this._buffer.operation = "copy";
        }
        // get values from buffer
        var values = (isRangeCells ? [].concat(this._buffer.value) : this._buffer.value);
        var maths = this._buffer.math;
        var valuesLength = values.length;
        // get info about start range
        var from;
        var dx;
        // let dy: number;
        if (isRangeCells) {
            var indexes = main_1.getRangeIndexes(this._buffer.cells);
            from = indexes.start;
            dx = indexes.end.col - indexes.start.col + 1;
            // dy = indexes.end.row - indexes.start.row + 1;
        }
        else {
            from = main_1.getCellIndex(this._buffer.cells);
            dx = 1;
            // dy = 1;
        }
        var i = 0;
        this._spreadsheet.eachCell(function (aCell) {
            var iSource = i % valuesLength;
            var value = values[iSource];
            var math = maths[iSource];
            if (math) {
                var ix = iSource % dx;
                var iy = (iSource - ix) / dx;
                var to = main_1.getCellIndex(aCell);
                value =
                    "=" +
                        _this._math.transposeMath(math.source, to.row - from.row - iy, to.col - from.col - ix);
            }
            values[i] = value;
            i++;
        }, newCell);
        actionsGroup.push({
            cell: newCell,
            action: types_1.Actions.setCellFormat,
            groupAction: isRangeTarget ? types_1.Actions.groupAction : null,
            val: format,
            page: this._activePage,
            dataStore: this._dataStore,
        }, {
            cell: newCell,
            action: types_1.Actions.setCellValue,
            val: values,
            page: this._activePage,
            groupAction: types_1.Actions.groupAction,
            dataStore: this._dataStore,
        }, {
            cell: newCell,
            action: types_1.Actions.setCellStyle,
            val: styles,
            page: this._activePage,
            groupAction: isRangeTarget ? types_1.Actions.groupAction : null,
            dataStore: this._dataStore,
        });
        this._callAction(actionsGroup);
        this._spreadsheet.selection.setSelectedCell(newCell);
    };
    BufferManager.prototype.getStruct = function () {
        return this._buffer;
    };
    BufferManager.prototype._setHandlers = function () {
        var _this = this;
        this._spreadsheet.events.on(types_1.SpreadsheetEvents.afterSheetChange, function () {
            _this._activePage = _this._spreadsheet._activePage;
        });
    };
    return BufferManager;
}());
exports.BufferManager = BufferManager;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts_data_1 = __webpack_require__(8);
var main_1 = __webpack_require__(3);
var CustomCsvDriver = /** @class */ (function (_super) {
    __extends(CustomCsvDriver, _super);
    function CustomCsvDriver() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CustomCsvDriver.prototype.toJsonArray = function (data) {
        var dataArr = _super.prototype.toJsonArray.call(this, data);
        var d = dataArr.reduce(function (total, item, i) {
            for (var key in item) {
                total.push({
                    value: item[key],
                    cell: main_1.getCellNameByIndex(i, parseFloat(key)),
                });
            }
            return total;
        }, []);
        return d;
    };
    return CustomCsvDriver;
}(ts_data_1.CsvDriver));
exports.CustomCsvDriver = CustomCsvDriver;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var FocusManager_1 = __webpack_require__(10);
var html_1 = __webpack_require__(2);
function getHotKeyCode(code) {
    var matches = code.toLowerCase().match(/\w+/g);
    var comp = 0;
    var key = "";
    for (var i = 0; i < matches.length; i++) {
        var check = matches[i];
        if (check === "ctrl") {
            comp += 4;
        }
        else if (check === "shift") {
            comp += 2;
        }
        else if (check === "alt") {
            comp += 1;
        }
        else {
            key = check;
        }
    }
    return comp + key;
}
var ie_key_map = {
    Up: "arrowUp",
    Down: "arrowDown",
    Right: "arrowRight",
    Left: "arrowLeft",
    Esc: "escape",
    Spacebar: "space",
};
var KeyManager = /** @class */ (function () {
    function KeyManager(beforeCall) {
        var _this = this;
        this._keysStorage = {};
        this._initHandler = function (e) {
            var key;
            if ((e.which >= 48 && e.which <= 57) || (e.which >= 65 && e.which <= 90)) {
                key = String.fromCharCode(e.which);
            }
            else {
                var keyName = e.which === 32 ? e.code : e.key;
                key = html_1.isIE() ? ie_key_map[keyName] || keyName : keyName;
            }
            var actions = _this._keysStorage[(e.ctrlKey || e.metaKey ? 4 : 0) +
                (e.shiftKey ? 2 : 0) +
                (e.altKey ? 1 : 0) +
                (key && key.toLowerCase())];
            if (actions) {
                for (var i = 0; i < actions.length; i++) {
                    if (_this._beforeCall && _this._beforeCall(e, FocusManager_1.focusManager.getFocusId()) === false) {
                        return;
                    }
                    actions[i].handler(e);
                }
            }
        };
        if (beforeCall) {
            this._beforeCall = beforeCall;
        }
        document.addEventListener("keydown", this._initHandler);
    }
    KeyManager.prototype.destructor = function () {
        document.removeEventListener("keydown", this._initHandler);
        this.removeHotKey();
    };
    KeyManager.prototype.addHotKey = function (key, handler) {
        var code = getHotKeyCode(key);
        if (!this._keysStorage[code]) {
            this._keysStorage[code] = [];
        }
        this._keysStorage[code].push({ handler: handler });
    };
    KeyManager.prototype.removeHotKey = function (key, handler) {
        var _this = this;
        if (key) {
            if (key && handler) {
                var code_1 = getHotKeyCode(key);
                var functionToString_1 = function (fun) {
                    return fun
                        .toString()
                        .replace(/\n/g, "")
                        .replace(/\s/g, "");
                };
                this._keysStorage[code_1].forEach(function (existHotKey, i) {
                    if (functionToString_1(existHotKey.handler) === functionToString_1(handler)) {
                        delete _this._keysStorage[code_1][i];
                        _this._keysStorage[code_1] = _this._keysStorage[code_1].filter(function (el) { return el; });
                    }
                });
            }
            else {
                var code = getHotKeyCode(key);
                delete this._keysStorage[code];
            }
        }
        else {
            this._keysStorage = {};
        }
    };
    return KeyManager;
}());
exports.KeyManager = KeyManager;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var dom_1 = __webpack_require__(0);
var ts_grid_1 = __webpack_require__(24);
var Resizer_1 = __webpack_require__(179);
var format_1 = __webpack_require__(13);
var main_1 = __webpack_require__(3);
var selection_1 = __webpack_require__(72);
var types_1 = __webpack_require__(6);
var Selection = /** @class */ (function () {
    function Selection(spreadsheet, grid, bufferManager, activePage) {
        this._spreadsheet = spreadsheet;
        this._grid = grid;
        this._bufferManager = bufferManager;
        this._events = spreadsheet.events;
        this._activePage = activePage;
        this._setHandlers();
    }
    Selection.prototype.setSelectedCell = function (cell) {
        if (!cell) {
            return;
        }
        if (!this._events.fire(types_1.SpreadsheetEvents.beforeSelectionSet, [cell])) {
            return;
        }
        this._removeHeadersCss();
        var cells = cell.split(",");
        this._activePage.setMeta({ selectedCells: cells });
        var nextFocused = cells[cells.length - 1];
        if (main_1.isRangeId(nextFocused)) {
            nextFocused = nextFocused.split(":")[0];
        }
        this.setFocusedCell(nextFocused);
        this._setHeadersCss();
        if (!this._mousePressed) {
            this._events.fire(types_1.SpreadsheetEvents.afterSelectionSet, [this.getSelectedCell()]);
        }
        else {
            this._grid.paint();
        }
    };
    Selection.prototype.getSelectedCell = function () {
        var selected = this._activePage.getMeta().selectedCells;
        if (selected && selected.length) {
            return selected.join(",");
        }
    };
    Selection.prototype.getFocusedCell = function () {
        var focusedCell = this._activePage.getMeta().focusedCell;
        if (focusedCell && focusedCell.cell) {
            return focusedCell.cell;
        }
    };
    Selection.prototype.setFocusedCell = function (cell) {
        if (!cell)
            return;
        cell = cell.toUpperCase();
        if (!this._events.fire(types_1.SpreadsheetEvents.beforeFocusSet, [cell])) {
            return;
        }
        var _a = main_1.getCellIds(cell), row = _a.row, col = _a.col;
        this._activePage.setMeta({
            focusedCell: {
                row: row,
                col: col,
                cell: cell,
                edit: false,
            },
        });
        this._events.fire(types_1.SpreadsheetEvents.afterFocusSet, [cell]);
    };
    Selection.prototype.removeSelectedCell = function (cell) {
        var selected = this.getSelectedCell();
        if (selected) {
            if (!cell) {
                this._activePage.setMeta({ selectedCells: null });
            }
            else {
                var selectedCells = selected.split(",");
                var splitedTarget = cell.split(",");
                var cellsToRemove_1 = [];
                splitedTarget.forEach(function (c) {
                    if (main_1.isRangeId(c)) {
                        var cells = main_1.getCellsArray(c);
                        cells.forEach(function (i) {
                            cellsToRemove_1.push(i);
                        });
                        return;
                    }
                    cellsToRemove_1.push(c);
                });
                var next_1 = [];
                selectedCells.forEach(function (c) {
                    if (main_1.isRangeId(c)) {
                        var cells_1 = main_1.getCellsArray(c);
                        cellsToRemove_1.forEach(function (i) {
                            var index = cells_1.indexOf(i);
                            if (index > -1) {
                                cells_1[index] = null;
                            }
                        });
                        var firstCell_1 = null;
                        cells_1.forEach(function (i, index) {
                            if (!firstCell_1) {
                                firstCell_1 = i;
                                return;
                            }
                            if (!i) {
                                next_1.push(firstCell_1 + ":" + cells_1[index - 1]);
                                firstCell_1 = null;
                            }
                            if (i && index === cells_1.length - 1) {
                                next_1.push(firstCell_1 + ":" + cells_1[index]);
                            }
                        });
                        return;
                    }
                    if (!cellsToRemove_1.includes(c)) {
                        next_1.push(c);
                    }
                });
                if (next_1.length) {
                    this.setSelectedCell(next_1.join(","));
                    return;
                }
                else {
                    this._activePage.setMeta({ selectedCells: null });
                }
            }
            this._grid.paint();
        }
    };
    Selection.prototype._isInRange = function (cell, range) {
        if (!range || !cell || !range.includes(":")) {
            return false;
        }
        var _a = main_1.getCellIndex(cell), row = _a.row, col = _a.col;
        var _b = main_1.getRangeIndexes(range), start = _b.start, end = _b.end;
        var between = function (x, min, max) {
            return (x - min) * (x - max) <= 0;
        };
        if (start && end) {
            return between(row, start.row, end.row) && between(col, start.col, end.col);
        }
        return false;
    };
    Selection.prototype._removeHeadersCss = function () {
        var _this = this;
        var selected = this.getSelectedCell();
        if (selected) {
            this._spreadsheet.eachCell(function (cellName) {
                var index = main_1.getCellIndex(cellName);
                var row = _this._grid.data.getId(index.row);
                if (row !== undefined) {
                    _this._grid.removeRowCss(row, "dhx_selected_row");
                }
                var col = _this._grid.config.columns[index.col];
                if (col !== undefined) {
                    col.header[0].css = col.header[0].css.replace(" dhx_selected_header", "");
                }
            });
            var focusedCell = this._activePage.getMeta().focusedCell;
            if (this._grid.data.exists(focusedCell.row)) {
                this._grid.removeRowCss(focusedCell.row, "dhx_selected_row");
            }
        }
    };
    Selection.prototype._setHeadersCss = function () {
        var _this = this;
        var selected = this.getSelectedCell();
        if (selected) {
            this._spreadsheet.eachCell(function (cellName) {
                var index = main_1.getCellIndex(cellName);
                var row = _this._grid.data.getId(index.row);
                if (row !== undefined) {
                    _this._grid.addRowCss(row, "dhx_selected_row");
                }
                var col = _this._grid.config.columns[index.col];
                if (col !== undefined && !col.header[0].css.includes("dhx_selected_header")) {
                    col.header[0].css += " dhx_selected_header";
                }
            });
        }
    };
    Selection.prototype._selectRow = function (row) {
        var firsCol = this._grid.config.columns[1];
        var lastCol = this._grid.config.columns[this._grid.config.columns.length - 1];
        this.setSelectedCell(main_1.getCellNameById(this._grid, row.id, firsCol.id) + ":" + main_1.getCellNameById(this._grid, row.id, lastCol.id));
    };
    Selection.prototype._selectColumn = function (col) {
        var firstRowId = this._grid.data.getId(0);
        var lastRowId = this._grid.data.getId(this._grid.data.getLength() - 1);
        var firstRow = this._grid.data.getItem(firstRowId);
        var lastRow = this._grid.data.getItem(lastRowId);
        this.setSelectedCell(main_1.getCellNameById(this._grid, firstRow.id, col.id) + ":" + main_1.getCellNameById(this._grid, lastRow.id, col.id));
    };
    Selection.prototype._setGroupSelectionHandlers = function () {
        var _this = this;
        this._grid.events.on(ts_grid_1.GridEvents.cellMouseOver, function (row, col) {
            if (main_1.getCellInfo(_this.getFocusedCell(), _this._activePage).edited) {
                return;
            }
            var meta = _this._activePage.getMeta();
            var focusedCell = meta.focusedCell;
            if (_this._mousePressed) {
                if (_this._pressedArea !== "index" && col.id === "$index") {
                    return;
                }
                if (_this._pressedArea === "header" && col.id !== "$index") {
                    var lastRowId = _this._grid.data.getId(_this._grid.data.getLength() - 1);
                    var lastRow = _this._grid.data.getItem(lastRowId);
                    _this.setSelectedCell(focusedCell.cell + ":" + main_1.getCellNameById(_this._grid, lastRow.id, col.id));
                    return;
                }
                var lastCol = _this._grid.config.columns[_this._grid.config.columns.length - 1];
                var lastCell = main_1.getCellNameById(_this._grid, row.id, _this._pressedArea === "index" ? lastCol.id : col.id);
                var focused = focusedCell.cell;
                var selected = __spreadArrays(meta.selectedCells);
                if (_this._pressedArea === "fillHandle") {
                    lastCell = selection_1.getLastCopyingCell(_this._cellsToCopy, lastCell);
                    var lastCellInRange = _this._isInRange(lastCell, _this._cellsToCopy);
                    if (lastCell === focused || lastCellInRange) {
                        lastCell = _this._cellsToCopy.split(":")[1];
                    }
                }
                var range = focused + ":" + lastCell;
                selected[selected.length - 1] = range;
                var prevFocusedCell = _this.getFocusedCell();
                _this.setSelectedCell(selected.join(","));
                _this.setFocusedCell(prevFocusedCell);
            }
        });
        this._grid.events.on(ts_grid_1.GridEvents.headerCellMouseOver, function (col) {
            if (_this._pressedArea === "cell") {
                return;
            }
            if (_this._mousePressed && _this._pressedArea === "header" && col.id !== "$index") {
                var lastRowId = _this._grid.data.getId(_this._grid.data.getLength() - 1);
                var lastRow = _this._grid.data.getItem(lastRowId);
                var focusedCell = _this._activePage.getMeta().focusedCell;
                _this.setSelectedCell(focusedCell.cell + ":" + main_1.getCellNameById(_this._grid, lastRow.id, col.id.toString()));
            }
        });
    };
    Selection.prototype._setHandlers = function () {
        var _this = this;
        var gridRect;
        var reCallTimer;
        dom_1.awaitRedraw().then(function () {
            gridRect = _this._grid.getRootView().node.el.getBoundingClientRect();
        });
        var moveHandler = function (e) {
            if (reCallTimer) {
                clearTimeout(reCallTimer);
            }
            var scrollState = _this._grid.getScrollState();
            if (e.clientX > gridRect.width + gridRect.left - 50) {
                _this._grid.scroll(scrollState.x + 50, scrollState.y);
            }
            if (e.clientX < gridRect.left + 50) {
                _this._grid.scroll(scrollState.x - 50, scrollState.y);
            }
            if (e.clientY > gridRect.height + gridRect.top - 50) {
                _this._grid.scroll(scrollState.x, scrollState.y + 50);
            }
            if (e.clientY < gridRect.top + 50) {
                _this._grid.scroll(scrollState.x, scrollState.y - 50);
            }
            reCallTimer = setTimeout(function () {
                moveHandler(e);
            }, 100);
        };
        document.addEventListener("mouseup", function () {
            if (_this._mousePressed) {
                _this._mousePressed = false;
                var selected = _this.getSelectedCell();
                if (_this._pressedArea === "fillHandle") {
                    if (selected !== _this._cellsToCopy) {
                        _this._events.fire(types_1.SpreadsheetEvents.groupFill, [_this._cellsToCopy, selected]);
                    }
                    _this._cellsToCopy = "";
                }
                _this._pressedArea = null;
                document.removeEventListener("mousemove", moveHandler);
                if (reCallTimer) {
                    clearTimeout(reCallTimer);
                }
                if (selected) {
                    _this._events.fire(types_1.SpreadsheetEvents.afterSelectionSet, [_this.getSelectedCell()]);
                }
                _this._grid.paint();
            }
        });
        this._grid.events.on(ts_grid_1.GridEvents.cellMouseDown, function (row, col, e) {
            var _a;
            _this._mousePressed = true;
            gridRect = _this._grid.getRootView().node.el.getBoundingClientRect();
            document.addEventListener("mousemove", moveHandler);
            var selected = _this._activePage.getMeta().selectedCells;
            if (col.id === "$index") {
                var resizedRow = e.target.getAttribute("dhx_id");
                if (e.shiftKey) {
                    var selected_1 = _this.getSelectedCell();
                    var range = [];
                    if (main_1.isRangeId(selected_1)) {
                        range = selected_1.split(":");
                    }
                    var firstCell = range[0] || selected_1;
                    var lastCellId = main_1.getCellIds(range[1] || selected_1);
                    var columns = _this._grid.config.columns;
                    var isFirstCol = lastCellId.col === columns[1].id;
                    var col_1 = main_1.getCellIds(range[1] || selected_1).col;
                    var lastCell = main_1.getCellNameById(_this._grid, row.id, isFirstCol ? columns[columns.length - 1].id : col_1 + 1);
                    _this.setSelectedCell(firstCell + ":" + lastCell);
                    return;
                }
                if (!resizedRow) {
                    _this._pressedArea = "index";
                    _this._selectRow(row);
                    _this._mousePressed = true;
                }
                else {
                    document.removeEventListener("mousemove", moveHandler);
                    _this._mousePressed = false;
                    var selected_2 = (_a = _this.getSelectedCell()) === null || _a === void 0 ? void 0 : _a.split(":");
                    var first = selected_2 && main_1.getCellIds(selected_2[0]);
                    var last = selected_2 && main_1.getCellIds(selected_2[1]);
                    if (selected_2 &&
                        first.col === 0 &&
                        last.col + 2 === _this._grid.config.columns.length &&
                        (+resizedRow === first.row || +resizedRow === last.row)) {
                        _this._resizedRows = selected_2;
                    }
                    else {
                        var cell_1 = main_1.getCellNameByIndex(+resizedRow, 1);
                        _this._resizedRows = [cell_1, cell_1];
                    }
                    Resizer_1.startResizeRow(_this._grid, _this._resizedRows, e, function () {
                        var col = _this._grid.getColumn(_this._resizedRows);
                        _this._grid.events.fire(ts_grid_1.GridEvents.afterResizeEnd, [col, e]);
                        _this._resizedRows = null;
                        _this._grid.paint();
                    });
                }
                return;
            }
            _this._pressedArea = "cell";
            var cell = main_1.getCellNameById(_this._grid, row.id, col.id);
            var cellInfo = main_1.getCellInfo(cell, _this._activePage);
            if (e.which === 3 && _this._isInRange(cell, selected[selected.length - 1])) {
                return;
            }
            if (cellInfo.edited) {
                return;
            }
            var focusedCell = _this.getFocusedCell();
            if (e.shiftKey && !e.ctrlKey && !e.metaKey) {
                _this.setSelectedCell(focusedCell + ":" + main_1.getCellNameById(_this._grid, row.id, col.id));
                return;
            }
            if (e.shiftKey && (e.ctrlKey || e.metaKey)) {
                if (selected.length && selected[selected.length - 1] === focusedCell) {
                    selected.pop();
                }
                var selectedCells = _this.getSelectedCell();
                _this.setSelectedCell("" + (selectedCells ? selectedCells + "," : "") + focusedCell + ":" + cell);
                return;
            }
            if ((e.ctrlKey || e.metaKey) && !e.shiftKey) {
                var selectedCells = _this.getSelectedCell();
                if (!selectedCells)
                    return;
                if (selectedCells && !main_1.getCellsArray(selectedCells).includes(cell)) {
                    return _this.setSelectedCell(selectedCells + "," + cell);
                }
                var splitedCells = selectedCells.split(",");
                for (var i = 0; i < splitedCells.length; i++) {
                    var item = splitedCells[i];
                    if (!main_1.isRangeId(item) && item === cell) {
                        _this.setSelectedCell(splitedCells.filter(function (i) { return i !== cell; }).join(","));
                    }
                }
                return;
            }
            _this.setSelectedCell(cell);
        });
        this._grid.events.on(ts_grid_1.GridEvents.headerCellMouseDown, function (col, e) {
            var _a;
            var resizedColumn = e.target.getAttribute("dhx_id");
            if (e.shiftKey) {
                var selected = _this.getSelectedCell();
                var range = [];
                if (main_1.isRangeId(selected)) {
                    range = selected.split(":");
                }
                var cell = main_1.getCellIds(range[0] || selected);
                var firstCell = main_1.getCellNameById(_this._grid, _this._grid.data.getId(0), cell.col + 1);
                var row = main_1.getCellIds(range[1] || selected).row;
                var lastCell = main_1.getCellNameById(_this._grid, row + 1, col.id);
                _this.setSelectedCell(firstCell + ":" + lastCell);
                return;
            }
            // not select when click on column resize grip [todo] make more stable check
            if (!resizedColumn) {
                _this._pressedArea = "header";
                _this._selectColumn(col);
                _this._mousePressed = true;
            }
            else {
                if (resizedColumn === "$index") {
                    // select all cells
                    var first_1 = main_1.getCellNameByIndex(0, 1);
                    var last_1 = main_1.getCellNameByIndex(_this._grid.data.getLength() - 1, _this._grid.config.columns.length - 1);
                    _this.setSelectedCell(first_1 + ":" + last_1);
                    return;
                }
                var selected = (_a = _this.getSelectedCell()) === null || _a === void 0 ? void 0 : _a.split(":");
                var first = selected && main_1.getCellIds(selected[0]);
                var last = selected && main_1.getCellIds(selected[1]);
                if (selected &&
                    first.row === 0 &&
                    last.row + 1 === _this._grid.data.getLength() &&
                    (+resizedColumn === first.col + 1 || +resizedColumn === last.col + 1)) {
                    _this._resizedColumns = selected;
                }
                else {
                    var cell = main_1.getCellNameByIndex(0, +resizedColumn);
                    _this._resizedColumns = [cell, cell];
                }
                Resizer_1.startResizeCol(_this._grid, _this._resizedColumns, e, function () {
                    var col = _this._grid.getColumn(_this._resizedColumns);
                    _this._grid.events.fire(ts_grid_1.GridEvents.afterResizeEnd, [col, e]);
                    _this._resizedColumns = null;
                    _this._grid.paint();
                });
            }
        });
        this._setGroupSelectionHandlers();
        this._grid.events.on(ts_grid_1.GridEvents.cellDblClick, function (row, col, e) {
            if (e.ctrlKey || e.metaKey) {
                _this._grid.events.fire(ts_grid_1.GridEvents.cellClick, [row, col, e]);
                return;
            }
            if (col.id !== "$index") {
                _this._spreadsheet.startEdit(main_1.getCellNameById(_this._grid, row.id, col.id));
            }
        });
        this._grid.events.on(ts_grid_1.GridEvents.headerCellDblClick, function (col, e) {
            var resizeGrip = e.target.getAttribute("dhx_id");
            if (resizeGrip) {
                var sizes = _this._activePage.getSize();
                var colIndex_1 = _this._grid.config.columns.indexOf(col);
                colIndex_1--;
                var range = _this._activePage.getRange(0, colIndex_1, sizes[0], colIndex_1);
                var newWidth_1 = 40;
                range.forEach(function (val, index) {
                    if (val) {
                        var meta = _this._activePage.getCell(index, colIndex_1);
                        var width = core_1.getStringWidth(format_1.getFormattedValue("" + val, meta.format));
                        if (width > newWidth_1) {
                            newWidth_1 = width;
                        }
                    }
                });
                var cols = _this._activePage.getMeta().cols;
                newWidth_1 += 20;
                col.$width = col.width = newWidth_1;
                cols[colIndex_1].width = newWidth_1;
                _this._grid.setColumns(__spreadArrays(_this._grid.config.columns));
            }
        });
        this._spreadsheet.events.on(types_1.SpreadsheetEvents.afterSheetChange, function () {
            _this._removeHeadersCss();
            _this._activePage = _this._spreadsheet._activePage;
            var meta = _this._activePage.getMeta();
            _this.setSelectedCell(meta.selectedCells ? meta.selectedCells.join(",") : null);
            _this.setFocusedCell(meta.focusedCell ? meta.focusedCell.cell : null);
        });
        this._events.on(types_1.SpreadsheetEvents.gridRedraw, function (vm) {
            var meta = _this._activePage.getMeta();
            var selected = meta.selectedCells;
            var focused = meta.focusedCell && meta.focusedCell.cell;
            if (!selected || !focused) {
                return;
            }
            var getCellCoords = function (index) {
                var BORDER = 1;
                var row = _this._grid.data.getItem(index.row + 1);
                return {
                    x: _this._grid.config.columns
                        .slice(0, index.col)
                        .reduce(function (total, c) { return (total += c.$width); }, 0) + BORDER,
                    y: !index.row ? 0 : _this._grid.data.mapRange(0, index.row - 1, function (i) { return i; }).reduce(function (total, r) { return (total += r.height || r.$height); }, 0),
                    width: _this._grid.config.columns[index.col]
                        ? _this._grid.config.columns[index.col].$width - BORDER
                        : 0,
                    height: row.height || row.$height - BORDER,
                };
            };
            var getGroupCoords = function (rangeIndex) {
                var start = getCellCoords(rangeIndex.start);
                var end = getCellCoords(rangeIndex.end);
                return {
                    x: start.x,
                    y: start.y,
                    width: end.x - start.x + end.width,
                    height: end.y - start.y + end.height,
                };
            };
            var split = _this._spreadsheet.config.leftSplit;
            var selectedCoords = getCellCoords(main_1.getCellIndex(selected[selected.length - 1]));
            var focusedId = main_1.getCellIds(focused);
            var isFixedCell = split >= focusedId.col + 1;
            var fixedCoords = 0;
            var scroll = _this._grid.getScrollState();
            if (isFixedCell) {
                for (var i = 0; i < +focusedId.col + 1; i++) {
                    fixedCoords += _this._grid.config.columns[i].$width;
                }
                fixedCoords += scroll.x;
            }
            var selectedCells = selected.map(function (cell) {
                if (main_1.isRangeId(cell)) {
                    var coords = getGroupCoords(main_1.getRangeIndexes(cell));
                    var lastSelectedCell_1 = cell.split(":")[1];
                    var firstSelcetedCell = cell.split(":")[0];
                    var firstCellId = main_1.getCellIds(firstSelcetedCell);
                    var lastCellId = main_1.getCellIds(lastSelectedCell_1);
                    var isLastCellFixed = split >= lastCellId.col + 1;
                    var isFirstCellFixed = split >= firstCellId.col + 1;
                    var lastCellCoords_1 = 0;
                    var fixedCoords_1 = 0;
                    if (isFirstCellFixed) {
                        for (var i = 0; i < +firstCellId.col + 1; i++) {
                            fixedCoords_1 += _this._grid.config.columns[i].$width;
                        }
                        fixedCoords_1 += scroll.x;
                    }
                    if (isLastCellFixed || isFirstCellFixed) {
                        var fixedWidth = 0;
                        if (isFirstCellFixed) {
                            for (var i = +firstCellId.col + 1; i <= +split; i++) {
                                fixedWidth += _this._grid.config.columns[i].$width;
                            }
                        }
                        var negativDir = firstCellId.col > lastCellId.col;
                        if (isLastCellFixed && negativDir) {
                            fixedWidth = 0;
                            for (var i = +lastCellId.col + 1; i <= +split; i++) {
                                fixedWidth += _this._grid.config.columns[i].$width;
                            }
                            for (var i = 0; i < +lastCellId.col + 1; i++) {
                                lastCellCoords_1 += _this._grid.config.columns[i].$width;
                            }
                            lastCellCoords_1 += scroll.x;
                        }
                        return dom_1.el(".dhx_group_selection", {
                            style: {
                                top: coords.y,
                                left: lastCellCoords_1 || fixedCoords_1,
                                width: coords.width - scroll.x,
                                minWidth: firstCellId.col === lastCellId.col ? coords.width : fixedWidth,
                                height: coords.height,
                                zIndex: 25,
                            },
                        });
                    }
                    return dom_1.el(".dhx_group_selection", {
                        style: {
                            top: coords.y,
                            left: coords.x,
                            width: coords.width,
                            height: coords.height,
                            zIndex: 10,
                        },
                    });
                }
                else {
                    if (selected.length === 1) {
                        return;
                    }
                    var cellId = main_1.getCellIds(cell);
                    var left = 0;
                    var isFixed = +split >= +cellId.col;
                    if (isFixed) {
                        for (var i = 0; i < cellId.col; i++) {
                            left += _this._grid.config.columns[i].$width;
                        }
                        left += scroll.x;
                    }
                    var _a = getCellCoords(main_1.getCellIndex(cell)), x = _a.x, y = _a.y, width = _a.width, height = _a.height;
                    return dom_1.el(".dhx_group_selection", {
                        style: {
                            width: width,
                            height: height,
                            top: y,
                            left: isFixed ? left : x,
                            position: "absolute",
                            pointerEvents: "none",
                            zIndex: isFixed ? 25 : 10,
                        },
                    });
                }
            });
            var focusedCell = dom_1.el(".dhx_selected_cell", {
                style: {
                    width: selectedCoords.width,
                    height: selectedCoords.height,
                    top: selectedCoords.y,
                    left: isFixedCell ? fixedCoords : selectedCoords.x,
                    position: "absolute",
                    pointerEvents: "none",
                    zIndex: isFixedCell ? 25 : 10,
                },
            });
            var copySelection = [];
            var buffer = _this._bufferManager.getStruct();
            if (buffer.cell && meta.inserted !== undefined && !meta.inserted) {
                var arrOfCells = buffer.cells.includes(",") ? buffer.cells.split(",") : [buffer.cells];
                copySelection = arrOfCells.map(function (range) {
                    var cellsArr = main_1.getCellsArray(range);
                    var start = main_1.getCellIndex(cellsArr[0]);
                    var end = main_1.getCellIndex(cellsArr[cellsArr.length - 1]);
                    var coords = getGroupCoords({ start: start, end: end });
                    var firstCellId = main_1.getCellIds(cellsArr[0]);
                    var lastCellId = main_1.getCellIds(cellsArr[cellsArr.length - 1]);
                    var isFirstFixed = firstCellId.col + 1 <= split;
                    var isLastFixed = lastCellId.col + 1 <= split;
                    var isFixedRange = isFirstFixed || isLastFixed;
                    var negativDir = firstCellId.col > lastCellId.col;
                    var leftCoords = 0;
                    var minWidth = 0;
                    if (isFirstFixed) {
                        for (var i = 0; i < firstCellId.col + 1; i++) {
                            leftCoords += _this._grid.config.columns[i].$width;
                        }
                        leftCoords += scroll.x;
                        if (!isLastFixed) {
                            for (var i = firstCellId.col + 1; i <= split; i++) {
                                minWidth += _this._grid.config.columns[i].$width;
                            }
                        }
                    }
                    if (isLastFixed) {
                        if (negativDir) {
                            leftCoords = 0;
                            for (var i = 0; i < lastCellId.col + 1; i++) {
                                leftCoords += _this._grid.config.columns[i].$width;
                            }
                            leftCoords += scroll.x;
                            for (var i = lastCellId.col + 1; i <= split; i++) {
                                minWidth += _this._grid.config.columns[i].$width;
                            }
                        }
                        else {
                            for (var i = firstCellId.col + 1; i <= lastCellId.col + 1; i++) {
                                minWidth += _this._grid.config.columns[i].$width;
                            }
                        }
                    }
                    if (firstCellId.col === lastCellId.col) {
                        minWidth = _this._grid.config.columns[firstCellId.col + 1].$width;
                    }
                    return dom_1.el(".dhx_copy_selection", {
                        style: {
                            top: coords.y,
                            left: isFixedRange ? leftCoords : coords.x,
                            width: isFixedRange ? coords.width - scroll.x : coords.width,
                            minWidth: isFixedRange ? minWidth : coords.width,
                            height: coords.height,
                            zIndex: isFixedRange ? 25 : 10,
                        },
                    });
                });
            }
            var resizedLine;
            if (_this._resizedColumns) {
                var resizedId_1 = main_1.getCellIds(_this._resizedColumns[1]);
                var colIndex = core_1.findIndex(_this._grid.config.columns, function (col) { return col.id == resizedId_1.col + 1; });
                var firstCell = getCellCoords({ row: 0, col: colIndex });
                var totalHeight = _this._grid.config.$totalHeight;
                var lineCenter = 1.5;
                resizedLine = dom_1.el(".resize_line", {
                    style: {
                        top: firstCell.y,
                        left: firstCell.x + firstCell.width - lineCenter,
                        height: totalHeight,
                    },
                });
            }
            if (_this._resizedRows) {
                var resizedId = main_1.getCellIds(_this._resizedRows[1]);
                var firstCell = getCellCoords({ row: resizedId.row, col: 0 });
                resizedLine = dom_1.el(".resize_line", {
                    style: {
                        top: firstCell.y + firstCell.height - 2,
                        left: 0,
                        width: _this._grid.config.$totalWidth,
                        height: "2px"
                    },
                });
            }
            var lastSelectedCell = selected[selected.length - 1];
            if (main_1.isRangeId(lastSelectedCell)) {
                var rangeArray = main_1.getRangeArray(lastSelectedCell);
                lastSelectedCell = rangeArray[rangeArray.length - 1];
            }
            var lastSelectedCol = main_1.getCellIds(lastSelectedCell).col + 1;
            var isLastSelectedCellFixed = _this._spreadsheet.config.leftSplit >= lastSelectedCol;
            var lastCellCoords = getCellCoords(main_1.getCellIndex(lastSelectedCell));
            var lastCellfixedCoords = 0;
            if (isLastSelectedCellFixed) {
                for (var i = 0; i < +lastSelectedCol; i++) {
                    lastCellfixedCoords += _this._grid.config.columns[i].$width;
                }
                var scroll_1 = _this._grid.getScrollState();
                lastCellfixedCoords += scroll_1.x;
            }
            var selectionGrip;
            if (!main_1.getCellInfo(_this.getFocusedCell(), _this._activePage).edited) {
                selectionGrip = dom_1.el(".dhx_selection_grip", {
                    dhx_id: "selection_grip",
                    style: {
                        position: "absolute",
                        left: (isLastSelectedCellFixed ? lastCellfixedCoords : lastCellCoords.x) +
                            lastCellCoords.width -
                            6,
                        top: lastCellCoords.y + lastCellCoords.height - 6,
                        zIndex: isLastSelectedCellFixed ? 25 : 10,
                    },
                    onmousedown: function () {
                        _this._mousePressed = true;
                        document.addEventListener("mousemove", moveHandler);
                        _this._pressedArea = "fillHandle";
                        var selected = _this.getSelectedCell().split(",");
                        _this.setSelectedCell(selected[selected.length - 1]);
                        _this._cellsToCopy = _this.getSelectedCell();
                    },
                });
            }
            vm.refs.selection.patch(dom_1.el(".dhx_grid_selection", __spreadArrays(copySelection, [
                focusedCell
            ], selectedCells, [
                resizedLine,
                selectionGrip,
            ])));
        });
    };
    return Selection;
}());
exports.Selection = Selection;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts_grid_1 = __webpack_require__(24);
var main_1 = __webpack_require__(3);
function startResizeCol(grid, columns, ev, cb) {
    var initX = ev.clientX;
    var first = main_1.getCellIds(columns[0]);
    var last = main_1.getCellIds(columns[1]);
    var cols = __spreadArrays(grid.config.columns);
    var node = grid.getRootNode();
    node.style.cursor = "col-resize";
    var selectedColumns = [];
    for (var i = first.col + 1; i <= last.col + 1; i++) {
        var col = cols[i];
        col.$initWidth = grid.config.columns[i].width;
        selectedColumns.push(col);
    }
    var moveHandler = function (e) {
        var move = e.clientX - initX;
        selectedColumns.forEach(function (col) {
            var size = col.$initWidth + move / selectedColumns.length;
            col.width = size <= 20 ? 20 : size;
        });
        grid.setColumns(cols);
        grid.paint();
    };
    var upHandler = function (e) {
        document.removeEventListener("mousemove", moveHandler);
        document.removeEventListener("mouseup", upHandler);
        node.style.cursor = "unset";
        cb();
        grid.events.fire(ts_grid_1.GridEvents.afterResizeEnd, [cols[0], e]);
    };
    document.addEventListener("mousemove", moveHandler);
    document.addEventListener("mouseup", upHandler);
    grid.paint();
}
exports.startResizeCol = startResizeCol;
function startResizeRow(grid, cels, ev, cb) {
    var initY = ev.clientY;
    var first = main_1.getCellIds(cels[0]);
    var last = main_1.getCellIds(cels[1]);
    var rows = __spreadArrays(grid.data.serialize());
    var node = grid.getRootNode();
    node.style.cursor = "row-resize";
    var selectedRows = [];
    for (var i = first.row; i <= last.row; i++) {
        var row = rows[i];
        if (!row.height) {
            row.height = grid.config.rowHeight;
        }
        selectedRows.push(row);
    }
    var moveHandler = function (e) {
        var move = e.clientY - initY;
        selectedRows.forEach(function (row) {
            var size = row.height + move / selectedRows.length;
            var height = size <= 10 ? 10 : size;
            grid.data.update(row.id, { height: height });
        });
        grid.paint();
    };
    var upHandler = function (e) {
        document.removeEventListener("mousemove", moveHandler);
        document.removeEventListener("mouseup", upHandler);
        node.style.cursor = "unset";
        cb();
        grid.events.fire(ts_grid_1.GridEvents.afterRowResize);
    };
    document.addEventListener("mousemove", moveHandler);
    document.addEventListener("mouseup", upHandler);
    grid.paint();
}
exports.startResizeRow = startResizeRow;


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var dom_1 = __webpack_require__(0);
var ts_calendar_1 = __webpack_require__(40);
var ts_popup_1 = __webpack_require__(18);
var date_1 = __webpack_require__(27);
var format_1 = __webpack_require__(13);
var types_1 = __webpack_require__(6);
var date_2 = __webpack_require__(12);
var DateEditor = /** @class */ (function () {
    function DateEditor(cb, dateFormat, events) {
        var _this = this;
        this._dateFormat = dateFormat;
        this._calendar = new ts_calendar_1.Calendar(null, { dateFormat: dateFormat });
        this._popup = new ts_popup_1.Popup({ css: "dhx_editor_popup" });
        this._popup.attach(this._calendar);
        this._events = events;
        this._endEdit = cb;
        this._popup.events.on(ts_popup_1.PopupEvents.afterShow, function () {
            var calendarNode = _this._calendar.getRootNode();
            var body = calendarNode.querySelector(".dhx_calendar__days");
            body.addEventListener("click", _this.endEdit.bind(_this), { once: true });
        });
        this._initHandlers();
    }
    DateEditor.prototype.endEdit = function () {
        var _this = this;
        if (!this.edit)
            return;
        dom_1.awaitRedraw().then(function () {
            _this._events.fire(types_1.SpreadsheetEvents.cellInput, [
                _this._config.oninput[1],
                _this._calendar.getValue(),
            ]);
            _this._endEdit();
            _this._popup.hide();
        });
        this.edit = false;
    };
    DateEditor.prototype.setValue = function (value) {
        var val;
        if (format_1.isNumeric(value)) {
            val = date_1.excelDateToJSDate(value);
        }
        else {
            if (!date_2.stringToDate(value, this._dateFormat, true))
                return;
            val = date_2.stringToDate(value, this._dateFormat);
        }
        this._calendar.setValue(val);
    };
    DateEditor.prototype.toHTML = function (conf) {
        var _this = this;
        this._config = conf;
        this.setValue(conf.value);
        this.edit = true;
        document.addEventListener("mousedown", this._handlers.onOuterClick);
        return dom_1.el("input.dhx_cell_input", __assign(__assign({}, conf), { onkeydown: function (e) {
                if (e.code === "Enter") {
                    _this._popup.hide();
                }
            }, oninput: this._handlers.oninput, _hooks: __assign(__assign({}, conf._hooks), { didInsert: this._handlers.didInsert }) }));
    };
    DateEditor.prototype._showPopup = function () {
        if (!this._input.value.startsWith("=")) {
            this._popup.show(this._input, {
                centering: true,
                mode: "bottom",
            });
        }
    };
    DateEditor.prototype._initHandlers = function () {
        var _this = this;
        this._handlers = {
            onFocus: function () {
                dom_1.awaitRedraw().then(function () {
                    _this._showPopup();
                });
            },
            onOuterClick: function (e) {
                if (e.target instanceof Node) {
                    var isInput = _this._input && _this._input.contains(e.target);
                    var isPopup = _this._popup &&
                        _this._popup.getRootNode() &&
                        _this._popup.getRootNode().contains(e.target);
                    if (!(isInput || isPopup)) {
                        _this._popup.hide();
                    }
                }
            },
            oninput: function (e) {
                if (!e.target.value) {
                    _this._showPopup();
                }
                if (e.target.value.startsWith("=") && _this._popup.isVisible()) {
                    _this._popup.hide();
                }
                var _a = _this._config.oninput, cb = _a[0], cell = _a[1];
                cb(cell, e);
            },
            didInsert: function (node) {
                var input = node.el;
                _this._input = input;
                _this._input.addEventListener("focus", _this._handlers.onFocus);
                _this._config._hooks.didInsert(node);
            },
        };
    };
    return DateEditor;
}());
exports.DateEditor = DateEditor;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = __webpack_require__(1);
var format_1 = __webpack_require__(13);
var main_1 = __webpack_require__(3);
var Exporter = /** @class */ (function () {
    function Exporter(spreadsheet, grid) {
        this._spreadsheet = spreadsheet;
        this._grid = grid;
    }
    Exporter.prototype.xlsx = function () {
        var _this = this;
        if (!main_1.isWasmSupported()) {
            throw new Error("WebAssembly is not supported by your browser");
        }
        var styles = [{ id: "" }];
        var serializedData = this._spreadsheet.serialize();
        var formats = format_1.getDefaultFormats();
        var data = [];
        var cols = this._grid.config.columns.map(function (col) { return ({ width: col.width }); }).splice(1);
        serializedData.sheets.forEach(function (sheet) {
            var pageSizes = _this._spreadsheet._dataStore.getPage(sheet.name).getSize();
            var rowItem = [];
            var cells = [];
            for (var i = 0; i < pageSizes[1]; i++) {
                rowItem.push(null);
            }
            for (var i = 0; i < pageSizes[0]; i++) {
                cells.push(__spreadArrays(rowItem));
            }
            sheet.data.forEach(function (item) {
                var styleInd = null;
                var _a = main_1.getCellIds(item.cell), row = _a.row, col = _a.col;
                var defaultFormat = formats.find(function (format) { return format.id === item.format; });
                var format = defaultFormat ? defaultFormat.mask : "";
                var css = item.css || "";
                var styleId = format + css;
                styleInd = core_1.findIndex(styles, function (s) { return s.id === styleId; });
                if (styleInd === -1) {
                    var propsMap_1 = {
                        "text-align": "align",
                        "font-size": "fontSize",
                        "font-weight": "fontWeight",
                        "font-style": "fontStyle",
                        "text-decoration": "textDecoration",
                        "vertical-align": "verticalAlign"
                    };
                    var cssStyles_1 = dhx.css.get(css) || {};
                    var exportStyles = Object.keys(cssStyles_1).reduce(function (newStyles, key) {
                        newStyles[propsMap_1[key] || key] = cssStyles_1[key];
                        return newStyles;
                    }, {});
                    styles.push(__assign(__assign({ format: format }, exportStyles), { id: styleId }));
                    styleInd = styles.length - 1;
                }
                var cellValue = {
                    v: item.value ? "" + item.value : "",
                    s: styleInd,
                };
                cells[row][col] = cellValue;
            });
            data.push({
                name: sheet.name,
                cells: cells,
                cols: sheet.cols,
                rows: sheet.rows
            });
        });
        var exportData = { data: data, styles: styles };
        var path = this._spreadsheet.config.exportModulePath;
        var xlsxWorker = this._getXlsxWorker(path);
        xlsxWorker.postMessage({
            type: "convert",
            data: exportData,
        });
    };
    Exporter.prototype._getXlsxWorker = function (path) {
        if (!this._xlsxWorker) {
            var url = window.URL.createObjectURL(new Blob(["importScripts('" + path + "');"], { type: "text/javascript" }));
            this._xlsxWorker = new Worker(url);
            this._xlsxWorker.addEventListener("message", function (e) {
                if (e.data.type === "ready") {
                    var a = document.createElement("a");
                    a.href = URL.createObjectURL(e.data.blob);
                    a.download = "data.xlsx";
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                }
            });
        }
        return this._xlsxWorker;
    };
    return Exporter;
}());
exports.Exporter = Exporter;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var XlsxDriver = /** @class */ (function () {
    function XlsxDriver() {
    }
    XlsxDriver.prototype.toJsonArray = function (data) {
        var sheets = [];
        var formats = [];
        var styles = {};
        data.styles.forEach(function (style, i) {
            var allowedProps = [
                "background",
                "color",
                "textAlign",
                "verticalAlign",
                "textDecoration",
                "fontWeight",
                "fontStyle",
            ];
            var css = allowedProps.reduce(function (acc, prop) {
                if (style[prop]) {
                    acc[prop] = style[prop];
                }
                return acc;
            }, {});
            formats.push(style.format);
            styles["imported_class" + i] = css;
        });
        data.data.forEach(function (item) {
            var cells = [];
            item.cells.forEach(function (row, rowInd) {
                row.forEach(function (col, colInd) {
                    if (col) {
                        var cell = {
                            cell: main_1.getCellNameByIndex(rowInd, colInd + 1),
                            value: col.v,
                            css: ["imported_class" + col.s],
                            format: formats[col.s],
                        };
                        cells.push(cell);
                    }
                });
            });
            sheets.push({ name: item.name, data: cells, cols: item.cols, rows: item.rows });
        });
        return {
            sheets: sheets,
            styles: styles,
        };
    };
    return XlsxDriver;
}());
exports.XlsxDriver = XlsxDriver;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
var main_1 = __webpack_require__(3);
var XlsxProxy = /** @class */ (function () {
    function XlsxProxy(spreadsheet) {
        this._spreadsheet = spreadsheet;
    }
    XlsxProxy.prototype.load = function (url) {
        var _this = this;
        return new Promise(function (res) {
            _this._getFile(url).then(function (file) {
                var path = _this._spreadsheet.config.importModulePath;
                var xlsxWorker = _this._getXlsxWorker(path);
                xlsxWorker.postMessage({
                    type: "convert",
                    data: file,
                    formulas: true,
                });
                xlsxWorker.onmessage = function (e) {
                    if (e.data.type === "ready") {
                        res(e.data);
                    }
                };
            });
        });
    };
    XlsxProxy.prototype._getXlsxWorker = function (path) {
        if (!this._xlsxWorker) {
            var url = window.URL.createObjectURL(new Blob(["importScripts('" + path + "');"], { type: "text/javascript" }));
            this._xlsxWorker = new Worker(url);
        }
        return this._xlsxWorker;
    };
    XlsxProxy.prototype._getFile = function (url) {
        // eslint-disable-next-line @typescript-eslint/no-misused-promises
        return new Promise(function (res) {
            if (url) {
                return main_1.fetchFile(url, "GET", "arraybuffer").then(function (data) {
                    res(data);
                });
            }
            else {
                var input = document.createElement("input");
                input.type = "file";
                input.accept = ".xlsx";
                input.click();
                input.addEventListener("change", function (e) {
                    var reader = new FileReader();
                    reader.onload = function () {
                        var arrayBuffer = reader.result;
                        var array = new Uint8Array(arrayBuffer);
                        res(array);
                    };
                    reader.readAsArrayBuffer(e.target.files[0]);
                });
            }
        });
    };
    return XlsxProxy;
}());
exports.XlsxProxy = XlsxProxy;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var muon_1 = __webpack_require__(26);
exports.Store = muon_1.Store;
function initMathStore(sheets) {
    var store = new muon_1.DataStore();
    sheets.forEach(function (i) { return store.addPage(i.value); });
    return store;
}
exports.initMathStore = initMathStore;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(73));
__export(__webpack_require__(188));


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Promise) {
Object.defineProperty(exports, "__esModule", { value: true });
function detectDrag(e) {
    return new Promise(function (res) {
        var handleMouseUp = function () {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            document.removeEventListener("mousemove", handleMouseMove);
            document.removeEventListener("mouseup", handleMouseUp);
            res(false);
        };
        var timeout = setTimeout(function () {
            handleMouseUp();
        }, 1000);
        var handleMouseMove = function (moveEvent) {
            if (Math.abs(moveEvent.pageX - e.pageX) > 4 || Math.abs(moveEvent.pageY - e.pageY) > 4) {
                document.removeEventListener("mousemove", handleMouseMove);
                document.removeEventListener("mouseup", handleMouseUp);
                clearTimeout(timeout);
                res({ x: e.pageX, y: e.pageY });
            }
        };
        document.addEventListener("mousemove", handleMouseMove);
        document.addEventListener("mouseup", handleMouseUp);
    });
}
exports.detectDrag = detectDrag;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(9)))

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.default = {
    popups: {},
    lastActive: null,
    freeCount: 0,
    add: function (id, popup) {
        if (this.lastActive) {
            this.popups[this.lastActive].classList.remove("dhx_popup--window_active");
        }
        this.lastActive = id;
        popup.classList.add("dhx_popup--window_active");
        this.popups[id] = popup;
    },
    setActive: function (id) {
        if (id === this.lastActive) {
            return;
        }
        var popup = this.popups[id];
        if (popup) {
            if (this.lastActive) {
                this.popups[this.lastActive].classList.remove("dhx_popup--window_active");
            }
            this.lastActive = id;
            popup.classList.add("dhx_popup--window_active");
        }
    },
    openFreeWindow: function (node) {
        if (this.freeCount === 0) {
            node.classList.add("dhx_window--no-scroll");
        }
        this.freeCount++;
    },
    closeFreeWindow: function (node) {
        this.freeCount--;
        if (this.freeCount === 0) {
            node.classList.remove("dhx_window--no-scroll");
        }
    },
};


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Window_1 = __webpack_require__(73);
var ts_toolbar_1 = __webpack_require__(44);
var ts_layout_1 = __webpack_require__(21);
var ts_navbar_1 = __webpack_require__(22);
var types_1 = __webpack_require__(45);
var ProWindow = /** @class */ (function (_super) {
    __extends(ProWindow, _super);
    function ProWindow(config) {
        return _super.call(this, config) || this;
    }
    ProWindow.prototype._startResize = function (resizeConfig) {
        var _this = this;
        var minWidth = this.config.minWidth | 100;
        var minHeight = this.config.minHeight | 100;
        var left = this._popup.offsetLeft;
        var top = this._popup.offsetTop;
        var width = this._popup.offsetWidth;
        var height = this._popup.offsetHeight;
        var root = this.getRootView().refs;
        var resizer;
        var resizeClassName;
        switch (true) {
            case resizeConfig.bottom && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--bottom_left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.bottom && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--bottom_right";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.top && resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--top_left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.top && resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--top-right";
                resizer = root.right;
                break;
            case resizeConfig.top:
                resizeClassName = "dhx_window-body-pointer--top";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.bottom:
                resizeClassName = "dhx_window-body-pointer--bottom";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.left:
                resizeClassName = "dhx_window-body-pointer--left";
                resizer = root.bottomLeft;
                break;
            case resizeConfig.right:
                resizeClassName = "dhx_window-body-pointer--right";
                resizer = root.right;
                break;
        }
        resizer.el.classList.add("dhx_window-resizer--active");
        this.config.node.classList.add("dhx_window--stop_selection");
        this.config.node.classList.add(resizeClassName);
        var mousemove = function (e) {
            var _a = _this._getContainerParams(), containerInnerWidth = _a.containerInnerWidth, containerInnerHeight = _a.containerInnerHeight, containerXOffset = _a.containerXOffset, containerYOffset = _a.containerYOffset;
            var size = {
                width: _this._notInNode() ? e.pageX - left : e.pageX - _this.config.node.offsetLeft - left,
                height: _this._notInNode() ? e.pageY - top : e.pageY - _this.config.node.offsetTop - top,
                left: _this._notInNode() ? e.pageX : e.pageX - _this.config.node.offsetLeft,
                top: _this._notInNode() ? e.pageY : e.pageY - _this.config.node.offsetTop,
            };
            if (resizeConfig.right) {
                if (size.width < minWidth) {
                    size.width = minWidth;
                }
                else if (size.width > containerXOffset + containerInnerWidth - left) {
                    size.width = containerXOffset + containerInnerWidth - left;
                }
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.bottom) {
                if (size.height < minHeight) {
                    size.height = minHeight;
                }
                else if (size.height > containerYOffset + containerInnerHeight - top) {
                    size.height = containerYOffset + containerInnerHeight - top;
                }
                _this._popup.style.height = size.height + "px";
            }
            if (resizeConfig.left) {
                if (left + width - size.left < minWidth) {
                    size.left = left + width - minWidth;
                }
                size.width = left + width - size.left;
                _this.config.left = size.left;
                _this._popup.style.left = size.left + "px";
                _this._popup.style.width = size.width + "px";
            }
            if (resizeConfig.top) {
                if (size.top < containerYOffset) {
                    size.top = containerYOffset;
                }
                else if (top + height - size.top < minHeight) {
                    size.top = top + height - minHeight;
                }
                size.height = top + height - size.top;
                _this.config.top = size.top;
                _this._popup.style.top = size.top + "px";
                _this._popup.style.height = size.height + "px";
            }
            _this.config.width = _this._popup.offsetWidth;
            _this.config.height = _this._popup.offsetHeight;
            _this.events.fire(types_1.WindowEvents.resize, [size, { left: left, top: top, height: height, width: width }, resizeConfig]);
            _this.scrollView && _this.scrollView.update();
        };
        var mouseup = function () {
            document.removeEventListener("mouseup", mouseup);
            document.removeEventListener("mousemove", mousemove);
            _this.config.node.classList.remove("dhx_window--stop_selection");
            _this.config.node.classList.remove(resizeClassName);
            resizer.el.classList.remove("dhx_window-resizer--active");
        };
        document.addEventListener("mouseup", mouseup);
        document.addEventListener("mousemove", mousemove);
    };
    ProWindow.prototype._initUI = function () {
        var _this = this;
        var rows = [];
        var isHeader = (this.config.header || this.config.title || this.config.closable || this.config.movable) &&
            this.config.header !== false;
        if (isHeader) {
            rows.push({
                id: "header",
                height: "content",
                css: "dhx_window-header " + (this.config.movable ? "dhx_window-header--movable" : ""),
                on: {
                    mousedown: this.config.movable && this._handlers.move,
                    dblclick: this._handlers.headerDblClick,
                },
            });
        }
        rows.push({
            id: "content",
            css: isHeader ? "dhx_window-content" : "dhx_window-content-without-header",
        });
        if (this.config.footer) {
            rows.push({ id: "footer", height: "content", css: "dhx_window-footer" });
        }
        if (this.config.resizable) {
            rows.push({ id: "resizers", height: "content", css: "resizers" });
        }
        var layout = (this._layout = new ts_layout_1.ProLayout(this._popup, {
            css: "dhx_window" + (this.config.modal ? " dhx_window--modal" : ""),
            rows: rows,
            on: {
                click: this._handlers.setActive,
            },
            id: this._uid,
        }));
        var contentCell = this._layout.getCell("content");
        if (contentCell && contentCell.scrollView) {
            this.scrollView = contentCell.scrollView;
        }
        if (isHeader) {
            var header = (this.header = new ts_toolbar_1.Toolbar());
            if (this.config.title) {
                this.header.data.add({
                    type: "title",
                    value: this.config.title,
                    id: "title",
                    css: "title_max",
                });
                this._popup.setAttribute("aria-label", this.config.title);
            }
            if (this.config.closable) {
                this.header.data.add({
                    type: "spacer",
                });
                this.header.data.add({
                    id: "close",
                    type: "button",
                    view: "link",
                    size: "medium",
                    color: "secondary",
                    circle: true,
                    icon: "dxi dxi-close",
                });
                header.events.on(ts_navbar_1.NavigationBarEvents.click, function (id, e) {
                    if (id === "close") {
                        _this._hide(e);
                    }
                });
            }
            layout.getCell("header").attach(header);
        }
        if (this.config.footer) {
            var footer = (this.footer = new ts_toolbar_1.Toolbar());
            layout.getCell("footer").attach(footer);
        }
        if (this.config.resizable) {
            layout.getCell("resizers").attach(function () { return _this._drawResizers(); });
        }
    };
    return ProWindow;
}(Window_1.Window));
exports.ProWindow = ProWindow;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = __webpack_require__(6);
var main_1 = __webpack_require__(3);
var toolbar_1 = __webpack_require__(33);
var FocusManager_1 = __webpack_require__(10);
function isPrintableKey(e) {
    if (e.ctrlKey || e.altKey || e.metaKey) {
        return;
    }
    var keyCode = e.which || e.keyCode;
    var symbols = {
        32: " ",
        106: "*",
        107: "+",
        109: "-",
        110: ".",
        111: "/",
        186: ";",
        187: "=",
        188: ",",
        189: "-",
        190: ".",
        191: "/",
        192: "`",
        219: "[",
        220: "\\",
        221: "]",
        222: "'",
    };
    var isLetter = keyCode >= 65 && keyCode <= 90;
    var isNumber = keyCode >= 48 && keyCode <= 57;
    var isNumpadNumber = keyCode >= 96 && keyCode <= 105;
    var isSymbol = !!symbols[keyCode];
    return isLetter || isNumber || isNumpadNumber || isSymbol || false;
}
exports.isPrintableKey = isPrintableKey;
function getHtmlData(spreadsheet) {
    var selected = spreadsheet.selection.getSelectedCell();
    var matrix;
    if (!main_1.isRangeId(selected)) {
        matrix = [[selected]];
    }
    else {
        matrix = main_1.getRangeMatrix(selected);
    }
    var values = matrix.reduce(function (total, row) {
        var rowValues = row.reduce(function (t, cell) {
            var val = spreadsheet.getValue(cell) || " ";
            var stylesObj = spreadsheet.getStyle(cell) || {};
            var styles = Object.keys(stylesObj).reduce(function (totalStyles, key) { return "" + totalStyles + key + ":" + stylesObj[key] + ";"; }, "");
            return t + " <th style=\"" + styles + "\">\n\t\t\t" + val + "</th>";
        }, "");
        return total + "<tr style=\"box-sizing: inherit;\">" + rowValues + "</tr>";
    }, "");
    return "\n\t<!--StartFragment-->\n\t\t<table id=\"customers\">\n\t\t\t<tbody style=\"box-sizing: inherit;\">\n\t\t\t\t" + values + "\n\t\t\t</tbody>\n\t\t</table>\n\t<!--EndFragment-->";
}
exports.getHtmlData = getHtmlData;
function getLength(grid, dir) {
    if (dir === "row") {
        return {
            min: 0,
            max: grid.data.getLength() - 1,
        };
    }
    return {
        min: 1,
        max: grid.config.columns.length - 1,
    };
}
function setCell(spreadsheet, grid, set, page, add, dir) {
    var info = main_1.getCellInfo(spreadsheet.selection.getFocusedCell(), page);
    if (info.edited) {
        return;
    }
    var index = main_1.getCellIndex(spreadsheet.selection.getFocusedCell());
    var length = getLength(grid, dir);
    var nextVal = add ? index[dir] + add : set;
    if (nextVal >= length.min && nextVal <= length.max) {
        index[dir] = nextVal;
    }
    var cell = main_1.getCellNameByIndex(index.row, index.col);
    spreadsheet.selection.setSelectedCell(cell);
    var id = main_1.getCellIds(cell);
    grid.scrollTo("" + (id.row + 1), "" + (id.col + 1));
}
function setSelection(spreadsheet, grid, step, dir, page) {
    var focused = spreadsheet.selection.getFocusedCell();
    var info = main_1.getCellInfo(focused, page);
    if (info.edited) {
        return;
    }
    var selectedIndex = main_1.getCellIndex(focused);
    var lastSelected = spreadsheet.selection.getSelectedCell().split(",")[0];
    var index;
    var end;
    if (!lastSelected.includes(":")) {
        index = __assign({}, selectedIndex);
        end = selectedIndex;
    }
    else {
        var range = main_1.getRangeIndexes(lastSelected);
        if (range.end[dir] > selectedIndex[dir]) {
            index = __assign({}, range.end);
            end = range.start;
        }
        else {
            index = __assign({}, range.start);
            end = range.end;
        }
    }
    var length = getLength(grid, dir);
    if (index[dir] + step >= length.min && index[dir] + step <= length.max) {
        index[dir] += step;
        var start = main_1.getCellNameByIndex(index.row, index.col);
        end = main_1.getCellNameByIndex(end.row, end.col);
        if (start === end) {
            spreadsheet.selection.setSelectedCell(start);
            return;
        }
        spreadsheet.selection.setSelectedCell(start + ":" + end);
        spreadsheet.selection.setFocusedCell(focused);
    }
}
function getKeysHandlers(spreadsheet, grid, bufferManager, editLine) {
    var editedCell;
    var page;
    spreadsheet.events.on(types_1.SpreadsheetEvents.afterEditStart, function (cell) {
        editedCell = cell;
    });
    spreadsheet.events.on(types_1.SpreadsheetEvents.afterEditEnd, function () {
        editedCell = null;
    });
    spreadsheet.events.on(types_1.SpreadsheetEvents.afterSheetChange, function () { return (page = spreadsheet._activePage); });
    document.addEventListener("keydown", function (e) {
        if (isPrintableKey(e) &&
            (FocusManager_1.focusManager.getFocusId() === spreadsheet._uid ||
                FocusManager_1.focusManager.getFocusId() === grid._uid)) {
            var focused = spreadsheet.selection.getFocusedCell();
            if (focused && focused !== editedCell) {
                e.preventDefault();
                spreadsheet.startEdit(focused, e.key);
            }
        }
    });
    var pasteFromClipboard = function (data, html) {
        var buffer = bufferManager.getStruct();
        var focus = spreadsheet.selection.getSelectedCell();
        var to = main_1.getCellIndex(focus);
        var lastCell = main_1.getCellNameByIndex(to.row + data.rowsCount - 1, to.col + data.colsCount - 1);
        var cell = main_1.isRangeId(focus) ? focus : focus + ":" + lastCell;
        if (data.styles) {
            buffer.styles = data.styles;
        }
        else {
            buffer.styles = spreadsheet.getStyle(cell);
        }
        if (html && !html.includes(buffer.html)) {
            buffer.cells = "";
        }
        var prevVal = buffer.value;
        buffer.value = data.values;
        buffer.cell = cell;
        bufferManager.paste();
        buffer.value = prevVal;
    };
    var clipboardData = {};
    if (window.clipboardData) {
        clipboardData = {
            "ctrl+c": function () {
                if (!editedCell) {
                    bufferManager.store("copy");
                    if (window.clipboardData) {
                        window.clipboardData.setData("text/html", getHtmlData(spreadsheet));
                        window.clipboardData.setData("text/plain", bufferManager.getStruct().value);
                        window.preventDefault();
                        bufferManager.getStruct().html = window.clipboardData.getData("text/html");
                    }
                }
            },
            "ctrl+x": function () {
                if (!editedCell) {
                    bufferManager.store("cut");
                    if (window.clipboardData) {
                        window.clipboardData.setData("text/html", getHtmlData(spreadsheet));
                        window.clipboardData.setData("text/plain", bufferManager.getStruct().value);
                        window.preventDefault();
                        bufferManager.getStruct().html = window.clipboardData.getData("text/html");
                    }
                }
            },
            "ctrl+v": function () {
                if (!editedCell) {
                    if (window.clipboardData) {
                        var data = main_1.parseFromText(window.clipboardData.getData("text"));
                        var html = window.clipboardData.getData("text/html");
                        if (html && html.includes("<table")) {
                            data = main_1.parseHtmlTable(html);
                        }
                        pasteFromClipboard(data, html || "");
                    }
                }
            },
        };
    }
    else {
        document.addEventListener("cut", function (e) {
            if (!editedCell &&
                (FocusManager_1.focusManager.getFocusId() === spreadsheet._uid ||
                    FocusManager_1.focusManager.getFocusId() === grid._uid)) {
                bufferManager.store("cut");
                e.clipboardData.setData("text/html", getHtmlData(spreadsheet));
                e.clipboardData.setData("text/plain", bufferManager.getStruct().value);
                e.preventDefault();
                bufferManager.getStruct().html = e.clipboardData.getData("text/html");
            }
        });
        document.addEventListener("copy", function (e) {
            if (!editedCell &&
                (FocusManager_1.focusManager.getFocusId() === spreadsheet._uid ||
                    FocusManager_1.focusManager.getFocusId() === grid._uid)) {
                bufferManager.store("copy");
                e.clipboardData.setData("text/html", getHtmlData(spreadsheet));
                e.clipboardData.setData("text/plain", bufferManager.getStruct().value);
                e.preventDefault();
                bufferManager.getStruct().html = e.clipboardData.getData("text/html");
            }
        });
        document.addEventListener("paste", function (e) {
            if (!editedCell &&
                (FocusManager_1.focusManager.getFocusId() === spreadsheet._uid ||
                    FocusManager_1.focusManager.getFocusId() === grid._uid)) {
                e.preventDefault();
                var html = e.clipboardData.getData("text/html");
                var data = main_1.parseFromText(e.clipboardData.getData("text"));
                if (html && html.includes("<table")) {
                    data = main_1.parseHtmlTable(html);
                }
                pasteFromClipboard(data, html || "");
            }
        });
    }
    return __assign(__assign({}, clipboardData), { escape: function () {
            var selected = spreadsheet.selection.getSelectedCell();
            var info = main_1.getCellInfo(selected, page);
            var buffer = bufferManager.getStruct();
            buffer.inserted = true;
            if (info.edited) {
                spreadsheet.endEdit(true);
                grid.paint();
            }
        }, delete: function () {
            if (editedCell) {
                return;
            }
            var selected = spreadsheet.selection.getSelectedCell();
            if (selected) {
                spreadsheet.setValue(selected, "");
            }
            grid.paint();
        }, enter: function () {
            var selected = spreadsheet.selection.getSelectedCell();
            var focused = spreadsheet.selection.getFocusedCell();
            var editMode = spreadsheet._editMode;
            var insertedFormula = editLine.navigate("enter");
            if (insertedFormula) {
                return;
            }
            if (editedCell || (editMode && editMode.cell)) {
                var index = main_1.getCellIndex(editedCell || editMode.cell);
                index.row = index.row + 1 === grid.data.getLength() ? index.row : index.row + 1;
                spreadsheet.selection.setSelectedCell(main_1.getCellNameByIndex(index.row, index.col));
                editedCell = "";
                if (main_1.isRangeId(selected) && !editMode) {
                    spreadsheet.selection.setSelectedCell(selected);
                    spreadsheet.selection.setFocusedCell(main_1.getNextRangeCell(selected, focused, "col"));
                }
            }
            else {
                if (main_1.isRangeId(selected)) {
                    spreadsheet.endEdit();
                    spreadsheet.selection.setSelectedCell(selected);
                    spreadsheet.selection.setFocusedCell(main_1.getNextRangeCell(selected, focused, "col"));
                    return;
                }
                spreadsheet.startEdit(selected);
            }
        }, f2: function () {
            spreadsheet.startEdit(spreadsheet.selection.getSelectedCell());
        }, pageUp: function (e) {
            e.preventDefault();
            var body = grid.getRootView().refs.grid_body;
            body.el.scrollTop -= body.el.clientHeight;
        }, pageDown: function (e) {
            e.preventDefault();
            var body = grid.getRootView().refs.grid_body;
            body.el.scrollTop += body.el.clientHeight - grid.config.rowHeight;
        }, "ctrl+a": function (e) {
            if (!editedCell) {
                e.preventDefault();
                var first = main_1.getCellNameByIndex(0, 1);
                var last = main_1.getCellNameByIndex(grid.data.getLength() - 1, grid.config.columns.length - 1);
                spreadsheet.selection.setSelectedCell(first + ":" + last);
            }
        }, "shift+arrowLeft": function () {
            setSelection(spreadsheet, grid, -1, "col", page);
        }, "shift+arrowRight": function () {
            setSelection(spreadsheet, grid, 1, "col", page);
        }, "shift+arrowDown": function () {
            setSelection(spreadsheet, grid, 1, "row", page);
        }, "shift+arrowUp": function () {
            setSelection(spreadsheet, grid, -1, "row", page);
        }, "ctrl+enter": function () {
            spreadsheet.endEdit();
        }, "shift+enter": function () {
            var selected = spreadsheet.selection.getSelectedCell();
            if (main_1.isRangeId(selected)) {
                var focused = spreadsheet.selection.getFocusedCell();
                spreadsheet.endEdit();
                spreadsheet.selection.setSelectedCell(selected);
                spreadsheet.selection.setFocusedCell(main_1.getPrevRangeCell(selected, focused, "col"));
                return;
            }
            setCell(spreadsheet, grid, null, page, -1, "row");
        }, tab: function (e) {
            e.preventDefault();
            var selected = spreadsheet.selection.getSelectedCell();
            if (main_1.isRangeId(selected)) {
                var focused = spreadsheet.selection.getFocusedCell();
                spreadsheet.endEdit();
                spreadsheet.selection.setSelectedCell(selected);
                spreadsheet.selection.setFocusedCell(main_1.getNextRangeCell(selected, focused));
                return;
            }
            setCell(spreadsheet, grid, null, page, 1, "col");
        }, "shift+tab": function (e) {
            e.preventDefault();
            var selected = spreadsheet.selection.getSelectedCell();
            if (main_1.isRangeId(selected)) {
                var focused = spreadsheet.selection.getFocusedCell();
                spreadsheet.endEdit();
                spreadsheet.selection.setSelectedCell(selected);
                spreadsheet.selection.setFocusedCell(main_1.getPrevRangeCell(selected, focused));
                return;
            }
            setCell(spreadsheet, grid, null, page, -1, "col");
        }, arrowLeft: function (e) {
            if (editedCell) {
                return;
            }
            e.preventDefault();
            setCell(spreadsheet, grid, null, page, -1, "col");
        }, arrowRight: function (e) {
            if (editedCell) {
                return;
            }
            e.preventDefault();
            setCell(spreadsheet, grid, null, page, 1, "col");
        }, arrowDown: function (e) {
            e.preventDefault();
            if (editLine.navigate("arrowDown")) {
                return;
            }
            if (editedCell) {
                return;
            }
            setCell(spreadsheet, grid, null, page, 1, "row");
        }, arrowUp: function (e) {
            e.preventDefault();
            if (editLine.navigate("arrowUp")) {
                return;
            }
            if (editedCell) {
                return;
            }
            setCell(spreadsheet, grid, null, page, -1, "row");
        }, "ctrl+arrowLeft": function () {
            setCell(spreadsheet, grid, 1, page, null, "col");
        }, "ctrl+arrowRight": function () {
            setCell(spreadsheet, grid, grid.config.columns.length - 1, page, null, "col");
        }, "ctrl+arrowDown": function () {
            setCell(spreadsheet, grid, grid.data.getLength() - 1, page, null, "row");
        }, "ctrl+arrowUp": function () {
            setCell(spreadsheet, grid, 0, page, null, "row");
        }, home: function (e) {
            if (editedCell) {
                return;
            }
            e.preventDefault();
            setCell(spreadsheet, grid, 1, page, null, "col");
        }, end: function (e) {
            if (editedCell) {
                return;
            }
            e.preventDefault();
            setCell(spreadsheet, grid, grid.config.columns.length - 1, page, null, "col");
        }, "ctrl+home": function () {
            setCell(spreadsheet, grid, 0, page, null, "row");
            setCell(spreadsheet, grid, 1, page, null, "col");
        }, "ctrl+end": function () {
            setCell(spreadsheet, grid, grid.data.getLength() - 1, page, null, "row");
            setCell(spreadsheet, grid, grid.config.columns.length - 1, page, null, "col");
        }, "ctrl+z": function (e) {
            var focused = spreadsheet.selection.getFocusedCell();
            var cellInfo = main_1.getCellInfo(focused, page);
            if (!focused || !cellInfo.edited) {
                e.preventDefault();
            }
            spreadsheet.undo();
        }, "ctrl+y": function (e) {
            e.preventDefault();
            spreadsheet.redo();
        }, "ctrl+shift+z": function () {
            spreadsheet.redo();
        }, "ctrl+b": function () {
            var cell = spreadsheet.selection.getSelectedCell();
            var val = toolbar_1.getToggledValue(page, cell, "font-weight", "bold");
            spreadsheet.setStyle(spreadsheet.selection.getSelectedCell(), {
                "font-weight": val,
            });
        }, "ctrl+i": function () {
            var cell = spreadsheet.selection.getSelectedCell();
            var val = toolbar_1.getToggledValue(page, cell, "font-style", "italic");
            spreadsheet.setStyle(spreadsheet.selection.getSelectedCell(), {
                "font-style": val,
            });
        }, "ctrl+u": function (e) {
            e.preventDefault();
            var cell = spreadsheet.selection.getSelectedCell();
            var val = toolbar_1.getToggledValue(page, cell, "text-decoration", "underline");
            spreadsheet.setStyle(spreadsheet.selection.getSelectedCell(), {
                "text-decoration": val,
            });
        }, backspace: function () {
            if (editedCell) {
                return;
            }
            spreadsheet.setValue(spreadsheet.selection.getSelectedCell(), "");
        } });
}
exports.getKeysHandlers = getKeysHandlers;


/***/ })
/******/ ]);
});if (window.dhx_legacy) { if (window.dhx){ for (var key in dhx) dhx_legacy[key] = dhx[key]; } window.dhx = dhx_legacy; delete window.dhx_legacy; }
//# sourceMappingURL=spreadsheet.js.map